Building Gambit on un*ces:
--------------------------

On un*ces, Gambit is configured and built with the standard autotools
mechanism:

./configure
make
su
make install

Note that we do most of our development on Linux, so it is possible the
configure script is not doing enough checking for things that happen 
on other Linux flavors.  If you encounter compile problems, please report
them to us at gambit (at) econmail (dot) tamu (dot) edu, or the 
gambit-devel mailing list, so we can address them.

If you are building from CVS instead of a released source package, you will
need to precede the above steps with

aclocal
automake
autoconf

You should only need to do this the first time you build after your initial
CVS checkout.  Subsequent updates should build by just running 'make'
as usual.

Command-line options are available to modify the configuration process;
do `./configure --help` for information.  

By default, Gambit is installed in /usr/local.  You can modify this by
the --prefix option.  For example, if you wanted to install it in your
user account, you might do

./configure --prefix=/home/mylogin/gambit

The Gambit library libgambit.so would then be in 
/home/mylogin/gambit/lib/libgambit.so.
(Obviously, you can omit the 'su' in this case.)


Building Gambit on Windows:
---------------------------

The Gambit distribution provides makefiles for Borland C++ 5.5.1.
These are in borland.mak in the sources directory and its subdirectories.
To build Gambit, you'll need to create a file sources/makedef.bcc to
point to your Borland compiler installation.
For example, if you have the compiler in
C:\BORLAND\BCC55, and you have the Gambit sources unpacked in C:\GAMBIT,
you would create a file C:\GAMBIT\SOURCES\MAKEDEF.BCC with the contents

BCCDIR = C:\BORLAND\BCC55

Your system will doubtless vary; we do recommend installing both of these
in paths that have no spaces in the directory names.  Additionally, you
should make sure the compiler binary is in your PATH (e.g., $(BCCDIR)\BIN
in the example above).

Once you're set up, run

make -f borland

in the sources directory, which will recursively call the borland.mak
makefiles in the subdirectories.  Assuming everything builds OK, the
Gambit library will be in SOURCES/GAMBIT.LIB.

We don't know if Gambit will build with other compilers, though we
would graciously accept a contribution of makefiles and/or fixes for
other compilers.


Building the Python extension
-----------------------------

The Python API can be found in sources/python in the
source distributions.  You need to build this separately if you wish to
use it.  To build it, cd to sources/python and issue a

make python

on Un*x or a 

make -f borland 

on Windows.  Note that under Unix, you'll need to have installed
the main Gambit library via a 'make install' before this will work
(since it needs to find gambit.so to link).

Note that you may need to take a few additional steps up front for this
to work; see http://www.python.org/doc/current/inst/non-ms-compilers.html
for details.  In particular, you will probably need to create a version
of the Python library that is compatible with the Borland compiler.
You will need to create the library using the command

coff2omf python23.lib python23_bcpp.lib

The coff2omf program comes with your Borland C++ installation, and the
command should be issued from the directory in which your copy of
python23.lib resides.


Hopefully, assuming Python is correctly installed on your system, this 
should build without a problem.  There is no installation target provided
yet.  You'll need the three files gambit.py, gbt.py, and _gbt.so (Un*x)
or _gbt.pyd (Windows) in the Python search path (sys.path) in order to
use the extension module.
 