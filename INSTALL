Building Gambit on un*ces:
--------------------------

On un*ces, Gambit is configured and built with the standard autotools
mechanism:

./configure
make
su
make install

Note that we do most of our development on Linux, so it is possible the
configure script is not doing enough checking for things that happen 
on other Linux flavors.  If you encounter compile problems, please report
them to us at gambit (at) econmail (dot) tamu (dot) edu, or the 
gambit-devel mailing list, so we can address them.

If you are building from CVS instead of a released source package, you will
need to precede the above steps with

aclocal
automake
autoconf

You should only need to do this the first time you build after your initial
CVS checkout.  Subsequent updates should build by just running 'make'
as usual.

Command-line options are available to modify the configuration process;
do `./configure --help` for information.  

By default, Gambit is installed in /usr/local.  You can modify this by
the --prefix option.  For example, if you wanted to install it in your
user account, you might do

./configure --prefix=/home/mylogin/gambit

The graphical interface would then be in /home/mylogin/gambit/bin/gambit,
and so forth.  (Obviously, you can omit the 'su' in this case.)

Gambit requires wxWindows 2.4.0 or higher to build.  In theory, it will
probably work with wxWindows as early as 2.3.2; if you're really insistent,
you'll have to modify the version the configure script looks for.

If wxWindows it isn't installed in a standard place (e.g., /usr or
/usr/local), you'll need to tell configure where to find it with the
--with-wx-prefix=PREFIX option, for example:

./configure --with-wx-prefix=/home/mylogin/wx

Finally, note that we work almost exclusively with the wxGTK version of
wxWindows.  There's no reason why one couldn't use the Motif/Lesstif version
in principle, but it is untested.  If you have success (or failure)
with the wxMotif version, please also let us know.


Building Gambit on Windows:
---------------------------

The Gambit distribution provides makefiles for Borland C++ 5.5.1.
These are in borland.mak in the sources directory and its subdirectories.
To build Gambit, you'll need to create a file sources/makedef.bcc to
point to your wxWindows installation and your Borland compiler installation.
For example, if you have wxWindows built in C:\WX2 and the compiler in
C:\BORLAND\BCC55, and you have the Gambit sources unpacked in C:\GAMBIT,
you would create a file C:\GAMBIT\SOURCES\MAKEDEF.BCC with the contents

WXDIR = C:\WX2
BCCDIR = C:\BORLAND\BCC55

Your system will doubtless vary; we do recommend installing both of these
in paths that have no spaces in the directory names.  Additionally, you
should make sure the compiler binary is in your PATH (e.g., $(BCCDIR)\BIN
in the example above).

Once you're set up, run

make -f borland

in the sources directory, which will recursively call the borland.mak
makefiles in the subdirectories.  Assuming everything builds OK, the
graphical interface will be in sources/gui/gambit.exe, and wxGCL will
be in sources/wxgcl/wxgcl.exe.

Note that beginning with wxWindows 2.4, the convention for naming the
libraries built by wxWindows has changed.  The makefiles are set up assuming
the static "final" library of wxWindows was built (using the command
make -f makefile.b32 FINAL=1 as documented in the wxWindows install 
directions), named wx24s_bcc.  If you build a debugging or hybrid version
of this library, you will need to replace the reference to that library
to the correct alternative in both sources/gui/borland.mak and
sources/wxgcl/borland.mak for a successful link.  Linking against a DLL
version of wxWindows should also work, but we haven't tested that.

We don't know if Gambit will build with other compilers, though we
would graciously accept a contribution of makefiles and/or fixes for
other compilers.


Building the Python extension
-----------------------------

The (alpha version) Python API can be found in sources/python in the
source distributions.  Since it's alpha, it's not integrated into the
usual build chain yet.  To build it, cd to sources/python and issue a

python setup.py build

For Windows users, to use the Borland C++ 5.5 compiler (which is what Gambit
is currently tested with), you'll do

python setup.py build --compiler=bcpp

Note that you may need to take a few additional steps up front for this
to work; see http://www.python.org/doc/current/inst/non-ms-compilers.html
for details.  Also, if you do not have Borland C++ 5.5 installed in its
usual location of C:\BORLAND\BCC55, you'll need to edit the file
gambit/sources/python/setup.py to point the compiler and linker to the
correct include and library directories, respectively.

Hopefully, assuming Python is correctly installed on your system, this 
should build without a problem.  (Windows users will probably need to
specify an extra flag indicating the compiler to use.)  You can then try

python setup.py install

to install it to the appropriate directories for Python to find it.
(Unix users will probably want to 'su' before doing this.)  

Note that this is an initial release of the Python API, and as such all
manner of problems may arise.  We'd *really* like to get reports and
suggestions regarding this; we want this to be more-or-less "production"
quality by the release of 0.97.2.0 sometime during academic year 2003-04.

 