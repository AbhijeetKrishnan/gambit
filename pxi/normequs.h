//***************************************************************************
//* File: normequs.h.  Header file for normequs.cc.
//* This class uses the ProbVect class to find the equilibria points for an
//* NxN normal form game using the grid search method (brute force).  The
//* class is initialized with a game matrix and the pertinent parameters.
//* The output file is generated by calling the Go() function.  The name of
//* the file can be either set as one of the constructor parameters or is
//* a random filename created by the system.
//* A short explanation of the constructor parameters:
//* l_start				at what value of lambda to start the calculation
//* l_end					""	""	""				""				end				""
//* dl						Delta Lambda--what increment of lambda to use
//* dp						Delta P--the increment for the probabilities of each
//*								stategies.  Note that this value increases the time!
//* m_error				Margin of error--how close is close enough.  Note: to get
//*								nicer, more distinct lines, reduce this value, to get a
//*								'band' of points, increase this.  Try .01 or less.  Also
//*								note that too small a value will result in very few solutions.
#ifndef	NORMALEQUSOLVER_H
#define NORMALEQUSOLVER_H
#ifndef Bool_DEFINED
#ifndef TRUE
typedef int Bool;
#endif
#endif
#include <stdio.h>
#include <assert.h>
#include "gambitio.h"

typedef struct {double row;double col;} PayoffStruct;

class NormalMatrix
{
private:
	PayoffStruct	**data;
	int			dim;
public:
	NormalMatrix(char *file_name);
	NormalMatrix(FILE *fp);
	NormalMatrix(gInput &in);
	NormalMatrix(NormalMatrix &m);
	NormalMatrix(int _dim);
	void WriteMatrix(char *file_name);
	void WriteMatrix(FILE *fp);
  void WriteMatrix(gOutput &out);
	~NormalMatrix(void);
	PayoffStruct operator()(int index1,int index2) const {assert(data!=NULL);assert(index1<dim);assert(index2<dim);return data[index1][index2];}
	void SetValue(int row,int col,double p_row,double p_col)
		{assert(data!=NULL);assert(row<dim);assert(col<dim);
		data[row][col].row=p_row;data[row][col].col=p_col;}
	int	Dim(void) {return dim;}
	int	DimX(void) {return dim;}
	int	DimY(void) {return dim;}

};


class NormalEquSolver
{
private:
	typedef enum {MODE_NORMAL,MODE_NEW,MODE_DONE} output_modes;
	double l_start,l_stop,dl,dp,m_error;
	double *p,*x,*y,*q_calc;
	NormalMatrix 	*matrix;   /* payoff table: matrix[p][q][ROW/COL]	*/
	char 	file_name[80];
	Bool	keep,done;
	int		dim;
  int		data_type;
	void  (*update_func)(void);
	void	OutputResult(double l,double *q,double *p,double dist,output_modes mode=MODE_NORMAL);
	Bool	Check_Equ(double *q,double l);
public:
	// Constructors
	NormalEquSolver(char *_matrix_file_name,double _l_start,double _l_stop,double _dl,double _dp,double _m_error,int _data_type,char *out_file_name=NULL);
	NormalEquSolver(NormalMatrix _matrix,double _l_start,double _l_stop,double _dl,double _dp,double _m_error,int _data_type,char *out_file_name=NULL);
	NormalEquSolver(void);
	// Destructor
	~NormalEquSolver(void);
	// Set* functions to use with void contructor
	void	SetOutFileName(char *_file_name);
	void	SetMatrixFileName(char *_matrix_file_name);
	void	SetMatrix(NormalMatrix &_matrix);
	void	SetLStart(double _l_start);
	void	SetLEnd(double _l_end);
	void	SetDeltaL(double _dl);
	void	SetDeltaP(double _dp);
	void	SetKeepFile(Bool _keep) {keep=_keep;}
	void	SetUpdateFunc(void (*_update_func)(void)) {update_func=_update_func;}
	// Get* functions to get info about this solver
	char *GetOutFileName(void) {return file_name;}
	NormalMatrix *	GetMatrix(NormalMatrix &_matrix) {assert(matrix!=NULL);return matrix;}
	double	GetLStart(void) {return l_start;}
	double	GetLStop(void) {return l_stop;}
	double	GetDeltaL(void) {return dl;}
	double	GetDeltaP(void) {return dp;}
	Bool	GetKeepFile(void) {return keep;}

	Bool	Done(void) {return done;}

	// Start function
	void Go(void);

};

#define	ROW		0
#define	COL		1
#define	DATA_TYPE_LOG		1
#define	DATA_TYPE_ARITH	0
#endif
