Gambit Closed Bugs List

---------------

ITEM 0003: LPSolve[] fails when stopAfter != 1

DATE:     9/8/1999 by TLT (was Bugs C18 and C27 in bugs_gcl)
AFFECTS:  GCL (GUI as well?), all platforms(?)
STATUS:   CLOSED
SEVERITY: MAJOR
DETAILS:

RDM: This bug was "fixed" by getting rid of the "stopAfter" parameter.
Since there are other ways of computing all Nash equilibria for a 2
person const sum game, and the code to do this through the LP is not
completed, getting this working is not essential.  So it was just disabled, to prevent anyone from using this part of the code. 

  GCL1:= << n:=LoadNfg["../nfg/csg1.nfg"]
  (Nfg) ""
  GCL2:= << m:=LpSolve[n,stopAfter->0]

  c: { 0.000000 0.000000 0.000000 1.000000 }
  uc: { 0.000000 0.000000 0.000000 0.000000 }
  col: 1 cost: 0.000000 label: 4 x: 1.000000
  col: 2 cost: -1.000000 label: -2 x: In function LpSolve[], in file "stdudfs.gcl" at line 463:
  In function LpSolve[], in file "console" at line 2:
  GCL EXCEPTION:Bad index in gArray; Caught in gcl.cc, main()

Include["gclini.gcl"]
Include["/home/mill/rdm/gambit/bin/stdudfs.gcl"]
GCL1:= << n:=LoadNfg["../nfg/zero.nfg"]
(Nfg) "Two person 2 x 2 game with all zero payoffs"
GCL2:= << LpSolve[n]
{ (Mixed) { 1.000000 0.000000 }{ 1.000000 0.000000 } }
GCL3:= << LpSolve[n,stopAfter->2]

c: { 0.000000 0.000000 1.000000 }
uc: { 0.000000 0.000000 0.000000 }
col: 1 cost: 0.000000 label: 3 x: 1.000000
col: 2 cost: 0.000000 label: -2 x: In function LpSolve[], in file "/home/mill/rdm/gambit/bin/stdudfs.gcl" at line 461:
In function LpSolve[], in file "console" at line 3:
EXCEPTION: Bad index in gArray
GCL4:= << Quit

Note: Bug does not occur if stopAfter->1

---------------

ITEM 0004: Algorithms producing nonsense on games of imperfect recall

DATE:     9/8/1999 by TLT (was Bug C21 in bugs_gcl)
AFFECTS:  GCL, GUI; all platforms
STATUS:   CLOSED 9/9/1999 by TLT
SEVERITY: MAJOR
DETAILS:

  GCL1:= << e:=LoadEfg["myerson.efg"]
  (Efg) "Myerson - Game with no solution in behavioral strategies"
  GCL2:= << IsPerfectRecall[e]       
  False
  GCL3:= << b:=LcpSolve[e]              
  { (Behav) { { 0.000000 1.000000 }{ 0.250000 0.750000 } }{ { 0.500000 0.500000 } } }
  GCL4:= << IsNash[b]
  { False }
  GCL5:= << OneNash[e]   
  { (Behav) { { 0.500000 0.500000 }{ 1.000000 1.000000 } }{ { 0.500000 0.500000 } } }
  GCL6:= << IsNash[GCL5] 
  { Maybe }

COMMENTS:
TLT 9/9/1999.  Behavior strategies now return Unknown for these quantities
for games of imperfect recall.  Also, algorithms warn in both GUI and GCL
before solving, so the user is aware of the possible pitfalls.

---------------

ITEM 0006:  Infinite loop in LcpSolve[nfg]

DATE:     9/8/1999 by TLT (was Bug C28 in bugs_gcl)
AFFECTS:  GCL (all platforms?)
STATUS:   CLOSED 9/13/99 by RDM
SEVERITY: MAJOR
DETAILS:

The following hangs the GCL:

  GCL1:= << k:=10;
  GCL2:= << n:=Randomize[NewNfg[{k,k},True],seed->142];
  GCL3:= << LcpSolve[n]

RDM: 9/13/99: This bug was inadvertently fixed by implementing scaling to fix ITEM 0001

---------------

ITEM 0007:  Include file names not printable

DATE:     9/8/1999 by TLT (was Bug C31 in bugs_gcl)
AFFECTS:  GCL (MSWindows)
STATUS:   CLOSED 9/8/1999 by TLT
SEVERITY: MINOR
DETAILS:

Here, the GCL is being run from the directory c:\gambit96, and the
gclini.gcl and stdudfs.gcl files are in c:\gambit96\bin.

  Include["C:\gambit9in\gclini.gcl"]
  Include["C:\gambit9in\stdudfs.gcl"]
  GCL1: << Include["gcl\nqre.gcl"]
  True
  Include["gcl
  qre.gcl"]

Note that it does not print the names of the included files correctly,
even though it locates and loads them all correctly.  Evidently it is
treating the "\n" in the pathname "gcl\nqre.gcl" as a new line
character when it prints it even though it actually loads the file OK.
This is probably what is happening with the "\b" in "c:\gambit96\bin"
also.

COMMENTS
TLT 9/8/1999.  Fixed this by forcing all path names to have forward slashes,
regardless of operating system.  (This works fine for DOS paths.)

---------------

ITEM 0010:  GCL segfaults; orphan variables suspected

DATE:     9/8/1999 by TLT (was Bug C33 in bugs_gcl)
AFFECTS:  GCL (all platforms?)
STATUS:   CLOSED 9/9/1999 by TLT
SEVERITY: CRUCIAL
DETAILS:

Put the following commands in the file test.gcl

  e:= NewEfg[];
  P1 := NewPlayer[e, "P1"];
  e:= NewEfg[];
  P1 := NewPlayer[e, "P1"];
  e:= NewEfg[];
  P1 := NewPlayer[e, "P1"];

Then 

  Include["test.gcl"] leads to   

GCL1:= << Include["test.gcl"]     
True
A segmentation fault has occurred

On the other hand, if P1 is deallocated before each call, as in 

  e:= NewEfg[];
  P1 := NewPlayer[e, "P1"];
  e:= NewEfg[];
  P1:=;P1 := NewPlayer[e, "P1"];
  e:= NewEfg[];
  P1:=;P1 := NewPlayer[e, "P1"];

then it is OK.  Also, if the contents of test.gcl are run from the
command line, it is OK.

COMMENTS:
TLT 9/9/1999.  Turned out to be a problem in accurately keeping track
of references to games when using reference-type Portions.  This affected
all game types, not just EFPLAYER.

---------------

ITEM 0020:  Field width on dialog boxes

DATE:     9/8/1999 by TLT (was Bug D35 in bugs_gui)
AFFECTS:  GUI, all platforms
STATUS:   CLOSED 9/10/1999 by TLT
SEVERITY: CRUCIAL
DETAILS:

Examples:

1. On Solve->Custom->NFG->SimpDiv, the #restarts field is too narrow
on MSWin.  

2. On File Save, the field for the decimal places is too narrow to see
the number.  There were other dialogs with similar problems.  Can't
recall them now.

COMMENTS:
TLT 9/8/1999.  These are fine on my display under Win95.  I have experienced
similar problems when running the X version remotely on my display, however.
We need to experiment across several displays to determine what causes
this and how to deal with it in as system-independent a way as possible.

TLT 9/10/1999.  These are being solved by the use of the layout constraints
feature of wxWindows.

---------------

ITEM 0021:  Bug in interactive selection of subgame solutions

DATE:     9/8/1999 by TLT (was Bug D37 in bugs_gui)
AFFECTS:  GUI (all platforms?)
STATUS:   CLOSED 9/9/1999 by TLT
SEVERITY: CRUCIAL
DETAILS:

The following causes a crash:

Load coord2ts.efg, and solve via Solve->Custom->Efg->LCP (noDomElim,
Interactive selection, findAll)

COMMENTS:
TLT 9/8/1999.  I cannot reproduce this on my machine.

TLT 9/9/1999.  Turned out to be a division by zero problem in the status
indicator for sequence form.

---------------

ITEM 0022:  Dominance info not displayed on normal form game.  

DATE:     9/8/1999 by TLT (was Bug D38 in bugs_gui)
AFFECTS:  GUI (all platforms)
STATUS:   CLOSED 9/9/1999 by TLT
SEVERITY: CRUCIAL
DETAILS:

Load poker.efg, generate a normal form game, and do
Supports->ElimDom (Weak,Pure) The dominance information should be
displayed in the normal form, but it is not displayed, even if you
select Inspect->Info->DisplayDominance

COMMENTS:
TLT 9/8/1999.  This is because the dominance elimination code does not
return any dominance info for the GUI to display.  This will be added
shortly, and the GUI modified to take advantage.

COMMENTS:
TLT 9/9/1999.  Fixed.

---------------

ITEM 0023:  Windows don't dismiss via window manager close control

DATE:     9/8/1999 by TLT (was Bug 5.2 in bugs_gui)
AFFECTS:  GUI (all platforms)
STATUS:   CLOSED 9/10/1999 by TLT
SEVERITY: CRUCIAL
DETAILS:

> 2. Why the solution list window does not vanish from the upper right
> close button?

COMMENTS:
RDM 8/20/1999.  Solution list window is fixed, but there are still a few
with the problem -- i.e, in the inspect solution window, the edit
mixed window cannot be deleted.  Also, the Edit->Strats->Label dialog
box (and perhaps others as well) can not be gotten rid of.  Also,
after this window has been created, the main Gambit window can be
dismissed and the child windows do not get dismissed.  (this is on
Linux) N.B. the "close" button here refers to the window manager close
button.

TLT 9/8/1999.  Mixed strategy edit window should now be fixed (works on
Windows, untested on unix.)  There is no such dialog as Edit->Strats->Label;
all the dialogs on the Edit menu on the normal form seem just fine to me.
This sounds like it might be an outdated problem; I replaced a spreadsheet
version of that dialog months ago which did have a similar problem.

TLT 9/10/1999.  These will be checked as we finalize dialog boxes. 

---------------

ITEM 0024:  Scrolling problems

DATE:     9/8/1999 by TLT (was Bug 5.4 in bugs_gui)
AFFECTS:  GUI (all platforms)
STATUS:   CLOSED 12/12/1999 by TLT
SEVERITY: MAJOR
DETAILS:

> 4. When the main window for the tree design is not maximized the
> vertical and the horizontal bars are getting out of the screen.

COMMENTS:
RDM 9/3/1998.  Here are further details:

On Linux: Load caro2.efg.  Hit +magnify button twice.  Move cursor
R,R,D,R,R.  Notice how screen does not always display cursor.  Now hit
L,L,L,L, and try to get back to the root node.  Again cursor moves off
the screen, and the bottom scroll bar does not help to move the window
to display the cursor.  Also, the scroll bars require a complete
redraw before the next scroll bar hit is recorded. Load a big game
like bayes2a.efg, andthen hit the right scroll bar three times
insuccession to try and scroll the screen down.  It redraws the screen
three times instead of halting the redraw when the second and third
hits to the scroll bar are made.  Also, dragging the scroll bar does
not work.  This makes it very time consuming to move around a large
game.

On MSWindows: Load condjury.efg, and hit the -magnify button twice (to
get to mag .6).  Then try and get to the lower right part of the tree.
It is impossible either by the cursor or by the use of the scrollbars.

TLT 12/12/1999.  This was due to problems in wxWindows in scrolling
and zooming.  Solved by removing scrolling features from the tree window.

---------------

ITEM 0025:  Information set lines are lost or broken on large trees

DATE:     9/8/1999 by TLT (was Bug 5.7 in bugs_gui)
AFFECTS:  GUI (all platforms?)
STATUS:   CLOSED 12/12/1999 by TLT
SEVERITY: INTERMEDIATE
DETAILS:

> 7. In the magnify mode the lines representing information sets are
> broken or lost on trees with big verical dimension ( due to many
> branches emanating from a single node). Also in this case horizontal
> gray lines appear and payoffs seems like double-stroked.

COMMENTS:
RDM 9/3/1998.  This is still a problem.  Look at Bayes2a, try and
remember what the game is supposed to look like (or bring up two
copies, one for comparison). Then hit +Magnify three times.  Now move
around the tree with the cursor, and eventually you will see this.

TLT 12/12/1999.  This was a bug in the clipping code.

---------------

ITEM 0032:  Perfect equilibrium test for 2-player games

DATE:     9/8/1999 by TLT/RDM
AFFECTS:  GUI, GCL; all platforms
STATUS:   CLOSED 9/9/1999 by RDM
SEVERITY: CRUCIAL
DETAILS:

Use LP from VanDamme, p. 49. I added code to
check whether a pure equilibrium is mixed dominated, but still need to
add code for mixed equilibria, and hook up to IsPerfect.

---------------

ITEM 0035:  LiapSolve not setting solutions to Nash

DATE:     9/8/1999 by TLT/RDM
AFFECTS:  GCL; a
STATUS:   CLOSED 9/9/1999 by TLT
SEVERITY: CRUCIAL
DETAILS:

GCL1:= << e:=LoadEfg["../efg/e01.efg"
GCL2:= << AllNash[e]                  
 Warning: Entering infinite loop.  Use Ctl-C to exit.
{ (Behav) { { 1.000000 0.000000 } }{ { 0.999998 0.000002 } }{ { 0.248126 0.751874 } },
  (Behav) { { 1.000001 0.000000 } }{ { 0.999992 0.000008 } }{ { 0.231082 0.768918 } },
  (Behav) { { 1.000000 0.000000 } }{ { 1.000000 0.000000 } }{ { 0.247619 0.752381 } },
  (Behav) { { 1.000001 0.000000 } }{ { 0.999991 0.000009 } }{ { 0.246676 0.753324 } },
  (Behav) { { 1.000001 0.000000 } }{ { 0.999991 0.000009 } }{ { 0.249250 0.750750 } },
  (Behav) { { 1.000000 0.000000 } }{ { 0.999994 0.000006 } }{ { 0.234463 0.765537 } },
  (Behav) { { 1.000001 0.000000 } }{ { 0.999994 0.000006 } }{ { 0.238701 0.761299 } },
  (Behav) { { 1.000000 0.000000 } }{ { 0.999999 0.000001 } }{ { 0.246528 0.753472 } },
  (Behav) { { 0.999992 0.000008 } }{ { 0.999985 0.000015 } }{ { 0.249969 0.750031 } } }
GCL3:= << IsNash[GCL2]
{ Unknown,
  Unknown,
  Unknown,
  Unknown,
  Unknown,
  Unknown,
  Unknown,
  Unknown,
  Unknown }

COMMENTS:
TLT 9/9/1999.  Turned out to be incorrect setting of m_epsilon when 
constructing a solution from a BehavProfile<gNumber>.  Still leaves unresolved
what a good setting of m_epsilon is.

---------------

ITEM 0033:  Need capability to output sequence form

DATE:     9/8/1999 by TLT/RDM
AFFECTS:  GUI, GCL; all platforms
STATUS:   CLOSED
SEVERITY: CRUCIAL
DETAILS:

Should be able to generate the sequence form for a game.  The code
exists for n-player games, but at a minimum needs to be made available
to the user for 2-player games.

---------------

ITEM 0036:  THE WEIRD ONE:  Same binary yields different results for different users.  

DATE:     9/24/1999 by RDM
AFFECTS:  GUI
STATUS:   CLOSED
SEVERITY: CRUCIAL
DETAILS:

Load poker.nfg and solve for One Nash Float, using standard solution
dialog. It brings up a dialog "An internal error occurred in
Gambit. Bad index in gArray", and does not display the solution
inspect dialog. On the other hand, it has evidently solved the game
OK, since the solution is displayed in the Normal form window.

This is a weird problem that does not always occur.  It first occurred
for me(RDM), and Ted could not reproduce.  Then we both tried running
simultaneously using the same binary, and it still occurred for me,
but not for Ted.  Ted was finally able to reproduce the problem.  It
required him launching in a particular manner.  As I recall it was to
to to direcory of executable, and then load the file from the command
line:

  gui_motif_Linux ../nfg/poker.nfg &

Here is some correspondence with further info on the problem. 

On Tue, 14 Sep 1999, Richard D. McKelvey wrote:

> Ted
> 
> I compiled the binary in ~rdm/gambit/debug/gambit/sources/gui_motif_Linux 
> 
> The problem occurs for poker.nfg when you use the standard solutions, with
> OneNashFloat.  Here is a function stack.  
> 
> I tried various other games, and solving the same game via the custom
> algorithms, and think that it is related to dominance elimination.  If 
> you solve the game via Lp without any dominance elimination, then it
> works fine.  But if you use iterative dominance elimination, then it
> gives this problem.  Once it has given the problem, any other attempt
> to solve the problem will result in the exception being thrown again.  
> So evidently something bad is being put into the solution inspect
> window.  
> 
> Possibly this is an algorithm problem.  On the other hand, it displays the
> correct solution values on the normal form. So it is evidently solving it.
> 
> Here is a stack trace. 
> 
> Breakpoint 1, 0x402d6a40 in __throw ()
> (gdb) bt
> #0  0x402d6a40 in __throw ()
> #1  0x80542db in gArray<Strategy *>::operator[] (this=0x852349c, index=3) at garray.h:75
> #2  0x81a76dd in NfgSolnShow::UpdateValues (this=0x8543fc8) at nfgsoln.cc:653
> #3  0x81a7efd in NfgSolnShow::SortFilter (this=0x8543fc8, inter=false) at nfgsoln.cc:754
> #4  0x81a600c in NfgSolnShow::NfgSolnShow (this=0x8543fc8, solns_=@0x853e388, num_players_=2, max_strats=4, cur_soln_=1, 
>     ds=@0x853e3f4, sf_options_=@0x853e400, parent_=0x853e318, parent_frame=0x8544d70, opts=23) at nfgsoln.cc:281
> #5  0x819d0b0 in NfgShow::InspectSolutions (this=0x853e318, what=0) at nfgshow.cc:472
> #6  0x819dd33 in NfgShow::SolveStandard (this=0x853e318) at nfgshow.cc:677
> #7  0x81a3760 in NormalSpread::OnMenuCommand (this=0x8544d70, id=145) at nfgshow.cc:1965
> #8  0x826d863 in wxMenuItemCallback () at dlsupport.cc:294
> #9  0x4026eb24 in XtCallCallbackList ()
> #10 0x4013ccb5 in XmCreatePushButton ()
> #11 0x4013e6bb in XmCreatePushButton ()
> #12 0x4013c293 in XmCreatePushButton ()
> #13 0x40119b35 in _XmDispatchGadgetInput ()
> #14 0x401bd3a9 in _XmMenuBtnUp ()
> #15 0x4029be9b in HandleActions ()
> #16 0x4029c379 in HandleSimpleState ()
> #17 0x4029c8c1 in _XtTranslateEvent ()
> #18 0x40279cbf in XtDispatchEventToWidget ()
> #19 0x4027a6fd in _XtDefaultDispatcher ()
> #20 0x4027a975 in XtDispatchEvent ()
> #21 0x823f2c1 in wxApp::MainLoop () at dlsupport.cc:294
> #22 0x823f038 in wxEntry () at dlsupport.cc:294
> #23 0x823f474 in main () at dlsupport.cc:294

COMMENTS:

TLT 10/5/1999: The GUI was still using the Support() member of solutions
as the literal support of the profile, and not the new interpretation
as the support passed to the creating algorithm.

--------------

ITEM 0037:  Short form for NthChar[] not enabled

DATE:     9/24/1999 by RDM
AFFECTS:  GCL
STATUS:   CLOSED 10/11/1999 by TLT
SEVERITY: CRUCIAL
DETAILS:

Documentation claims x_n is short form for NthChar[x,n].  However, 

  GCL1:= << x:="12345"
  12345
  GCL2:= << x_2
  ERROR: NthElement[] called with ambiguous parameter(s)
  GCL3:= << Help["nthelement"]
  { NthElement[list<->NLIST(ANYTYPE), n->INTEGER] =: ANYTYPE,
    NthElement[s<->NFSUPPORT, n->NUMBER] =: LIST(STRATEGY), 
    NthElement[s<->EFSUPPORT, n->NUMBER] =: LIST(ACTION) }

Evidently, x_n is only recognized as short form for NthElement.  The
error message claims ambiguity.  However, the ambiguity is *resolved*
by adding another signature:

  GCL4:= << NewFunction[NthElement[x->TEXT,n->NUMBER]=:TEXT,NthChar[x,n];];
  True
  GCL5:= << x_2                                                            
  2

COMMENTS:
TLT 10/11/1999.  This was resolved by renaming NthChar[] to NthElement[].
It involved some tweaks to the listability rules; now, functions which
match exactly "trump" listable calls.

---------------

ITEM 0038:  AllSubgamePerfect[] fails on Nim.  

DATE:     9/24/1999 by RDM
AFFECTS:  GCL
STATUS:   CLOSED
SEVERITY: CRUCIAL
DETAILS:

Problem is not in the UDF.  Here is problem without going through AllSubgamePerfect:

  GCL1:= << e:=LoadEfg["../efg/e10.efg"]
  (Efg) "Nim with 5 stones"
  GCL2:= MarkSubgames[e]
  GCL3:= << b:=EnumMixedSolve[Support[e],asNfg->True]
  In function EnumMixedSolve[], in file "console" at line 3:
  EXCEPTION: Bad index in gArray

Here is a stack trace:

  Breakpoint 1, 0x4003ba40 in __throw ()
  Current language:  auto; currently c

  (gdb) bt
  #0  0x4003ba40 in __throw ()
  #1  0x817d8b6 in gArray<Strategy *>::operator[] (this=0x850b3dc, index=1) at garray.h:75
  #2  0x81794cd in StrategyProfile::StrategyProfile (this=0xbfffe864, N=@0x850c910) at nfstrat.cc:20
  #3  0x817ce72 in NfgContIter::NfgContIter (this=0xbfffe834, s=@0xbfffe898) at nfgciter.imp:17
  #4  0x81ca3a6 in MakeReducedNfg (support=@0xbfffeb68) at efgnfg.cc:139
  #5  0x8283bf3 in EnumBySubgame::SolveSubgame (this=0xbffff360, E=@0xbfffeb2c, sup=@0xbfffeb68, solns=@0xbfffec54)
      at enumsub.cc:12
  #6  0x825dc85 in SubgameSolver::FindSubgames (this=0xbffff360, p_support=@0xbffff294, n=0x8505ee0, solns=@0xbfffef18, 
      values=@0xbfffef00) at subsolve.cc:130
  #7  0x825d21a in SubgameSolver::FindSubgames (this=0xbffff360, p_support=@0xbffff294, n=0x8505dc0, solns=@0xbffff1ac, 
      values=@0xbffff194) at subsolve.cc:39
  #8  0x825d21a in SubgameSolver::FindSubgames (this=0xbffff360, p_support=@0xbffff294, n=0x8505d60, solns=@0xbffff378, 
      values=@0xbffff30c) at subsolve.cc:39
  #9  0x825f05d in SubgameSolver::Solve (this=0xbffff360, p_support=@0x8504460) at subsolve.cc:282
  #10 0x8283f1d in Enum (support=@0x8504460, params=@0xbffff444, solutions=@0xbffff420, npivots=@0xbffff414, time=@0xbffff418)
      at enumsub.cc:44
  #11 0x82dee22 in GSM_EnumMixed_Efg (param=0x85021d8) at algfunc.cc:215
  #12 0x8293bdc in CallFuncObj::CallNormalFunction (this=0xbffff828, gsm=0x8493910, param=0x85021d8) at gsmfunc.cc:1051
  #13 0x8298e74 in CallFuncObj::CallFunction (this=0xbffff828, gsm=0x8493910, param=0x8502270) at gsmfunc.cc:1645
  #14 0x82b8efa in gclFunctionCall::Evaluate (this=0x84fa4f8) at gsminstr.cc:263
  #15 0x82b9362 in gclAssignment::Evaluate (this=0x84fc940) at gsminstr.cc:304
  #16 0x82b8b4a in gclFunctionCall::Evaluate (this=0x84fb778) at gsminstr.cc:230
  #17 0x82b9362 in gclAssignment::Evaluate (this=0x84fb940) at gsminstr.cc:304
  #18 0x828962d in GSM::Execute (this=0x8493910, expr=0x84fb940) at gsm.cc:559
  #19 0x83058f3 in GCLCompiler::Execute (this=0xbffffaa4) at gcompile.yy:836
  #20 0x83041d0 in GCLCompiler::Parse (this=0xbffffaa4, line=@0xbffffa5c, file=@0xbffffa58, lineno=3, rawline=@0xbffffa54)
      at gcompile.yy:691
  #21 0x8312615 in main (argv=0xbffffb94) at gcl.cc:174

Same problem (it looks like) occurs in IsSubgamePerfect()

  GCL1:= << e:=LoadEfg["../efg/e10.efg"]
  (Efg) "Nim with 5 stones"
  GCL2:= <<  p:={ { { 0, 1 },{ 1, 0 },{ 1, 0 },{ 0, 1 } },{ { 1, 0 },{ 0, 1 },{ 1, 0 } } }
  { { { 0, 1 }, { 1, 0 }, { 1, 0 }, { 0, 1 } },
    { { 1, 0 }, { 0, 1 }, { 1, 0 } } }
  GCL3:= << b:=Behav[e,p]                                                                
  (Behav) { { 0 1 }{ 1 0 }{ 1 0 }{ 0 1 } }{ { 1 0 }{ 0 1 }{ 1 0 } }
  GCL4:= << IsSubgamePerfect[b]                                                          
  In function IsSubgamePerfect[], in file "console" at line 4:
  EXCEPTION: Bad index in gArray

  Current language:  auto; currently c
  (gdb) bt

  #0  0x4003ba40 in __throw ()
  #1  0x821b889 in gDPVector<gNumber>::operator() (this=0xbfffe800, a=1, b=1, c=1) at gdpvect.imp:128
  #2  0x81af213 in BehavProfile<gNumber>::Gripe (this=0xbfffe9b4, value=@0xbfffe8a0) at behav.h:435
  #3  0x81af6f5 in BehavProfile<gNumber>::MaxGripe (this=0xbfffe9b4) at behav.h:453
  #4  0x81df481 in SubgamePerfectChecker::SolveSubgame (this=0xbffff324, E=@0xbfffeae8, sup=@0xbfffeb24, solns=@0xbfffec10) at behavsol.cc:810
  #5  0x8261bc1 in SubgameSolver::FindSubgames (this=0xbffff324, p_support=@0xbffff250, n=0x8514ca0, solns=@0xbfffeed4, values=@0xbfffeebc) at subsolve.cc:130
  #6  0x8261156 in SubgameSolver::FindSubgames (this=0xbffff324, p_support=@0xbffff250, n=0x8514b80, solns=@0xbffff168, values=@0xbffff150) at subsolve.cc:39
  #7  0x8261156 in SubgameSolver::FindSubgames (this=0xbffff324, p_support=@0xbffff250, n=0x8514b20, solns=@0xbffff33c, values=@0xbffff2c8) at subsolve.cc:39
  #8  0x8262f05 in SubgameSolver::Solve (this=0xbffff324, p_support=@0xbffff49c) at subsolve.cc:282
  #9  0x81dd0a5 in BehavSolution::IsSubgamePerfect (this=0x8512660) at behavsol.cc:409
  #10 0x82fac2b in GSM_IsSubgamePerfect (param=0x84f93d8) at solfunc.cc:383
  #11 0x8297c08 in CallFuncObj::CallNormalFunction (this=0xbffff898, gsm=0x84942a0, param=0x84f93d8) at gsmfunc.cc:1051
  #12 0x829cea0 in CallFuncObj::CallFunction (this=0xbffff898, gsm=0x84942a0, param=0x84f9408) at gsmfunc.cc:1645
  #13 0x82bcf2e in gclFunctionCall::Evaluate (this=0x850fdf0) at gsminstr.cc:263
  #14 0x82bcb7e in gclFunctionCall::Evaluate (this=0x84f6c40) at gsminstr.cc:230
  #15 0x82bd396 in gclAssignment::Evaluate (this=0x84f6c68) at gsminstr.cc:304
  #16 0x828d659 in GSM::Execute (this=0x84942a0, expr=0x84f6c68) at gsm.cc:559
  #17 0x8305d9f in GCLCompiler::Execute (this=0xbffffaec) at gcompile.yy:836
  #18 0x830467c in GCLCompiler::Parse (this=0xbffffaec, line=@0xbffffaa4, file=@0xbffffaa0, lineno=4, rawline=@0xbffffa9c) at gcompile.yy:691
  #19 0x8312ac1 in main (argv=0xbffffbd8) at gcl.cc:174

---------------

ITEM 0040:  Order of Precedence for Exponentiation not correct

DATE:     10/2/1999 by RDM
AFFECTS:  GCL
STATUS:   CLOSED 10/8/1999 by TLT
SEVERITY: MINOR
DETAILS:

Shouldn't exponentiation have a higher order of precedence than
multiplication and division?  Right now they are at the same level,
which gives the following:

  GCL1:= << 4 * 10^2
  1600

when one would expect:

  GCL2:= << 4 * (10^2)
  400

(but shouldn't have to put the parentheses.) 


