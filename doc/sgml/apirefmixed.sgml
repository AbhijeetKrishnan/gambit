<sect1 id="apiref.mixed">
<title>Mixed strategy profiles</title>

<para>
</para>

<sect2 id="apiref.mixed.getbehavior">
<title>GetBehavior</title>
<indexterm><primary>GetBehavior</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtBehavProfile &lt;T&gt; gbtMixedProfile&lt;T&gt;::GetBehavior(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetBehavior</function> returns the behavior strategy profile
corresponding to this mixed strategy profile.  The conversion is done
using the calculations in Kuhn's Theorem, which assumes the game is
of perfect recall.  The output in the case of games which are not
of perfect recall is not well-defined and may be unpredictable.   
</para>

</sect2>

<sect2 id="apiref.mixed.getgame">
<title>GetGame</title>
<indexterm><primary>GetGame</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtGame gbtMixedProfile&lt;T&gt;::GetGame(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetGame</function> 
returns the game on which the profile is defined.
</para>

</sect2>


<sect2 id="apiref.mixed.getliapvalue">
<title>GetLiapValue</title>
<indexterm><primary>GetLiapValue</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
T gbtMixedProfile&lt;T&gt;::GetLiapValue(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>LiapValue</function>
returns the Lyapunov function value for the profile.
This is a nonnegative value which is zero exactly when the
profile is a Nash equilibrium.
</para>

</sect2>


<sect2 id="apiref.mixed.getpayoff">
<title>GetPayoff</title>
<indexterm><primary>GetPayoff</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
T gbtMixedProfile&lt;T&gt;::GetPayoff(const gbtGamePlayer &amp;p_player) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetPayoff</function> returns the expected payoff to player
<parameter>player</parameter>, when all players play according to
the profile.  
A <errorname>gbtGameMismatchException</errorname> (mapped to
<errorname>RuntimeError</errorname> in Python) occurs if
<parameter>p_player</parameter> is not from the same game as the
profile.
</para>

</sect2>


<sect2 id="apiref.mixed.getstrategyprob">
<title>GetStrategyProb</title>
<indexterm><primary>GetStrategyProb</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
T gbtMixedProfile&lt;T&gt;::GetStrategyProb(const gbtGameStrategy &amp;p_strategy) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetStrategyProb</function>
returns the probability the strategy is chosen.
A <errorname>gbtGameMismatchException</errorname> (mapped to
<errorname>RuntimeError</errorname> in Python) occurs if
<parameter>p_strategy</parameter> is not from the same game as the
profile.
</para>

</sect2>

<sect2 id="apiref.mixed.getstrategyvalue">
<title>GetStrategyValue</title>
<indexterm><primary>GetStrategyValue</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
T gbtMixedProfile&lt;T&gt;::GetStrategyValue(const gbtGameStrategy &amp;p_strategy) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetStrategyValue</function>
returns the expected
payoff to a player (who is in control of the strategy set including
<parameter>strategy</parameter>) of choosing
<parameter>strategy</parameter> when all players are following
the profile.
A <errorname>gbtGameMismatchException</errorname> (mapped to
<errorname>RuntimeError</errorname> in Python) occurs if
<parameter>p_strategy</parameter> is not from the same game as the
profile.
</para>

</sect2>

<sect2 id="apiref.mixed.setcentroid">
<title>SetCentroid</title>
<indexterm><primary>SetCentroid</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
void gbtMixedProfile&lt;T&gt;::SetCentroid(void)
</synopsis>
</para>
</formalpara>

<para>
<function>SetCentroid</function>
sets the profile to the centroid of the strategy space, in which each
player plays all of his strategies with equal probability.
</para>

</sect2>


<sect2 id="apiref.mixed.setstrategyprob">
<title>SetStrategyProb</title>
<indexterm><primary>SetStrategyProb</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
void gbtMixedProfile&lt;T&gt;::SetStrategyProb(const gbtGameStrategy &amp;p_strategy, const T &amp;p_prob)
</synopsis>
</para>
</formalpara>

<para>
<function>SetStrategyProb</function>
sets the probability that <parameter>p_strategy</parameter> is played
in the profile to <parameter>p_prob</parameter>.
A <errorname>gbtGameMismatchException</errorname> (mapped to
<errorname>RuntimeError</errorname> in Python) occurs if
<parameter>p_strategy</parameter> is not from the same game as the
profile.
</para>

</sect2>

<sect2 id="apiref.mixed.strategyprofilelength">
<title>StrategyProfileLength</title>
<indexterm><primary>StrategyProfileLength</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
int gbtMixedProfile&lt;T&gt;::StrategyProfileLength(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>StrategyProfileLength</function> returns the number of
probabilities that are specified in a strategy profile on the game.
This length is the total number of strategies for all players.
</para>

</sect2>

</sect1>
