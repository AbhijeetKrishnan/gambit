<chapter id="intro">
<title>Introduction</title>

<para>
Gambit is an Open Source Software project with the goal of providing
software tools and libraries for computational analysis of finite
extensive and normal form games.  All Gambit code is licensed under
the GNU General Public License.
</para>

<sect1 id="intro.history">
<title>History and acknowledgements</title> 
<para> 
The Gambit Project
is a project for the development of computer code for the analysis of
finite extensive and normal form games.  The software developed under
the project is distributed under the GNU General Public License.  The
Gambit Project has been funded in the past by National Science
Foundation grants SBR-9308637 and SBR-9617854 to the California
Institute of Technology and SBR-9308862 to the University of
Minnesota.</para>

      <para>
The Gambit Project was founded in the mid-1980s by Richard McKelvey.
The original implementation was a graphical interface written in
BASIC.  The code was ported to C around 1990 with the help of
Bruce Bell, and this version was distributed publicly as
version 0.13 in 1991 and 1992.
	</para>

      <para>
A major step in the evolution of Gambit took place with the awarding
of the NSF grants in 1994, with McKelvey and Andrew McLennan as
principal investigators.  The grants sponsored a complete rewrite
of Gambit in C++, with the code taking essentially the organization it
has today.  The graphical interface was made portable across
platforms through the use of the wxWidgets library
(<ulink url="http://www.wxwidgets.org">http://www.wxwidgets.org</ulink>),
and a scripting language,
the Gambit Command Language, was developed.  Version 0.94 of Gambit
was released in the late summer of 1994, and version 0.96 followed in 1999.
</para>

      <para>
Many other individuals have contributed to the project, by coding,
documenting, and testing, especially students at Caltech and the
University of Minnesota.  We wish to acknowledge their contributions
alphabetically here:
      <simplelist type="vert" columns="2">
	<member>Bruce Bell</member>
	<member>Anand Chelian</member>
	<member>Matthew Derer</member>
	<member>Nelson Escobar</member>
	<member>Ben Freeman</member>
	<member>Eugene Grayver</member>
	<member>Todd Kaplan</member>
	<member>Geoff Matters</member>
	<member>Brian Trotter</member>
	<member>Michael Vanier</member>
	<member>Roberto Weber</member>
	<member>Gary Wu</member>
      </simplelist>
      </para>

      <para>
The project especially wishes to thank Bernhard von Stengel,
of the London School of Economics,  
for help and advice on implementation of the sequence form
and for contributing his &quot;clique&quot; code for identification of
equilibrium components in two person games.
      </para>

      <para>
Version 0.97.0.1 of Gambit was released on September 1, 2002.  This
release featured
<itemizedlist>
<listitem>
<para>
A completely redesigned graphical user interface, built with the
wxWindows 2.3.2 cross-platform toolkit.  Previous releases of 
Gambit used the older 1.xx series of wxWindows.  The new version provides
substantially greater functionality and stability.  The interface
redesign should make many game creation tasks easier.
</para>
</listitem>
<listitem>
<para>
An implementation of a new algorithm for computing the logistic
quantal response equilibrium correspondence, as described in
<citation><xref linkend="Tur02"></citation>.  This algorithm is now
essentially unlimited in the size of lambda it can compute, and is
much faster than the previous implementation provided by Gambit.  This
algorithm is now recommended for computing one Nash equilibrium, especially
in games with more than two players.
</para>
</listitem>
<listitem>
<para>
A new function minimization implementation, derived from that available
in the GNU Scientific Library, is used in the Lyapunov function minimization
algorithm (<function>LiapSolve</function>).  It appears this implementation
is at least somewhat superior to that provided in previous versions.
</para>
</listitem>
<listitem>
<para>
The command language interface for Windows has been replaced with a new
one built with wxWindows.  Additionally, this windowed interface is also
available under *nix (called <application>wxgcl</application>).
</para>
</listitem>
</itemizedlist>
This stable series of releases currently stands at version 0.97.0.6.
</para>

<para>
The current development series of releases, numbered 0.97.1.x,
is focusing on the packaging of the Gambit code as a library.
The build system now creates a shared library of the Gambit code.
In addition to the C++ API, the Gambit code is made available through
a Python interface via the SWIG tool (see 
<ulink url="http://www.swig.org">http://www.swig.org</ulink>).
Creating interfaces in the other languages supported by SWIG is
a future possibility; please contact the Gambit developers if you
are interested in another of the languages supported by SWIG.
</para>

</sect1>

<sect1 id="intro.versioning">
<title>Gambit versions and version numbers</title>

<para>
Beginning with version 0.97, Gambit versions will be numbered in the form
<literal>0.x.y.z</literal>, where <literal>x</literal> is the 
&quot;major&quot; version number, <literal>y</literal> is the
&quot;minor&quot; version number, and <literal>z</literal> is the
&quot;micro&quot; (or &quot;patch&quot;) version number.  The initial
zero in the version number is there for historical reasons.  Gambit
follows the Linux kernel numbering style: releases deemed
&quot;stable&quot; will have even minor version numbers, and releases
deemed &quot;unstable&quot; will have odd minor version numbers.  So,
version 0.97.0.1 is the first release in the stable 0.97.0 series;
version 0.97.1.1 will be the first release in the unstable 0.97.1 series.
</para>

<para>
The goal is to release a new initial stable version in a series on
a schedule roughly corresponding to the academic year (at least, for those
on the semester system), for the benefit of those who like to use Gambit
for instructional purposes.  So, for example, version 0.97.0.1 was released
on September 1, 2002; this is a stable release, and any future releases of
0.97.0.z will correspond to bug fixes and patches.
</para>

<para>
In September 2003, the initial release of the &quot;development&quot; series
0.97.1.z appeared.  This series of releases is for testing and feedback
purposes, and may be unstable.
</para>

<para>
Which version of Gambit you should use depends on your needs.  For classroom
use, we'd certainly recommend the current stable version, since nothing
will frustrate your students faster than having the program crash on them
in the middle of their homework.  For research use, you may find either
of them appropriate; while the &quot;unstable&quot; series might be a bit
buggy, it may also have some features you'll find useful.  Finally, if
you're interested in contributing to Gambit, you'll definitely want to
work with the unstable series, since that represents the latest-and-greatest
on the bleeding edge of computational game theory development.
</para>

</sect1>


<sect1 id="intro.revisionhistory">
<title>Gambit release history</title>

<para>
This is an outline of the release history of Gambit (at least in the
&quot;postmodern&quot; era beginning with release 0.97.0.1).
<itemizedlist>
<listitem>
<para>Version 0.97.0.1, released September 1, 2002:  Initial public release,
with rebuilt graphical interface, new implementations of 
<function>QreSolve</function> and <function>LiapSolve</function>, and
a new windowed interface for the command language.
</para>
</listitem>
<listitem>
<para>Version 0.97.0.2, released September 26, 2002: general bug fixes.
</para>
</listitem>
<listitem>
<para>Version 0.97.0.3, released October 8, 2002: general bug fixes.
</para>
</listitem>
<listitem>
<para>Version 0.97.1.0, released September 10, 2003.  Initial release of
the &quot;development&quot; series 0.97.1.  Major features:
<itemizedlist>
<listitem>
<para>Substantial restructuring of internal game representation code.
</para>
</listitem>
<listitem>
<para>Initial implementation of Python API</para>
</listitem>
<listitem>
<para>Working towards bringing documentation, Python, and C++ APIs in
line with each other
</para>
</listitem>
<listitem>
<para>Restructuring of several GUI windows for more flexible display
</para>
</listitem>
<listitem>
<para>Implementation of Yamamoto's algorithm to compute one proper
Nash equilibrium in normal form games
</para>
</listitem>
<listitem>
<para>Improvements to constrained optimization in
<function>LiapSolve</function>, which now finds equilibria on the
boundaries of the space of mixed strategies much more readily.
</para>
</listitem>
</itemizedlist>
</para>
</listitem>
</itemizedlist>
</para>

</sect1>


<sect1 id="intro.getting">
<title>Getting and installing Gambit</title>
<para>
The development and testing of Gambit takes place primarily
on Linux using gcc.  We also provide makefiles for building Gambit on
Microsoft Windows using the free Borland C++ 5.5 compiler.
We have reports that Gambit builds just fine on MacOS X and FreeBSD.
We are interested in reports, or patches, for other operating systems,
and for other compilers.
</para>

<sect2 id="intro.getting.releases">
<title>Releases of Gambit</title>
<para>
The latest stable and unstable releases of Gambit can always
be found at the Gambit website at
<ulink url="http://econweb.tamu.edu/gambit">http://econweb.tamu.edu/gambit</ulink>.
Note that this document only details building the 0.97.1.z series
of Gambit; please see the 0.97.0 documentation for instructions on
building the stable version.
</para>
</sect2>

<sect2 id="intro.getting.building.linux">
<title>Building Gambit on Linux (and other Un*ces, MacOS X)</title>

<para>
This section details how to build the Gambit library and Python
API on Linux.  It should apply equally to all Un*ces, as well as
MacOS X.  It probably works under Cygwin or MinGW as well, but has
not been tested in those environments.
</para>

<sect3>
<title>Building the shared library</title>

<para>
Configuring and building Gambit uses the standard autotools approach.
Start by unpacking your source tarball (the examples will use version
0.97.1.2, change the version number as appropriate):
<programlisting>
tar zxvf gambit-0.97.1.2.tar.gz
</programlisting>
and change into the created directory
<programlisting>
cd gambit-0.97.1.2
</programlisting>
</para>

<para>
Configuration is done by the standard configure script.  For most
users, just doing
<programlisting>
./configure
</programlisting>
is good enough.  The most useful optional argument to the script
is the installation directory.  By default, this is
/usr/local; so, for example, the Gambit shared library will be placed
in /usr/local/lib/libgambit.so.
If you want to change this (for example, because you
don't have root access), pass the directory to install like so:
<programlisting>
./configure --prefix=/home/arbiter
</programlisting>
In this case, the shared library will wind up in 
/home/arbiter/lib/libgambit.so.
</para>

<para>
Gambit does not have any significant dependencies; any reasonably
current system should result in a successful configuration.
Build and install the shared library by issuing
<programlisting>
make 
make install
</programlisting>
Remember to su to root in between the commands if you're installing
to a system directory.
</para>

</sect3>

<sect3>
<title>Building the Python API (optional)</title>

<para>
If you want to use the Python API, you'll need to build it
separately.  (If you aren't going to be using this, you can
skip this section.)  The configuration script will take a stab
at finding your Python executable and include files.  If you
have a standard installation of Python, all you should need to do is
(starting from the main directory of the unpacked source tree)
<programlisting>
cd sources/python
make python
</programlisting>
Be sure to do this after the make install step above; the makefile
assumes the main Gambit shared library has been installed already.
</para>

<para>
If all goes well, you'll wind up with three files in the directory:
gambit.py, _gbt.so (the shared library for the wrapper), 
and gbt.py (the SWIG wrapper around the shared library). 
There is currently no installation feature in the makefile in
this directory, so you'll need to manually place these files where
you'd like them.  You can try a
<programlisting>
echo "import gambit" | python
</programlisting>
to test out the import.  Don't forget to set your LD_LIBRARY_PATH
environment variable if you installed the Gambit shared library
in some unusual place not in the linker's search path.
</para>

</sect3>

</sect2>

<sect2 id="intro.getting.building.borland">
<title>Building Gambit on Windows (using Borland C++)</title>

<para>
This section details how to build the Gambit library and Python
API on Windows using Borland C++ 5.5.  We are interested in
getting makefiles for other compilers as well; please contact
us if you're interested in using a different compiler.
</para>

<sect3>
<title>Building the library</title>

<para>
Open up a command prompt window, and change to the sources subdirectory
of the unpacked source tree.  For example, if you unpack the
source tarball into D:\, then you should change directory to
D:\gambit-0.97.1.2\sources.
</para>

<para>
In this directory, you need to create a file named MAKEDEF.BCC.
In this file, you need to specify where to find the Borland compiler.
A typical file might be
<programlisting>
BCCDIR = C:\BORLAND\BCC55
</programlisting>
if you installed the Borland compiler in C:\BORLAND\BCC55
(the standard location).  Alter this to fit your system.
</para>

<para>
After MAKEDEF.BCC is created, compile the library by issuing
<programlisting>
make -f borland
</programlisting>
The build creates a (large) library GAMBIT.LIB in the current
directory.
</para>

</sect3>


<sect3>
<title>Building the Python API (optional)</title>

<para>
If you want to use the Python API, you'll need to build it
separately.  (If you aren't going to be using this, you can
skip this section.)  Take a look at sources/python/borland.mak;
in particular, make sure that the PYTHONDIR points to the correct
location of your Python installation.
</para>

<para>
Prior to creating the Python extension, you will need to convert the
Python library to a format compatible with the Borland compiler.
Locate the directory in which the file <filename>Python23.lib</filename>
resides on your system.  In that directory, issue the command
<programlisting>
coff2omf python23.lib python23_bcpp.lib
</programlisting>
You'll only need to do this once (per Python installation).
</para>

<para>
From the python subdirectory of the Gambit source tree, issue
<programlisting>
make -f borland
</programlisting>
Be sure to do this after building the main library above; the makefile
assumes the main Gambit library has been built already.
</para>


<para>
If all goes well, you'll wind up with three files in the directory:
gambit.py, _gbt.so (the shared library for the wrapper), 
and gbt.py (the SWIG wrapper around the shared library). 
There is currently no installation feature in the makefile in
this directory, so you'll need to manually place these files where
you'd like them.  You can try running python and doing a
<programlisting>
import gambit
</programlisting>
to test out the import. 
</para>

</sect3>

</sect2>

</sect1>

<sect1 id="intro.contact">
<title>Contacting or contributing to the Gambit Project</title>
<para>
All email correspondence to the Gambit Project can be addressed to
<literal>gambit (at) econmail (dot) tamu (dot) edu</literal>.
We welcome all manner of
suggestions, including feature requests, documentation improvements,
bug reports, bug fixes, and interest in contributing new code to
the Gambit library.
</para>

<para>
If you encounter a bug in Gambit, we want to hear about it.
It will be most helpful if, in reporting your problem, you
include the following information:
<orderedlist>
<listitem>
<para>The version number</para>
</listitem>
<listitem>
<para>The platform(s) on which you experienced the problem</para>
</listitem>
<listitem>
<para>
As complete a description of the circumstances of the
problem as possible.  It is especially helpful if you can
provide a sequence of steps which reproduces the problem.</para>
</listitem>
</orderedlist>
</para>

<para>
Mailing lists also exist for getting information about Gambit.
See the Gambit website for details.
</para>

<para>
Should you need to contact the Gambit developers by physical mail,
send your correspondence to
<address>
The Gambit Project
c/o Prof. Theodore Turocy
Department of Economics
Texas A&amp;M University
<city>College Station</city>, <state>TX</state> <postcode>77843</postcode>
</address>
</para>

</sect1>


<sect1 id="intro.about">
<title>About this manual</title>

<para>
This manual is written with the assumption the reader is familiar with
the basic terms and concepts of game theory.  Where possible, Gambit
uses terminology standard in game theory; definitions of game-theoretic
concepts will only be introduced where confusion may occur.  
Game theory novices should supplement this manual with a standard text
on the topic; a list of some of these is given in the
<xref linkend="bib">.
</para>

<para>
Beginning with version 0.97, the Gambit manual is written using DocBook.
This manual can always be browsed online at the Gambit website, and can
be downloaded in HTML and PDF formats for local use.
</para>

<note>
<title>Changes from previous versions</title>
<para>
This manual, particularly the graphical interface sections, has been
substantially overhauled since the last release.  As a result, it is
still in flux.  Please report any areas in which the manual is unclear
or lacking to the Gambit address.
</para>
<para>
Throughout the manual, changes from previous versions are highlighted
in notes, such as this one. 
</para> 
</note>

</sect1>


 </chapter>
