<sect1 id="apiref.player">
<title>Players</title>

<para>
Players represent the strategic actors in a game.  Additionally,
in extensive form games, a player object is used to represent the
nonstrategic &quot;chance&quot; or &quot;nature&quot; player used to
indicate exogenous randomizations. 
</para>

<para>
Players in extensive form games are considered different objects than
those in normal form games, even when the normal form game is another
representation of an extensive form game (for example, if the normal
form is created by computing the reduced normal form of an extensive
form).  This limitation is intended to disappear in future versions.
</para>

<para>
Players in extensive form games are of type <type>gbtEfgPlayer</type>
in C++.  Players in normal form games are of
type <type>gbtNfgPlayer</type> in C++.
</para>


<sect2 id="apiref.player.getgame">
<title>GetGame</title>
<indexterm><primary>GetGame</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtEfgGame gbtEfgPlayer::GetGame(void) const
gbtNfgGame gbtNfgPlayer::GetGame(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetGame</function> 
returns the extensive or normal form game to which the player belongs.
</para>

</sect2>


<sect2 id="apiref.player.getinfoset">
<title>GetInfoset</title>
<indexterm><primary>GetInfoset</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtEfgInfoset gbtEfgPlayer::GetInfoset(int p_index) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetInfoset</function> returns the information set numbered
<parameter>p_index</parameter> from the list of information sets at
which the player has the decision.  Each player's information sets are
numbered sequentially beginning at one.  An exception is thrown if the
index is out of range.
</para>

</sect2>


<sect2 id="apiref.player.getlabel">
<title>GetLabel</title>
<indexterm><primary>GetLabel</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gText gbtEfgPlayer::GetLabel(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetLabel</function> returns the text label of the player.
The empty string is returned if the player object is null.
</para>

</sect2>


<sect2>
<title>GetStrategy</title>
<indexterm><primary>GetStrategy</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtNfgStrategy gbtNfgPlayer::GetStrategy(int p_index) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetStrategy</function> returns the strategy numbered
<parameter>p_index</parameter> from the list of strategies for the
player.  Each player's strategies are numbered sequentially beginning
at one.  An exception is thown if the index is out of range.
</para>

</sect2>

<sect2 id="apiref.player.ischance">
<title>IsChance</title>
<indexterm><primary>IsChance</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
bool gbtEfgPlayer::IsChance(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>IsChance</function> returns <literal>True</literal> (nonzero)
if the player is the chance player, and <literal>False</literal> (zero)
if the player is a personal player.
</para>

</sect2>


<sect2 id="apiref.player.isnull">
<title>IsNull</title>
<indexterm><primary>IsNull</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
bool gbtEfgPlayer::IsNull(void) const
bool gbtNfgPlayer::IsNull(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>IsNull</function>
returns <literal>True</literal> (nonzero) if the player object is
null, and <literal>False</literal> (zero) if it is null.
</para>

</sect2>

<sect2 id="apiref.player.newinfoset">
<title>NewInfoset</title>
<indexterm><primary>NewInfoset</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtEfgInfoset gbtEfgPlayer::NewInfoset(int p_actions)
</synopsis>
</para>
</formalpara>

<para>
<function>NewInfoset</function>
creates a new information set belonging to the player, with
<parameter>actions</parameter> actions. 
The newly created information set has no members.
It is an error if <parameter>actions</parameter> is not
positive.  The newly created information set is returned.
</para>

</sect2>


<sect2 id="apiref.player.numinfosets">
<title>NumInfosets</title>
<indexterm><primary>NumInfosets</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
int gbtEfgPlayer::NumInfosets(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>NumInfosets</function> returns how many information
sets are defined where the player has the decision.
</para>

</sect2>

<sect2 id="apiref.player.numstrategies">
<title>NumStrategies</title>
<indexterm><primary>NumStrategies</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
int gbtNfgPlayer::NumStrategies(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>NumStrategies</function> returns how many strategies the
player has in the game.
</para>

</sect2>


<sect2 id="apiref.player.setlabel">
<title>SetLabel</title>
<indexterm><primary>SetLabel</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
void gbtEfgPlayer::SetLabel(const gText &amp;p_label)
void gbtNfgPlayer::SetLabel(const gText &amp;p_label)
</synopsis>
</para>
</formalpara>

<para>
<function>SetLabel</function> sets the text label of the player.
</para>

</sect2>

</sect1>


