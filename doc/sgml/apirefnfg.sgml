<sect1 id="apiref.nfg">
<title>Normal form games</title>

<para>
</para>


<sect2 id="apiref.nfg.getcomment">
<title>GetComment</title>
<indexterm><primary>GetComment</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtText gbtGame::GetComment(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetComment</function> returns the comment associated with
the game.
</para>

</sect2>

<sect2 id="apiref.nfg.getlabel">
<title>GetLabel</title>
<indexterm><primary>GetLabel</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtText gbtGame::GetLabel(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetLabel</function>
returns the text label of the game.  
The empty string is returned if the game object is null.
</para>

</sect2>


<sect2 id="apiref.nfg.getplayer">
<title>GetPlayer</title>
<indexterm><primary>GetPlayer</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtGamePlayer gbtGame::GetPlayer(int p_index) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetPlayer</function> returns the player numbered
<parameter>p_index</parameter> from the list of players in the
game.  Each game's players are numbered sequentially beginning
at one.  An exception is thown if the index is out of range.
</para>

</sect2>


<sect2 id="apiref.nfg.isconstsum">
<title>IsConstSum</title>
<indexterm><primary>IsConstSum</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
bool gbtGame::IsConstSum(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>IsConstSum</function>
returns <literal>True</literal> (nonzero) when the normal form game 
is constant sum and <literal>False</literal> (zero) otherwise.
</para>
</sect2>


<sect2 id="apiref.nfg.newoutcome">
<title>NewOutcome</title>
<indexterm><primary>NewOutcome</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtGameOutcome gbtGame::NewOutcome(void)
</synopsis>
</para>
</formalpara>

<para>
<function>NewOutcome</function> defines a new outcome in the normal
form game.  The new outcome specifies payoffs of zero for all players.
Returns the newly created outcome.
</para>
</sect2>


<sect2 id="apiref.nfg.newsupport">
<title>NewSupport</title>
<indexterm><primary>NewSupport</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtNfgSupport gbtGame::NewSupport(void)
</synopsis>
</para>
</formalpara>

<para>
<function>NewSupport</function> creates a new support object 
on the normal form game.  The
support contains all strategies for all players.
</para>

</sect2>

<sect2 id="apiref.nfg.numplayers">
<title>NumPlayers</title>
<indexterm><primary>NumPlayers</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
int gbtGame::NumPlayers(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>NumPlayers</function> returns how many players are defined
on the game.
</para>

</sect2>


<sect2 id="apiref.nfg.readnfg">
<title>ReadNfg</title>
<indexterm><primary>ReadNfg</primary></indexterm>

<formalpara>
<title>C++ usage</title>
<para>
<synopsis>
gbtGame ::ReadNfg(gbtInput &amp;p_file)
</synopsis>
</para>
</formalpara>

<formalpara>
<title>Python usage</title>
<para>
<synopsis>
nfg = gambit.ReadNfg(filename)
</synopsis>
</para>
</formalpara>

<para>
<function>ReadNfg</function> 
reads a normal form game from the file <parameter>file</parameter>.
C++ users should pass a stream represented by a <type>gbtInput</type> object;
Python users should pass the filename of the file to be read.
An error occurs if the file cannot be opened, or if the file does
not contain a valid normal form savefile.
</para>

</sect2>


<sect2 id="apiref.nfg.setcomment">
<title>SetComment</title>
<indexterm><primary>SetComment</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
void gbtGame::SetComment(const gbtText &amp;p_comment)
</synopsis>
</para>
</formalpara>

<para>
<function>SetComment</function> sets the comment associated with the
game.
</para>

</sect2>


<sect2 id="apiref.nfg.setlabel">
<title>SetLabel</title>
<indexterm><primary>SetLabel</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
void gbtGame::SetLabel(const gbtText &amp;p_label)
</synopsis>
</para>
</formalpara>

<para>
<function>SetLabel</function> sets the text label of the game.
</para>

</sect2>

<sect2 id="apiref.nfg.writenfg">
<title>WriteNfg</title>
<indexterm><primary>WriteNfg</primary></indexterm>

<formalpara>
<title>C++ usage</title>
<para>
<synopsis>
void gbtGame::WriteNfg(gbtOutput &amp;p_file) const
</synopsis>
</para>
</formalpara>

<formalpara>
<title>Python usage</title>
<para>
<synopsis>
nfg.WriteNfg(filename)
</synopsis>
</para>
</formalpara>

<para>
<function>WriteNfg</function> writes a normal form game to an external
savefile.  In C++, this file is given as a <type>gbtOutput</type> stream
object; in Python, the filename to be written is passed.  
</para>

</sect2>


</sect1>
