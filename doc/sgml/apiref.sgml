<chapter id="apiref">
<title>Gambit API Reference Manual</title>

<para>
This chapter documents the interface to the libraries which represent
and manipulate games in Gambit.
</para>

<para>
Currently, this codebase can be used two ways in programs:
<itemizedlist>
<listitem>
<para>
The underlying C++ library can be called by other programs written
in C++, or which understand C++ calling conventions;
</para>
</listitem>
<listitem>
<para>
Using the new Python API, generated by SWIG.
</para>
</listitem>
</itemizedlist>
Other languages supported by SWIG are also possibilities for future
API availability; please contact the Gambit development team if you
have interest in using Gambit in conjunction with another language.
</para>

<para>
Note that beginning with version 0.97.1, the Gambit Command Language is
no longer included.  For the foreseeable future, Gambit will continue
to be able to read files generated by versions 0.97.0.3 and earlier;
therefore, you can still use command language scripts written for those
versions to build and manipulate games that will be accessible to the current
codebase.
</para>

<para>
The C++ interface for Gambit makes heavy use of the &quot;pimpl&quot;
idiom.  That is to say that most game-related objects are manipulated
through &quot;handle&quot; classes.  These act for the most part like
pointers, except they handle dereferencing null pointers by throwing a
<errorname>gbtGameNullException</errorname> exception, as well as handling
reference counting for internal game objects.  The convention is that the
abstract representation class name ends in &quot;Rep&quot;; for example,
the class defining a representation of a player is 
<classname>gbtGamePlayerRep</classname>, which is an abstract base
class; programs manipulating a game use the 
<classname>gbtGamePlayer</classname> handle class.
</para>

<para>
Gambit provides two implementations of representing games: an
extensive form game tree and a normal form table.  Other representations
can be created and used in Gambit by providing implementations of the
API listed here.
</para>


&apirefgame;

&apirefplayer;

&apirefoutcome;

&apirefnode;

&apirefinfoset;

&apirefaction;

&apirefstrategy;

&apirefnfgcontingency;

&apirefbehav;

&apirefmixed;

&apirefnash;

</chapter>