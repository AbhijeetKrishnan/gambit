<chapter id="apiref">
<title>Gambit API Reference Manual</title>

<para>
This chapter documents the interface to the libraries which represent
and manipulate games in Gambit.
</para>

<para>
Currently, this codebase can be used three ways in programs:
<itemizedlist>
<listitem>
<para>
The underlying C++ library can be called by other programs written
in C++, or which understand C++ calling conventions;
</para>
</listitem>
<listitem>
<para>
Many functions are now present in the Gambit
Python extension module.
(New for version 0.97.1, support still incomplete)
</para>
</listitem>
<listitem>
<para>
Using the Gambit Command Language.  (Beginning with 0.97.1, the
GCL is deprecated; users are encouraged to begin using Python for 
scripting applications of Gambit.) 
</para>
</listitem>
</itemizedlist>
Other languages supported by SWIG are also possibilities for future
API availability; please contact the Gambit development team if you
have interest in using Gambit in conjunction with another language.
</para>

<para>
Some parts of the C++ and Python APIs are in flux.  In these cases, only
the GCL function is listed in this documentation.  Consult the source
code or the Gambit development team for information about the C++ and/or
Python versions of such functions should you need them.   We are hoping
to continue to stabilize the API so it will be more possible to use
the Gambit code in other applications; however, there are still no
guarantees any particular feature will remain unchanged from version
to version.  Again, if you're using Gambit code directly, keep in touch
with the Gambit team directly or via the mailing lists for the latest
information and plans.
</para>

&apirefefg;

&apirefnfg;

&apirefplayer;

<sect1 id="apiref.outcome">
<title>Outcomes</title>

<para>
</para>

&bifdeleteoutcome;
&bifgame;
&bifname;
&bifpayoff;
&bifsetname;
&bifsetpayoff;

</sect1>

&apirefnode;

<sect1 id="apiref.infoset">
<title>Information sets</title>

<para>
</para>

&bifactions;
&bifchanceprob;
&bifdeleteaction;
&bifdeleteemptyinfoset;
&bifgame;
&bifinsertaction;
&bifmembers;
&bifmergeinfosets;
&bifname;
&bifplayer;
&bifreveal;
&bifsetchanceprobs;
&bifsetname;

</sect1>

<sect1 id="apiref.action">
<title>Actions</title>

<para>
</para>

&bifinfoset;
&bifisdominated;
&bifname;
&bifsetname;

</sect1>

<sect1 id="apiref.strategy">
<title>Strategies</title>

<para>
</para>

&bifgame;
&bifisdominated;
&bifname;
&bifsetname;

</sect1>

<sect1 id="apiref.efsupport">
<title>Supports on extensive forms</title>

<para>
</para>

&bifaddaction;
&bifname;
&bifremoveaction;
&bifsetname;
&bifundominated;

</sect1>

<sect1 id="apiref.efbasis">
<title>Bases on extensive forms</title>

<para>
</para>

&bifaddnode;
&bifisconsistent;
&bifname;
&bifremovenode;
&bifsetname;

</sect1>


<sect1 id="apiref.nfsupport">
<title>Supports on normal forms</title>

<para>
</para>

&bifaddstrategy;
&bifname;
&bifremovestrategy;
&bifsetname;
&bifundominated;

</sect1>


<sect1 id="apiref.nash">
<title>Computing Nash equilibria</title>

<para>
</para>

&bifenummixedsolve;
&bifenumpuresolve;
&bifliapsolve;
&biflpsolve;
&biflcpsolve;
&bifpolenumsolve;
&bifpossiblenashsupports;
&bifqresolve;
&bifsimpdivsolve;

</sect1>

<sect1 id="apiref.qre">
<title>Computing quantal response equilibria</title>

<para>
</para>

&bifqregridsolve;
&bifqrelambda;
&bifqresolve;

</sect1>

<sect1 id="apiref.behav">
<title>Behavior strategy profiles</title>

<para>
</para>

&bifactionprob;
&bifactionvalue;
&bifbehav;
&bifbelief;
&bifcreator;
&bifgame;
&bifinfosetprob;
&bifinfosetvalue;
&bifisnash;
&bifissequential;
&bifissubgameperfect;
&bifliapvalue;
&bifmixed;
&bifname;
&bifnodevalue;
&bifpayoff;
&bifrealizprob;
&bifregret;
&bifregrets;
&bifsetactionprob;
&bifsetactionprobs;
&bifsetname;

</sect1>


<sect1 id="apiref.mixed">
<title>Mixed strategy profiles</title>

<para>
</para>

&bifcreator;
&bifgame;
&bifisnash;
&bifisperfect;
&bifliapvalue;
&bifmixed;
&bifpayoff;
&bifsetname;
&bifsetstrategyprob;
&bifsetstrategyprobs;

</sect1>

<sect1>
<title>GCL-specific functions</title>

<para>
This section lists all the general-purpose functions which
are predefined in the command language. 
</para>

&bifaccuracy;
&bifactionnumber;
&bifand;
&bifargmax;
&bifassign;
&bifclear;
&bifconcat;
&bifcontains;
&bifdate;
&bifdivide;
&bifdot;
&bifelapsedtime;
&bifequal;
&bifexepath;
&bifexp;
&biffilter;
&bifflatten;
&biffloat;
&biffor;
&bifformat;
&bifgetenv;
&bifgetformat;
&bifgetlistformat;
&bifgetpath;
&bifgreater;
&bifgreaterequal;
&bifhelp;
&bifhelpvars;
&bifif;
&bifinclude;
&bifindex;
&bifinput;
&bifinteger;
&bifintegerdivide;
&bifinverse;
&bifisdefined;
&bifiseof;
&bifislist;
&bifisnull;
&bifiswatchrunning;
&biflength;
&bifless;
&biflessequal;
&biflist;
&biflistformat;
&biflog;
&bifmanual;
&bifminus;
&bifmodulus;
&bifnegate;
&bifnewfunction;
&bifnodenumber;
&bifnot;
&bifnotequal;
&bifnthchar;
&bifnthelement;
&bifnull;
&bifnumchars;
&bifnumelements;
&bifor;
&bifoutput;
&bifparentheses;
&bifplatform;
&bifplus;
&bifpower;
&bifprecision;
&bifprint;
&bifquit;
&bifrandomize;
&bifrational;
&bifread;
&bifreadtext;
&bifremove;
&bifsequenceform;
&bifsequenceformconstraints;
&bifsequenceformstrats;
&bifsetenv;
&bifshell;
&bifsort;
&bifstartwatch;
&bifstopwatch;
&bifstrategynumber;
&bifsupport;
&biftext;
&biftimes;
&biftranspose;
&bifunassign;
&bifunsetenv;
&bifversion;
&bifwhile;
&bifwrite;
&bifwritesequenceform;

</sect1>

<sect1 id="gcl.funccat">
<title>Categorical listing of functions</title>

&gclbifcat;

</sect1>


</chapter>