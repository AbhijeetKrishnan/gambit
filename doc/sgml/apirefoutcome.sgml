<sect1 id="apiref.outcome">
<title>Outcomes</title>

<para>
An outcome contains information about the utilities players assign to
events.  In extensive form games, outcomes may be attached to one or more
nodes.  Outcomes attached to nonterminal nodes are interpreted as 
incremental payoffs.  In normal form games, outcomes may be attached to
one or more contingencies.
</para>


<sect2 id="apiref.outcome.deleteoutcome">
<title>DeleteOutcome</title>
<indexterm><primary>DeleteOutcome</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
void gbtGameOutcome::DeleteOutcome(void)
</synopsis>
</para>
</formalpara>

<para>
<function>DeleteOutcome</function> removes the
outcome from its game.  All nodes (for
extensive forms) or contingencies (for normal forms) with the
specified outcome attached are reset to having no outcome attached.
</para>

</sect2>

<sect2 id="apiref.outcome.getid">
<title>GetId</title>
<indexterm><primary>GetId</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
int gbtGameOutcome::GetId(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetId</function> returns the ID number of the outcome.
This ID number is unique within the game. 
</para>

</sect2>

<sect2 id="apiref.outcome.getlabel">
<title>GetLabel</title>
<indexterm><primary>GetLabel</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
std::string gbtGameOutcome::GetLabel(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetLabel</function> returns the text label of the outcome.
</para>

</sect2>

<sect2 id="apiref.outcome.getpayoff">
<title>GetPayoff</title>
<indexterm><primary>GetPayoff</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtRational gbtGameOutcome::GetPayoff(gbtGamePlayer p_player) const
</synopsis>
</para>
</formalpara>


<para>
<function>GetPayoff</function> returns the value of the outcome to the
player <parameter>p_player</parameter>.  If the player is not from the
same game as the outcome, a
<errorname>gbtGameMismatchException</errorname> is thrown in C++,
which is mapped to a <errorname>RuntimeError</errorname> exception in
Python. 
</para>

</sect2>

<sect2 id="apiref.outcome.isdeleted">
<title>IsDeleted</title>
<indexterm><primary>IsDeleted</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
bool gbtGameOutcome::IsDeleted(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>IsDeleted</function> returns <literal>True</literal> (nonzero)
if the outcome has been deleted from its game.  Any attempts to operate
on a deleted object throw a <errorname>gbtGameDeletedException</errorname>
(mapped to <errorname>RuntimeError</errorname> in Python).
</para>

</sect2>

<sect2 id="apiref.outcome.setlabel">
<title>SetLabel</title>
<indexterm><primary>SetLabel</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
void gbtGameOutcome::SetLabel(const std::string &amp;p_label)
</synopsis>
</para>
</formalpara>

<para>
<function>SetLabel</function> sets the text label of the outcome.
</para>

</sect2>


<sect2 id="apiref.outcome.setpayoff">
<title>SetPayoff</title>
<indexterm><primary>SetPayoff</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
void gbtGameOutcome::SetPayoff(const gbtGamePlayer &amp;p_player,
                               const gbtRational &amp;p_payoff)
</synopsis>
</para>
</formalpara>

<para>
<function>SetPayoff</function> sets the payoff of the outcome for
<parameter>p_player</parameter> to <parameter>p_payoff</parameter>.
If the player is not from the same game as the outcome, a
<errorname>gbtGameMismatchException</errorname> is thrown in C++,
which is mapped to a <errorname>RuntimeError</errorname> exception in
Python.
</para>

</sect2>


</sect1>
