<sect1 id="apiref.behav">
<title>Behavior strategy profiles</title>

<para>
</para>

<sect2 id="apiref.behav.behaviorprofilelength">
<title>BehaviorProfileLength</title>
<indexterm><primary>BehaviorProfileLength</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
int gbtBehavProfile&lt;T&gt;::BehaviorProfileLength(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>BehaviorProfileLength</function>
returns the number of probabilities that are specified in the behavior profile.
the total number of actions at all information sets for all players.
</para>

</sect2>

<sect2 id="apiref.behav.getactionprob">
<title>GetActionProb</title>
<indexterm><primary>GetActionProb</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
T gbtBehavProfile&lt;T&gt;::GetActionProb(const gbtGameAction &amp;p_action) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetActionProb</function>
returns the probability that
<parameter>p_action</parameter> is chosen at its information set 
in the profile.  If
<parameter>p_action</parameter> is a chance action, the probability of
chance selecting the action is returned. 
A <errorname>gbtGameMismatchException</errorname> (mapped to
<errorname>RuntimeError</errorname> in Python) occurs if
<parameter>p_action</parameter> is not from the same game as the
profile.
</para>

</sect2>


<sect2 id="apiref.behav.getactionvalue">
<title>GetActionValue</title>
<indexterm><primary>GetActionValue</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
T gbtBehavProfile&lt;T&gt;::GetActionValue(const gbtGameAction &amp;p_action) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetActionValue</function> returns the expected payoff to a
player (who is in control of the information set including
<parameter>p_action</parameter>) of choosing
<parameter>p_action</parameter> when all players are following
the profile.
A <errorname>gbtGameMismatchException</errorname> (mapped to
<errorname>RuntimeError</errorname> in Python) occurs if
<parameter>p_action</parameter> is
not from the same game as the profile, or <parameter>p_action</parameter>
is controlled by the chance player.
</para>

</sect2>

<sect2 id="apiref.behav.getbeliefprob">
<title>GetBeliefProb</title>
<indexterm><primary>GetBeliefProb</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
T gbtBehavProfile&lt;T&gt;::GetBeliefProb(const gbtGameNode &amp;p_node) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetBeliefProb</function> returns the probability of being at
<parameter>p_node</parameter>, conditional on the player who chooses at
<parameter>p_node</parameter> knowing she is in
<parameter>p_node</parameter>'s information set, assuming all players
follow the profile.
A <errorname>gbtGameMismatchException</errorname> (mapped to
<errorname>RuntimeError</errorname> in Python) occurs if
<parameter>p_node</parameter> is not from the same game as the
profile.
</para>

</sect2>

<sect2 id="apiref.behav.getgame">
<title>GetGame</title>
<indexterm><primary>GetGame</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtEfgGame gbtBehavProfile&lt;T&gt;::GetGame(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetGame</function>
returns the game on which the profile is defined.
</para>

</sect2>


<sect2 id="apiref.behav.getinfosetprob">
<title>GetInfosetProb</title>
<indexterm><primary>GetInfosetProb</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
T gbtBehavProfile&lt;T&gt;::GetInfosetProb(const gbtGameInfoset &amp;p_prob) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetInfosetProb</function> returns the probability of reaching
<parameter>p_infoset</parameter> when all players follow
the profile.
A <errorname>gbtGameMismatchException</errorname> (mapped to
<errorname>RuntimeError</errorname> in Python) occurs if
<parameter>p_node</parameter> is not from the same game as the
profile.
</para>

</sect2>

<sect2 id="apiref.behav.getinfosetvalue">
<title>GetInfosetValue</title>
<indexterm><primary>GetInfosetValue</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
T gbtBehavProfile&lt;T&gt;::GetInfosetValue(const gbtGameInfoset &amp;p_infoset) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetInfosetValue</function>
returns the value to the controlling player of reaching 
<parameter>p_infoset</parameter>
when all players follow the profile.
A <errorname>gbtGameMismatchException</errorname> (mapped to
<errorname>RuntimeError</errorname> in Python) occurs if
<parameter>p_infoset</parameter> is
not from the same game as the profile.
</para>

</sect2>


<sect2 id="apiref.behav.getliapvalue">
<title>GetLiapValue</title>
<indexterm><primary>GetLiapValue</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
T gbtBehavProfile&lt;T&gt;::GetLiapValue(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetLiapValue</function> returns the Lyapunov function value for
<parameter>profile</parameter>.  This is a nonnegative value which is
zero exactly when the profile is a Nash equilibrium.
</para>

</sect2>

<sect2 id="apiref.behav.getnodevalue">
<title>GetNodeValue</title>
<indexterm><primary>GetNodeValue</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
T gbtBehavProfile&lt;T&gt;::GetNodeValue(const gbtGameNode &amp;p_node, const gbtGamePlayer &amp;p_player) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetNodeValue</function>
returns the expected payoff to <parameter>p_player</parameter> 
conditional on being at 
<parameter>p_node</parameter>, given
that all players are following the profile.
A <errorname>gbtGameMismatchException</errorname> (mapped to
<errorname>RuntimeError</errorname> in Python) occurs if
<parameter>p_node</parameter> and <parameter>p_player</parameter> are
not from the same game as the profile.
</para>

</sect2>

<sect2 id="apiref.behav.getpayoff">
<title>GetPayoff</title>
<indexterm><primary>GetPayoff</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
T gbtBehavProfile&lt;T&gt;::GetPayoff(const gbtGamePlayer &amp;p_player) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetPayoff</function> returns the expected payoff to 
<parameter>p_player</parameter>, when all players play according to
the profile.
A <errorname>gbtGameMismatchException</errorname> (mapped to
<errorname>RuntimeError</errorname> in Python) occurs if
<parameter>p_player</parameter> is not from the same game as the
profile.
</para>

</sect2>


<sect2 id="apiref.behav.getrealizprob">
<title>GetRealizProb</title>
<indexterm><primary>GetRealizProb</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
T gbtBehavProfile&lt;T&gt;::GetRealizProb(const gbtGameNode &amp;p_node) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetRealizProb</function>
returns the realization probability for <parameter>p_node</parameter>
given that all players
are following the profile.
A <errorname>gbtGameMismatchException</errorname> (mapped to
<errorname>RuntimeError</errorname> in Python) occurs if
<parameter>p_node</parameter> is not from the same game as the
profile.
</para>

</sect2>

<sect2 id="apiref.behav.setactionprob">
<title>SetActionProb</title>
<indexterm><primary>SetActionProb</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
void gbtBehavProfile&lt;T&gt;::SetActionProb(const gbtGameAction &amp;p_action, const T &amp;p_prob)
</synopsis>
</para>
</formalpara>

<para>
<function>SetActionProb</function> 
sets the probability <parameter>p_action</parameter> is played to
<parameter>p_prob</parameter>.
A <errorname>gbtGameMismatchException</errorname> (mapped to
<errorname>RuntimeError</errorname> in Python) occurs if
<parameter>p_action</parameter> is not from the same game as the
profile.
</para>

</sect2>

<sect2 id="apiref.behav.setcentroid">
<title>SetCentroid</title>
<indexterm><primary>SetCentroid</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
void gbtBehavProfile&lt;T&gt;::SetCentroid(void)
</synopsis>
</para>
</formalpara>

<para>
<function>SetCentroid</function>
sets the profile to the centroid of the strategy space, in which each
player plays all of his actions at each information set
with equal probability.
</para>

</sect2>

</sect1>
