<sect1 id="apiref.strategy">
<title>Strategies</title>

<para>
</para>

<sect2 id="apiref.strategy.getbehavior">
<title>GetBehavior</title>
<indexterm><primary>GetBehavior</primary></indexterm>

<formalpara>
<title>C++/Python usage</title
<para>
<synopsis>
gbtGameAction gbtGameStrategy::GetBehavior(const gbtGameInfoset &amp;p_infoset) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetBehavior</function> returns the action specified by
the strategy to be taken at <parameter>p_infoset</parameter>.
A <errorname>gbtGameMismatchException</errorname> (mapped to
<errorname>RuntimeError</errorname> in Python) occurs if 
<parameter>p_infoset</parameter> is not from the same game as the
strategy.
</para>

</sect2>

<sect2 id="apiref.strategy.getlabel">
<title>GetLabel</title>
<indexterm><primary>GetLabel</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
std::string gbtGameStrategy::GetLabel(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetLabel</function> 
returns the text label of the strategy.
</para>

</sect2>

<sect2 id="apiref.strategy.getplayer">
<title>GetPlayer</title>
<indexterm><primary>GetPlayer</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtGamePlayer gbtGameStrategy::GetPlayer(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetPlayer</function>
returns the player to whom the strategy belongs.
</para>

</sect2>

<sect2 id="apiref.strategy.setlabel">
<title>SetLabel</title>
<indexterm><primary>SetLabel</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
void gbtGameStrategy::SetLabel(const std::string &amp;p_label)
</synopsis>
</para>
</formalpara>

<para>
<function>SetLabel</function> sets the text label of the strategy.
</para>

</sect2>

</sect1>
