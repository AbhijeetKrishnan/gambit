<refentry id="bif.PolEnumSolve" xreflabel="PolEnumSolve">

<refmeta>
<indexterm>
<primary>PolEnumSolve</primary>
</indexterm>

<refentrytitle>PolEnumSolve</refentrytitle>
<refmiscinfo>Built-in function</refmiscinfo>
</refmeta>

<refnamediv>
<refname>PolEnumSolve</refname>
<refpurpose>
Computes Nash equilibria by enumerating solutions to polynomial equations
</refpurpose>
</refnamediv>

<refsynopsisdiv>
<synopsis>
PolEnumSolve[support->NFSUPPORT, {stopAfter->0}, {nEvals<->0}, 
             {time<->0.000000}, {traceFile<->(Output)}, {traceLevel->0}, 
             {singularSupps<->{  }}, {recurse->True}] =: LIST(MIXED)
PolEnumSolve[support->EFSUPPORT, {asNfg->False}, {stopAfter->0}, 
             {nEvals<->0}, {time<->0.000000}, {traceFile<->(Output)}, 
             {traceLevel->0}, {singularSupps<->{  }}, 
             {recurse->True}] =: LIST(BEHAV)
</synopsis>
</refsynopsisdiv>

<refsect1><title>Description</title>
<para>
<function>PolEnumSolve</function>
solves for all totally mixed Nash equilibrium on <parameter>support</parameter>.
If
<parameter>recurse</parameter> is <literal>True</literal>, the algorithm iterates through all
sub-supports of <parameter>support</parameter> to find the full support equilibria on
each sub-support.  Supports with singular solutions are reported in
<parameter>singularSupps</parameter>.  These supports are skipped by the algorithm
when determined to have singular solutions.
</para>

<para>
On each sub-support, the algorithm starts with a cube containing the
space of possible solutions and proceeds recursively.  The recursion
step begins with a subcube.  The subcube is discarded if the cube is
irrelevant in the sense of lying outside the space of possible
solutions.  Otherwise a modified Newton's method is used to search for
a solution in the subcube.  In the event that such a solution is
found, Taylor's series information at the solution is used to inquire
whether the solution is necessarily the unique solution in the
subcube.  If Newton's method leaves the subcube before finding a
solution, Taylor's series information at the center is used to inquire
whether we can be sure that the subcube contains no solutions.  If
neither of these procedures resolves the issue, the subcube is
subdivided and this recursion is performed on each smaller subcube.
</para>

<para>
The following optional parameters may be used to modify the behavior
of the algorithm:
<itemizedlist>
<listitem>
<para>
<parameter>stopAfter</parameter> By default, all equilibria are found.  This parameter may
be used to specify a maximum number of equilibria to be found.
</para>
</listitem>
<listitem>
<para>
<parameter>asNfg</parameter> Only applicable to the extensive form version.  By default,
this is <literal>False</literal>.  If it is specified to be <literal>True</literal>, the
extensive form game is solved by recursively converting its marked
subgames into normal form, solving, and reconstructing the solution as
a behavior profile.
</para>
</listitem>
<listitem>
<para>
<parameter>singularSupps</parameter>:
Returns a list of the supports which have singular solutions. 
</para>
</listitem>
<listitem>
<para>
<parameter>recurse</parameter>: Recurses to find totally mixed equilibria on all
subsupports of <parameter>support</parameter>.
</para>
</listitem>
</itemizedlist>
</para>
</refsect1>

<refsect1>
<title>See also</title>
<para>
<xref linkend="bif.PossibleNashSupports">.
</para>
</refsect1>

</refentry>


