<sect1 id="apiref.sequences">
<title>Sequences</title>

<para>
A <classname>gbtGameSequence</classname> represents a sequence of actions
for a player, in the von Stengel-Koller-Megiddo sequence form representation
of an extensive game.
</para>

<sect2 id="apiref.sequence.containsaction">
<title>ContainsAction</title>
<indexterm><primary>ContainsAction</primary></indexterm>

<formalpara>
<title>C++/Python usage</title
<para>
<synopsis>
bool gbtGameSequence::ContainsAction(const gbtGameAction &amp;action) const
</synopsis>
</para>
</formalpara>

<para>
<function>ContainsAction</function> returns <literal>True</literal>
(non-zero) if <parameter>action</parameter> is contained in the sequence.
A <errorname>gbtGameMismatchException</errorname> (mapped to
<errorname>RuntimeError</errorname> in Python) is thrown if 
<parameter>action</parameter> is not from the same game as the sequence.
</para>

</sect2>


<sect2 id="apiref.sequence.getaction">
<title>GetAction</title>
<indexterm><primary>GetAction</primary></indexterm>

<formalpara>
<title>C++/Python usage</title
<para>
<synopsis>
gbtGameAction gbtGameSequence::GetAction(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetAction</function> returns the action which uniquely
identifies this sequence.
</para>

</sect2>

<sect2 id="apiref.sequence.getlabel">
<title>GetLabel</title>
<indexterm><primary>GetLabel</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
std::string gbtGameSequence::GetLabel(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetLabel</function> 
returns the text label of the sequence.
</para>

</sect2>

<sect2 id="apiref.sequence.getparent">
<title>GetParent</title>
<indexterm><primary>GetParent</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtGameSequence gbtGameSequence::GetParent(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetParent</function>
returns the sequence which is the parent of the current sequence.
The parent is this sequence of actions, minus the action returned by
<function>GetAction</function>.
</para>

</sect2>

<sect2 id="apiref.sequence.getplayer">
<title>GetPlayer</title>
<indexterm><primary>GetPlayer</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
gbtGamePlayer gbtGameSequence::GetPlayer(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>GetPlayer</function>
returns the player to whom the sequence belongs.
</para>

</sect2>

<sect2 id="apiref.sequence.isdeleted">
<title>IsDeleted</title>
<indexterm><primary>IsDeleted</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
bool gbtGameSequence::IsDeleted(void) const
</synopsis>
</para>
</formalpara>

<para>
<function>IsDeleted</function> returns <literal>True</literal> (nonzero)
if the sequence has been deleted from its game.  Any attempts to operate
on a deleted object throw a <errorname>gbtGameDeletedException</errorname>
(mapped to <errorname>RuntimeError</errorname> in Python).
</para>

</sect2>

<sect2 id="apiref.sequence.setlabel">
<title>SetLabel</title>
<indexterm><primary>SetLabel</primary></indexterm>

<formalpara>
<title>C++/Python usage</title>
<para>
<synopsis>
void gbtGameSequence::SetLabel(const std::string &amp;p_label)
</synopsis>
</para>
</formalpara>

<para>
<function>SetLabel</function> sets the text label of the sequence.
</para>

</sect2>

</sect1>
