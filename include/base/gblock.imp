//
// FILE: gblock.imp -- Implementation of gBlock type
//
// $Id$
//

#include <stdlib.h>
#include "base/gblock.h"

template <class T> gBlock<T>::gBlock(unsigned int len) : gArray<T>(len)   { }

template <class T> gBlock<T>::gBlock(int lo, int hi) : gArray<T>(lo, hi)  { }

template <class T> gBlock<T>::gBlock(const gBlock<T> &b) : gArray<T>(b)  { }

template <class T> gBlock<T>::~gBlock()   { }

template <class T> gBlock<T> &gBlock<T>::operator=(const gBlock<T> &b)
{
  gArray<T>::operator=(b);
  return *this;
}

template <class T> bool gBlock<T>::operator==(const gBlock<T> &b) const
{
  if (mindex != b.mindex || maxdex != b.maxdex) return false;
  for (int i = mindex; i <= maxdex; i++) 
    if (data[i] != b.data[i]) return false;
  return true;
}

template <class T> bool gBlock<T>::operator!=(const gBlock<T> &b) const
{
  return !(*this == b);
}

template <class T> gBlock<T> gBlock<T>::operator+(const gBlock<T>& b) const
{
  gBlock<T> result(*this);
  for (int i = b.mindex; i <= b.maxdex; i++)
    result.Append(b[i]);
  return result;
}

template <class T> gBlock<T> gBlock<T>::operator+(const T &e) const
{
  gBlock<T> result(*this);
  result.Append(e);
  return result;
}

template <class T> gBlock<T> &gBlock<T>::operator+=(const T &e)
{
  Append(e);
  return *this;
}

template <class T> gBlock<T> &gBlock<T>::operator+=(const gBlock<T> &b)
{
  *this = *this + b;
  return *this;
}

template <class T> int gBlock<T>::InsertAt(const T &t, int n)
{
  if (mindex > n || n > maxdex + 1)   throw BadIndex(); 
    
  T *new_data = new T[++maxdex - mindex + 1] - mindex;

  int i;
  for (i = mindex; i <= n - 1; i++)       new_data[i] = data[i];
  new_data[i++] = t;
  for (; i <= maxdex; i++)       new_data[i] = data[i - 1];

  if (data)   delete [] (data + mindex);
  data = new_data;

  return n;
}

template <class T> int gBlock<T>::Append(const T &t)
{
  return InsertAt(t, maxdex + 1);
}

template <class T> int gBlock<T>::Insert(const T &t, int n)
{
  return InsertAt(t, (n < mindex) ? mindex : ((n > maxdex + 1) ? maxdex + 1 : n));
}

template <class T> T gBlock<T>::Remove(int n)
{
  if (n < mindex || n > maxdex)    throw BadIndex();

  T ret(data[n]);
  T *new_data = (--maxdex>=mindex) ? new T[maxdex-mindex+1] - mindex : 0;

  int i;
  for (i = mindex; i < n; i++)      new_data[i] = data[i];
  for (; i <= maxdex; i++)         new_data[i] = data[i + 1];

  delete [] (data + mindex);
  data = new_data;

  return ret;
}

template <class T> int gBlock<T>::Find(const T &t) const
{
  int i;
  for (i = mindex; i <= maxdex && data[i] != t; i++);
  return (i <= maxdex) ? i : 0;
} 

template <class T> int gBlock<T>::Contains(const T &t) const
{ return Find(t); }

template <class T> void gBlock<T>::Flush(void)
{ maxdex = mindex - 1;  if (data)  delete [] (data + mindex);  data = 0; }

//
// Uses the Dump function to output the gBlock.  Uses the << operator
// overload to use output streams, gout.
//
template <class T> gOutput &operator<<(gOutput &f, const gBlock<T> &b)
{
  b.Dump(f);   return f;
}


