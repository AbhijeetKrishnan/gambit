OVERVIEW
--------

This directory contains the files to build SWIG wrappers around the
Gambit library.  (See http://www.swig.org for details about the SWIG
tool.)  SWIG supports a variety of scripting languages.  Currently,
this directory contains only support for Python, but (hopefully)
modifying gambit.i to support other languages should not be difficult.

This directory is not built by the regular Gambit configuration/build
process, but rather requires manual build after some hand-configuration.
Users not interested in hacking the library or the gambit.i file should
check out the gambit-python distribution, which should be available from
the Gambit website.  That package contains the source code necessary to
build the Gambit extension for Python in a standard Python distutils
format.

BUILD INSTRUCTIONS FOR THE PYTHON DISTRIBUTION
----------------------------------------------

If you're reading this file because you've just unpacked a distribution
with the name gambit-python, then building the extension should be
simple:

python setup.py build
python setup.py install

Two notes:

(1) If the build step fails, complaining about not being able to find
Python.h, then you need to be sure to have the Python API headers
installed.  For Linux users, look for a package named something like
python2.4-dev in your distribution.

(2) Depending on your configuration, you may need to become the
superuser/administrator to complete the install step


BUILD INSTRUCTIONS FOR CVS USERS/HACKERS
----------------------------------------

If you're building this from CVS, it takes a little more care and feeding:

First step
----------

Before doing anything else, the libgambit sources are expected to be in
a subdirectory of this directory named 'libgambit'.  Un*x users can
accomplish this via a symbolic link:

ln -s ../libgambit libgambit

Alternately, just copy the contents of ../libgambit to the libgambit
subdirectory.

This only needs to be done one time -- unless you use the copy method, and
the contents of the "real" libgambit change.


Building the interface
----------------------

To build the interface, typically one would do

make                    # Builds the wrapper file from gambit.i
python setup.py build   # Compiles the extension module
python setup.py install # Installs the extension module

If the second step fails complaining about not being able to find
Python.h, make sure you have the Python API header files installed.
Look for a package named something like python2.4-dev (for many
Debian-based systems).

Depending on your setup, you may need to become the superuser to complete
the installation step.

Note that the build process compiles its own copy of the libgambit
classes.  Thus, when you build this, you're building the libgambit
that comes with this source distribution, not necessarily the one that
was installed by the usual ./configure; make; make install process.


Hacking the interface
---------------------

Adding support for another language should be pretty straightforward.
You will likely run into two sets of problems: typemaps and places
where %pythoncode is used.  I suggest modifying gambit.i and using
#ifdef SWIGPYTHON preprocessor directives where appropriate to conditionally
wrap for other languages.  Following this convention will also make it
easier to include your changes into the Gambit distribution if you so
desire.
