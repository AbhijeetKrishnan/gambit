/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "3"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif
/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif


/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif


/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);
    PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_Format(PyExc_RuntimeError, mesg);
  }
}



#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         PySwigClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, int min, int max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register int l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), min, l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), max, l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* PySwigClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} PySwigClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  PySwigClientData *data = (PySwigClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  PySwigClientData *data = desc ? (PySwigClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME PySwigClientData * 
PySwigClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    PySwigClientData *data = (PySwigClientData *)malloc(sizeof(PySwigClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
PySwigClientData_Del(PySwigClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== PySwigObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} PySwigObject;

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0) {
      PyObject *ofmt = PyString_FromString(fmt);
      if (ofmt) {
	res = PyString_Format(ofmt,args);
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
PySwigObject_repr(PySwigObject *v)
#else
PySwigObject_repr(PySwigObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *hex = PySwigObject_hex(v);    
  PyObject *repr = PyString_FromFormat("<Swig Object of type '%s' at 0x%s>", name, PyString_AsString(hex));
  Py_DECREF(hex);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next);
#else
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next, args);
#endif
    PyString_ConcatAndDel(&repr,nrep);
  }
  return repr;  
}

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
#ifdef METH_NOARGS
  PyObject *repr = PySwigObject_repr(v);
#else
  PyObject *repr = PySwigObject_repr(v, NULL);
#endif
  if (repr) {
    fputs(PyString_AsString(repr), fp);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type())
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
PySwigObject_dealloc(PyObject *v)
{
  PySwigObject *sobj = (PySwigObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own) {
    swig_type_info *ty = sobj->ty;
    PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporal object to carry the destroy operation */
	PyObject *tmp = PySwigObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } else {
      const char *name = SWIG_TypePrettyName(ty);
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", name);
#endif
    }
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
PySwigObject_append(PyObject* v, PyObject* next)
{
  PySwigObject *sobj = (PySwigObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!PySwigObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
PySwigObject_next(PyObject* v)
#else
PySwigObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_disown(PyObject *v)
#else
PySwigObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_acquire(PyObject *v)
#else
PySwigObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
PySwigObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      PySwigObject *sobj = (PySwigObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v);
	} else {
	  PySwigObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v,args);
	} else {
	  PySwigObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
PySwigObject_getattr(PySwigObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#elif PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject pyswigobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
	(char *)"PySwigObject",		    /* tp_name */
	sizeof(PySwigObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)PySwigObject_dealloc,   /* tp_dealloc */
	(printfunc)PySwigObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)PySwigObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
	(cmpfunc)PySwigObject_compare,	    /* tp_compare */ 
	(reprfunc)PySwigObject_repr,	    /* tp_repr */    
	&PySwigObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)PySwigObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigobject_type = tmp;
    pyswigobject_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own)
{
  PySwigObject *sobj = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->ty->name);
  } else {
    return PyString_FromString(v->ty->name);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

SWIGRUNTIME void
PySwigPacked_dealloc(PyObject *v)
{
  if (PySwigPacked_Check(v)) {
    PySwigPacked *sobj = (PySwigPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */	
	(char *)"PySwigPacked",		    /* tp_name */	
	sizeof(PySwigPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)PySwigPacked_dealloc,   /* tp_dealloc */	
	(printfunc)PySwigPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
	(cmpfunc)PySwigPacked_compare,	    /* tp_compare */ 	
	(reprfunc)PySwigPacked_repr,	    /* tp_repr */    	
	0,	                            /* tp_as_number */	
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */	
	(hashfunc)0,			    /* tp_hash */	
	(ternaryfunc)0,			    /* tp_call */	
	(reprfunc)PySwigPacked_str,	    /* tp_str */	
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigpacked_type = tmp;
    pyswigpacked_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  PySwigPacked *sobj = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (PySwigPacked_Check(obj)) {
    PySwigPacked *sobj = (PySwigPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
  return PyString_FromString("this");
}

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

SWIGRUNTIME PySwigObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (PySwigObject_Check(pyobj)) {
    return (PySwigObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !PySwigObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 PySwigObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (PySwigObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own) {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (PySwigObject *)sobj->next;
	  } else {
	    if (ptr) *ptr = SWIG_TypeCast(tc,vptr);
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own) *own = sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      PySwigObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc) {
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
      if (!desc) return SWIG_ERROR;
    }
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (!tc) return SWIG_ERROR;
      *ptr = SWIG_TypeCast(tc,vptr);
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = PySwigPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, whitout calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(PySwigClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    PySwigObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      PySwigObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = PySwigObject_New(ptr, type, own);
    PySwigClientData *clientdata = type ? (PySwigClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? PySwigPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      PySwigClientData *data = (PySwigClientData *) ty->clientdata;
      if (data) PySwigClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = PyString_FromString(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  PySwigObject *v = (PySwigObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BehavSupport swig_types[0]
#define SWIGTYPE_p_FILE swig_types[1]
#define SWIGTYPE_p_Gambit__ArrayTGambit__GameActionRep_p_t swig_types[2]
#define SWIGTYPE_p_Gambit__ArrayTGambit__GameInfosetRep_p_t swig_types[3]
#define SWIGTYPE_p_Gambit__ArrayTGambit__GameObjectPtrTGambit__GameStrategyRep_t_t swig_types[4]
#define SWIGTYPE_p_Gambit__ArrayTGambit__GamePlayerRep_p_t swig_types[5]
#define SWIGTYPE_p_Gambit__ArrayTGambit__GameStrategyRep_p_t swig_types[6]
#define SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t swig_types[7]
#define SWIGTYPE_p_Gambit__ArrayTdouble_t swig_types[8]
#define SWIGTYPE_p_Gambit__ArrayTint_t swig_types[9]
#define SWIGTYPE_p_Gambit__BehavIterator swig_types[10]
#define SWIGTYPE_p_Gambit__BehavSupport swig_types[11]
#define SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t swig_types[12]
#define SWIGTYPE_p_Gambit__DVectorTdouble_t swig_types[13]
#define SWIGTYPE_p_Gambit__DimensionException swig_types[14]
#define SWIGTYPE_p_Gambit__Exception swig_types[15]
#define SWIGTYPE_p_Gambit__GameActionRep swig_types[16]
#define SWIGTYPE_p_Gambit__GameInfosetRep swig_types[17]
#define SWIGTYPE_p_Gambit__GameNodeRep swig_types[18]
#define SWIGTYPE_p_Gambit__GameObject swig_types[19]
#define SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t swig_types[20]
#define SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t swig_types[21]
#define SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t swig_types[22]
#define SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t swig_types[23]
#define SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t swig_types[24]
#define SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t swig_types[25]
#define SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t swig_types[26]
#define SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t swig_types[27]
#define SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t swig_types[28]
#define SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t swig_types[29]
#define SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t swig_types[30]
#define SWIGTYPE_p_Gambit__GameOutcomeRep swig_types[31]
#define SWIGTYPE_p_Gambit__GamePlayerRep swig_types[32]
#define SWIGTYPE_p_Gambit__GameRep swig_types[33]
#define SWIGTYPE_p_Gambit__GameStrategyRep swig_types[34]
#define SWIGTYPE_p_Gambit__IndexException swig_types[35]
#define SWIGTYPE_p_Gambit__Integer swig_types[36]
#define SWIGTYPE_p_Gambit__IntegerRep swig_types[37]
#define SWIGTYPE_p_Gambit__InvalidFileException swig_types[38]
#define SWIGTYPE_p_Gambit__MismatchException swig_types[39]
#define SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t swig_types[40]
#define SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t swig_types[41]
#define SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t swig_types[42]
#define SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t swig_types[43]
#define SWIGTYPE_p_Gambit__NullException swig_types[44]
#define SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t swig_types[45]
#define SWIGTYPE_p_Gambit__PVectorTdouble_t swig_types[46]
#define SWIGTYPE_p_Gambit__PVectorTint_t swig_types[47]
#define SWIGTYPE_p_Gambit__PureBehavProfile swig_types[48]
#define SWIGTYPE_p_Gambit__PureStrategyProfile swig_types[49]
#define SWIGTYPE_p_Gambit__RangeException swig_types[50]
#define SWIGTYPE_p_Gambit__Rational swig_types[51]
#define SWIGTYPE_p_Gambit__StrategyIterator swig_types[52]
#define SWIGTYPE_p_Gambit__StrategySupport swig_types[53]
#define SWIGTYPE_p_Gambit__SupportStrategyIterator swig_types[54]
#define SWIGTYPE_p_Gambit__UndefinedException swig_types[55]
#define SWIGTYPE_p_Gambit__ValueException swig_types[56]
#define SWIGTYPE_p_Gambit__VectorTGambit__Rational_t swig_types[57]
#define SWIGTYPE_p_Gambit__VectorTdouble_t swig_types[58]
#define SWIGTYPE_p_Gambit__ZeroDivideException swig_types[59]
#define SWIGTYPE_p_ListTGambit__GameObjectPtrTGambit__GameInfosetRep_t_t swig_types[60]
#define SWIGTYPE_p_ListTGambit__GameObjectPtrTGambit__GameNodeRep_t_t swig_types[61]
#define SWIGTYPE_p_StrategySupport swig_types[62]
#define SWIGTYPE_p_bool swig_types[63]
#define SWIGTYPE_p_char swig_types[64]
#define SWIGTYPE_p_char_type swig_types[65]
#define SWIGTYPE_p_double swig_types[66]
#define SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void swig_types[67]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t swig_types[68]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t swig_types[69]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t swig_types[70]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t swig_types[71]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t swig_types[72]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t swig_types[73]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t swig_types[74]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t swig_types[75]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t swig_types[76]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t swig_types[77]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t swig_types[78]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t swig_types[79]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base swig_types[80]
#define SWIGTYPE_p_float swig_types[81]
#define SWIGTYPE_p_fmtflags swig_types[82]
#define SWIGTYPE_p_int swig_types[83]
#define SWIGTYPE_p_int_type swig_types[84]
#define SWIGTYPE_p_iostate swig_types[85]
#define SWIGTYPE_p_long swig_types[86]
#define SWIGTYPE_p_long_double swig_types[87]
#define SWIGTYPE_p_long_long swig_types[88]
#define SWIGTYPE_p_off_type swig_types[89]
#define SWIGTYPE_p_openmode swig_types[90]
#define SWIGTYPE_p_p_void swig_types[91]
#define SWIGTYPE_p_pos_type swig_types[92]
#define SWIGTYPE_p_seekdir swig_types[93]
#define SWIGTYPE_p_short swig_types[94]
#define SWIGTYPE_p_size_t swig_types[95]
#define SWIGTYPE_p_state_type swig_types[96]
#define SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t swig_types[97]
#define SWIGTYPE_p_std__basic_iostreamTchar_std__char_traitsTchar_t_t swig_types[98]
#define SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t swig_types[99]
#define SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type swig_types[100]
#define SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type swig_types[101]
#define SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type swig_types[102]
#define SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t swig_types[103]
#define SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type swig_types[104]
#define SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type swig_types[105]
#define SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t swig_types[106]
#define SWIGTYPE_p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t swig_types[107]
#define SWIGTYPE_p_std__ios_base swig_types[108]
#define SWIGTYPE_p_std__locale swig_types[109]
#define SWIGTYPE_p_traits_type swig_types[110]
#define SWIGTYPE_p_unsigned_int swig_types[111]
#define SWIGTYPE_p_unsigned_long swig_types[112]
#define SWIGTYPE_p_unsigned_long_long swig_types[113]
#define SWIGTYPE_p_unsigned_short swig_types[114]
#define SWIGTYPE_p_void swig_types[115]
static swig_type_info *swig_types[117];
static swig_module_info swig_module = {swig_types, 116, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _libgambit.so
  ------------------------------------------------*/
#define SWIG_init    init_libgambit

#define SWIG_name    "_libgambit"

#define SWIGVERSION 0x010331 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class PyObject_ptr {
  protected:
    PyObject *_obj;

  public:
    PyObject_ptr() :_obj(0)
    {
    }

    PyObject_ptr(const PyObject_ptr& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    PyObject_ptr(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) Py_XINCREF(_obj);
    }
    
    PyObject_ptr & operator=(const PyObject_ptr& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~PyObject_ptr() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct PyObject_var : PyObject_ptr {
    PyObject_var(PyObject* obj = 0) : PyObject_ptr(obj, false) { }
    
    PyObject_var & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <stdexcept>


  
#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  define SWIG_STD_NOASSIGN_STL
#  define SWIG_STD_NOINSERT_TEMPLATE_STL
#  define SWIG_STD_NOITERATOR_TRAITS_STL
#endif

#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif




#include <string>
#include <stdexcept>


#ifndef SWIG_STD_NOMODERN_STL
# include <ios>
#else
# include <streambuf.h>
#endif


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <limits.h>
#ifndef LLONG_MIN
# define LLONG_MIN	LONG_LONG_MIN
#endif
#ifndef LLONG_MAX
# define LLONG_MAX	LONG_LONG_MAX
#endif
#ifndef ULLONG_MAX
# define ULLONG_MAX	ULONG_LONG_MAX
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Py_False) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    long v = 0;
    int res = SWIG_AddCast(SWIG_AsVal_long (obj, val ? &v : 0));
    if (SWIG_IsOK(res) && val) *val = v ? true : false;
    return res;
  }
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
  if (PyString_Check(obj)) {
    char *cstr; Py_ssize_t len;
    PyString_AsStringAndSize(obj, &cstr, &len);
    if (cptr)  {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
	*cptr = PyString_AsString(obj);
      }
    }
    if (psize) *psize = len + 1;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


#include <iostream>


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

SWIGINTERN std::basic_ostream<char,std::char_traits<char > > &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(std::basic_ostream<char > *self,std::basic_string<char,std::char_traits<char >,std::allocator<char > > const &s){
	  *self << s;
	  return *self;
	}




#include "libgambit/libgambit.h"

using namespace Gambit;



SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}

SWIGINTERN std::string Gambit_Integer___str__(Gambit::Integer *self){ return ToText(*self); }
SWIGINTERN std::string Gambit_Integer___repr__(Gambit::Integer *self){ return ToText(*self); }
SWIGINTERN Gambit::Integer Gambit_Integer___radd__(Gambit::Integer const *self,long lhs){ return Integer(lhs) + *self; }
SWIGINTERN Gambit::Integer Gambit_Integer___rsub__(Gambit::Integer const *self,long lhs){ return Integer(lhs) - *self; }
SWIGINTERN Gambit::Integer Gambit_Integer___rmul__(Gambit::Integer const *self,long lhs){ return Integer(lhs) * *self; }
SWIGINTERN Gambit::Integer Gambit_Integer___rdiv__(Gambit::Integer const *self,long lhs){ return Integer(lhs) / *self; }
SWIGINTERN long Gambit_Integer___int__(Gambit::Integer *self){ return self->as_long(); }
SWIGINTERN std::string Gambit_Rational___str__(Gambit::Rational *self){ return ToText(*self); }
SWIGINTERN std::string Gambit_Rational___repr__(Gambit::Rational *self){ return ToText(*self); }
SWIGINTERN double Gambit_Rational_operator_Sa___SWIG_1(Gambit::Rational const *self,double y){ return (double) *self + y; }
SWIGINTERN double Gambit_Rational_operator_Ss___SWIG_1(Gambit::Rational const *self,double y){ return (double) *self - y; }
SWIGINTERN double Gambit_Rational_operator_Sm___SWIG_1(Gambit::Rational const *self,double y){ return (double) *self * y; }
SWIGINTERN double Gambit_Rational_operator_Sd___SWIG_1(Gambit::Rational const *self,double y){ return (double) *self / y; }
SWIGINTERN Gambit::Rational Gambit_Rational_operator_Sa__Se___SWIG_1(Gambit::Rational *self,double y){ return *self += Rational(y); }
SWIGINTERN Gambit::Rational Gambit_Rational_operator_Ss__Se___SWIG_1(Gambit::Rational *self,double y){ return *self -= Rational(y); }
SWIGINTERN Gambit::Rational Gambit_Rational_operator_Sm__Se___SWIG_1(Gambit::Rational *self,double y){ return *self *= Rational(y); }
SWIGINTERN Gambit::Rational Gambit_Rational_operator_Sd__Se___SWIG_1(Gambit::Rational *self,double y){ return *self /= Rational(y); }
SWIGINTERN Gambit::Rational Gambit_Rational___pos__(Gambit::Rational *self){ return *self; }
SWIGINTERN double Gambit_Rational___radd__(Gambit::Rational const *self,double lhs){ return lhs + (double) *self; }
SWIGINTERN double Gambit_Rational___rsub__(Gambit::Rational const *self,double lhs){ return lhs - (double) *self; }
SWIGINTERN double Gambit_Rational___rmul__(Gambit::Rational const *self,double lhs){ return lhs * (double) *self; }
SWIGINTERN double Gambit_Rational___rdiv__(Gambit::Rational const *self,double lhs){ return lhs / (double) *self; }
SWIGINTERN double Gambit_Rational___float__(Gambit::Rational *self){ return (double) *self; }
SWIGINTERN Gambit::Rational Gambit_Rational___abs__(Gambit::Rational *self){ return fabs(*self); }
SWIGINTERN Gambit::Rational Gambit_GameOutcomeRep_GetPayoff(Gambit::GameOutcomeRep const *self,int pl){ return self->GetPayoff<Rational>(pl); }
SWIGINTERN void Gambit_GameOutcomeRep_SetPayoff__SWIG_1(Gambit::GameOutcomeRep *self,int pl,Gambit::Rational const &payoff){ self->SetPayoff(pl, Gambit::ToText(payoff)); }
SWIGINTERN void Gambit_GameOutcomeRep_SetPayoff__SWIG_2(Gambit::GameOutcomeRep *self,int pl,double payoff){ self->SetPayoff(pl, Gambit::ToText(payoff)); }
SWIGINTERN Gambit::Rational Gambit_PureStrategyProfile_GetPayoff(Gambit::PureStrategyProfile const *self,Gambit::GamePlayer const &p_player){ return self->GetPayoff<Rational>(p_player); }
SWIGINTERN Gambit::Rational Gambit_PureStrategyProfile_GetStrategyValue(Gambit::PureStrategyProfile const *self,Gambit::GameStrategy const &p_strategy){ return self->GetStrategyValue<Rational>(p_strategy); }
SWIGINTERN std::string Gambit_GameRep_efg_file(Gambit::GameRep const *self){
    std::ostringstream s;
    self->WriteEfgFile(s);
    return s.str();
  }
SWIGINTERN std::string Gambit_GameRep_nfg_file(Gambit::GameRep const *self){
    std::ostringstream s;
    self->WriteNfgFile(s);
    return s.str();
  }
SWIGINTERN Gambit::MixedStrategyProfile<double > Gambit_GameRep_NewMixedStrategyDouble(Gambit::GameRep *self){ return MixedStrategyProfile<double>(StrategySupport(self)); }
SWIGINTERN Gambit::MixedStrategyProfile<Gambit::Rational > Gambit_GameRep_NewMixedStrategyRational(Gambit::GameRep *self){ return MixedStrategyProfile<Gambit::Rational>(StrategySupport(self)); }
SWIGINTERN Gambit::MixedBehavProfile<double > Gambit_GameRep_NewMixedBehavDouble(Gambit::GameRep *self){ return MixedBehavProfile<double>(BehavSupport(self)); }
SWIGINTERN Gambit::MixedBehavProfile<Gambit::Rational > Gambit_GameRep_NewMixedBehavRational(Gambit::GameRep *self){ return MixedBehavProfile<Gambit::Rational>(BehavSupport(self)); }

Gambit::Game ReadGameString(const std::string &p_string)
{
  std::istringstream s(p_string);
  return Gambit::ReadGame(s);
}

SWIGINTERN Gambit::MixedBehavProfile<double > Gambit_MixedStrategyProfile_Sl_double_Sg__behavior(Gambit::MixedStrategyProfile<double > const *self){ return MixedBehavProfile<double>(*self); }
SWIGINTERN int Gambit_MixedStrategyProfile_Sl_double_Sg____len__(Gambit::MixedStrategyProfile<double > const *self){ return self->MixedProfileLength(); }
SWIGINTERN double Gambit_MixedStrategyProfile_Sl_double_Sg____getitem____SWIG_0(Gambit::MixedStrategyProfile<double > const *self,int i){ return (*self)[i+1]; }
SWIGINTERN double Gambit_MixedStrategyProfile_Sl_double_Sg____getitem____SWIG_1(Gambit::MixedStrategyProfile<double > const *self,Gambit::GameStrategy const &s){ return (*self)[s]; }
SWIGINTERN void Gambit_MixedStrategyProfile_Sl_double_Sg____setitem____SWIG_0(Gambit::MixedStrategyProfile<double > *self,int i,double const &value){ (*self)[i+1] = value; }
SWIGINTERN void Gambit_MixedStrategyProfile_Sl_double_Sg____setitem____SWIG_1(Gambit::MixedStrategyProfile<double > *self,Gambit::GameStrategy const &s,double const &value){ (*self)[s] = value; }
SWIGINTERN Gambit::MixedBehavProfile<Gambit::Rational > Gambit_MixedStrategyProfile_Sl_Gambit_Rational_Sg__behavior(Gambit::MixedStrategyProfile<Gambit::Rational > const *self){ return MixedBehavProfile<Gambit::Rational>(*self); }
SWIGINTERN int Gambit_MixedStrategyProfile_Sl_Gambit_Rational_Sg____len__(Gambit::MixedStrategyProfile<Gambit::Rational > const *self){ return self->MixedProfileLength(); }
SWIGINTERN Gambit::Rational Gambit_MixedStrategyProfile_Sl_Gambit_Rational_Sg____getitem____SWIG_0(Gambit::MixedStrategyProfile<Gambit::Rational > const *self,int i){ return (*self)[i+1]; }
SWIGINTERN Gambit::Rational Gambit_MixedStrategyProfile_Sl_Gambit_Rational_Sg____getitem____SWIG_1(Gambit::MixedStrategyProfile<Gambit::Rational > const *self,Gambit::GameStrategy const &s){ return (*self)[s]; }
SWIGINTERN void Gambit_MixedStrategyProfile_Sl_Gambit_Rational_Sg____setitem____SWIG_0(Gambit::MixedStrategyProfile<Gambit::Rational > *self,int i,Gambit::Rational const &value){ (*self)[i+1] = value; }
SWIGINTERN void Gambit_MixedStrategyProfile_Sl_Gambit_Rational_Sg____setitem____SWIG_1(Gambit::MixedStrategyProfile<Gambit::Rational > *self,Gambit::GameStrategy const &s,Gambit::Rational const &value){ (*self)[s] = value; }
SWIGINTERN Gambit::MixedStrategyProfile<double > Gambit_StrategySupport_NewMixedStrategyDouble(Gambit::StrategySupport *self){ return MixedStrategyProfile<double>(*self); }
SWIGINTERN int Gambit_MixedBehavProfile_Sl_double_Sg____len__(Gambit::MixedBehavProfile<double > const *self){ return self->Length(); }
SWIGINTERN double Gambit_MixedBehavProfile_Sl_double_Sg____getitem____SWIG_0(Gambit::MixedBehavProfile<double > const *self,int i){ return (*self)[i+1]; }
SWIGINTERN double Gambit_MixedBehavProfile_Sl_double_Sg____getitem____SWIG_1(Gambit::MixedBehavProfile<double > const *self,Gambit::GameAction const &s){ return (*self)(s); }
SWIGINTERN void Gambit_MixedBehavProfile_Sl_double_Sg____setitem____SWIG_0(Gambit::MixedBehavProfile<double > *self,int i,double const &value){ (*self)[i+1] = value; }
SWIGINTERN void Gambit_MixedBehavProfile_Sl_double_Sg____setitem____SWIG_1(Gambit::MixedBehavProfile<double > *self,Gambit::GameAction const &s,double const &value){ (*self)(s) = value; }
SWIGINTERN int Gambit_MixedBehavProfile_Sl_Gambit_Rational_Sg____len__(Gambit::MixedBehavProfile<Gambit::Rational > const *self){ return self->Length(); }
SWIGINTERN Gambit::Rational Gambit_MixedBehavProfile_Sl_Gambit_Rational_Sg____getitem____SWIG_0(Gambit::MixedBehavProfile<Gambit::Rational > const *self,int i){ return (*self)[i+1]; }
SWIGINTERN Gambit::Rational Gambit_MixedBehavProfile_Sl_Gambit_Rational_Sg____getitem____SWIG_1(Gambit::MixedBehavProfile<Gambit::Rational > const *self,Gambit::GameAction const &s){ return (*self)(s); }
SWIGINTERN void Gambit_MixedBehavProfile_Sl_Gambit_Rational_Sg____setitem____SWIG_0(Gambit::MixedBehavProfile<Gambit::Rational > *self,int i,Gambit::Rational const &value){ (*self)[i+1] = value; }
SWIGINTERN void Gambit_MixedBehavProfile_Sl_Gambit_Rational_Sg____setitem____SWIG_1(Gambit::MixedBehavProfile<Gambit::Rational > *self,Gambit::GameAction const &s,Gambit::Rational const &value){ (*self)(s) = value; }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int ios_base_boolalpha_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_boolalpha is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_boolalpha_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::boolalpha));
  return pyobj;
}


SWIGINTERN int ios_base_dec_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_dec is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_dec_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::dec));
  return pyobj;
}


SWIGINTERN int ios_base_fixed_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_fixed is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_fixed_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::fixed));
  return pyobj;
}


SWIGINTERN int ios_base_hex_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_hex is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_hex_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::hex));
  return pyobj;
}


SWIGINTERN int ios_base_internal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_internal is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_internal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::internal));
  return pyobj;
}


SWIGINTERN int ios_base_left_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_left is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_left_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::left));
  return pyobj;
}


SWIGINTERN int ios_base_oct_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_oct is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_oct_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::oct));
  return pyobj;
}


SWIGINTERN int ios_base_right_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_right is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_right_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::right));
  return pyobj;
}


SWIGINTERN int ios_base_scientific_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_scientific is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_scientific_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::scientific));
  return pyobj;
}


SWIGINTERN int ios_base_showbase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showbase is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_showbase_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showbase));
  return pyobj;
}


SWIGINTERN int ios_base_showpoint_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpoint is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_showpoint_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpoint));
  return pyobj;
}


SWIGINTERN int ios_base_showpos_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpos is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_showpos_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpos));
  return pyobj;
}


SWIGINTERN int ios_base_skipws_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_skipws is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_skipws_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::skipws));
  return pyobj;
}


SWIGINTERN int ios_base_unitbuf_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_unitbuf is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_unitbuf_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::unitbuf));
  return pyobj;
}


SWIGINTERN int ios_base_uppercase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_uppercase is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_uppercase_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::uppercase));
  return pyobj;
}


SWIGINTERN int ios_base_adjustfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_adjustfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_adjustfield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::adjustfield));
  return pyobj;
}


SWIGINTERN int ios_base_basefield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_basefield is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_basefield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::basefield));
  return pyobj;
}


SWIGINTERN int ios_base_floatfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_floatfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_floatfield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::floatfield));
  return pyobj;
}


SWIGINTERN int ios_base_badbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_badbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_badbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::badbit));
  return pyobj;
}


SWIGINTERN int ios_base_eofbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_eofbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_eofbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::eofbit));
  return pyobj;
}


SWIGINTERN int ios_base_failbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_failbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_failbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::failbit));
  return pyobj;
}


SWIGINTERN int ios_base_goodbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_goodbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_goodbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::goodbit));
  return pyobj;
}


SWIGINTERN int ios_base_app_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_app is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_app_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::app));
  return pyobj;
}


SWIGINTERN int ios_base_ate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ate is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_ate_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::ate));
  return pyobj;
}


SWIGINTERN int ios_base_binary_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_binary is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_binary_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::binary));
  return pyobj;
}


SWIGINTERN int ios_base_ios_base_in_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ios_base_in is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_ios_base_in_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::in));
  return pyobj;
}


SWIGINTERN int ios_base_out_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_out is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_out_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::out));
  return pyobj;
}


SWIGINTERN int ios_base_trunc_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_trunc is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_trunc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::trunc));
  return pyobj;
}


SWIGINTERN int ios_base_beg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_beg is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_beg_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::beg));
  return pyobj;
}


SWIGINTERN int ios_base_cur_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_cur is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_cur_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::cur));
  return pyobj;
}


SWIGINTERN int ios_base_end_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_end is read-only.");
  return 1;
}


SWIGINTERN PyObject *ios_base_end_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::end));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_register_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::event_callback arg2 = (std::ios_base::event_callback) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ios_base_register_callback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_register_callback" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ios_base_register_callback" "', argument " "2"" of type '" "std::ios_base::event_callback""'"); 
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_register_callback" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->register_callback(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_flags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = (std::ios_base::fmtflags)((std::ios_base const *)arg1)->flags();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  std::ios_base::fmtflags result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_flags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_flags" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->flags(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_flags__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_flags__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_base_flags'.\n  Possible C/C++ prototypes are:\n    flags()\n    flags(std::ios_base::fmtflags)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  std::ios_base::fmtflags result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_setf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  std::ios_base::fmtflags arg3 ;
  std::ios_base::fmtflags result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ios_base_setf",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_setf" "', argument " "3"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg3 = static_cast< std::ios_base::fmtflags >(val3);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_setf__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ios_base_setf__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_base_setf'.\n  Possible C/C++ prototypes are:\n    setf(std::ios_base::fmtflags)\n    setf(std::ios_base::fmtflags,std::ios_base::fmtflags)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_unsetf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_unsetf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_unsetf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_unsetf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  (arg1)->unsetf(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_precision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->precision();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  std::streamsize result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_precision",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_precision" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->precision(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_precision__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_precision__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_base_precision'.\n  Possible C/C++ prototypes are:\n    precision()\n    precision(std::streamsize)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_width",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->width();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  std::streamsize result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_width",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_width" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->width(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_width__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_width__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_base_width'.\n  Possible C/C++ prototypes are:\n    width()\n    width(std::streamsize)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool result;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_sync_with_stdio",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ios_base_sync_with_stdio" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (bool)std::ios_base::sync_with_stdio(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":ios_base_sync_with_stdio")) SWIG_fail;
  result = (bool)std::ios_base::sync_with_stdio();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_ios_base_sync_with_stdio__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ios_base_sync_with_stdio__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_base_sync_with_stdio'.\n  Possible C/C++ prototypes are:\n    sync_with_stdio(bool)\n    std::ios_base::sync_with_stdio()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_imbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::locale *arg2 = 0 ;
  std::locale result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_imbue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_imbue" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_getloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::locale result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_getloc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_getloc" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->getloc();
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_xalloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":ios_base_xalloc")) SWIG_fail;
  result = (int)std::ios_base::xalloc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_iword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  long *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_iword",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_iword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_iword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    long &_result_ref = (arg1)->iword(arg2);
    result = (long *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_pword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void **result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_pword",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_pword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_pword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    void *&_result_ref = (arg1)->pword(arg2);
    result = (void **) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ios_base",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios_base" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ios_base_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__ios_base, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ios_rdstate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  std::ios_base::iostate result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_rdstate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdstate" "', argument " "1"" of type '" "std::basic_ios<char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios<char > const *)arg1)->rdstate();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_clear",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_clear" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->clear(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_clear__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_clear__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_clear'.\n  Possible C/C++ prototypes are:\n    clear(std::ios_base::iostate)\n    clear()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_setstate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_setstate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_setstate" "', argument " "1"" of type '" "std::basic_ios<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_setstate" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->setstate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_good(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_good",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_good" "', argument " "1"" of type '" "std::basic_ios<char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  result = (bool)((std::basic_ios<char > const *)arg1)->good();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_eof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_eof",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_eof" "', argument " "1"" of type '" "std::basic_ios<char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  result = (bool)((std::basic_ios<char > const *)arg1)->eof();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_fail",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fail" "', argument " "1"" of type '" "std::basic_ios<char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  result = (bool)((std::basic_ios<char > const *)arg1)->fail();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_bad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_bad",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_bad" "', argument " "1"" of type '" "std::basic_ios<char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  result = (bool)((std::basic_ios<char > const *)arg1)->bad();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  std::ios_base::iostate result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_exceptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios<char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios<char > const *)arg1)->exceptions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_exceptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_exceptions" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->exceptions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_exceptions__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_exceptions__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_exceptions'.\n  Possible C/C++ prototypes are:\n    exceptions()\n    exceptions(std::ios_base::iostate)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ios(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf<char,std::char_traits<char > > *arg1 = (std::basic_streambuf<char,std::char_traits<char > > *) 0 ;
  std::basic_ios<char > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ios",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ios" "', argument " "1"" of type '" "std::basic_streambuf<char,std::char_traits<char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf<char,std::char_traits<char > > * >(argp1);
  result = (std::basic_ios<char > *)new std::basic_ios<char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ios",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios" "', argument " "1"" of type '" "std::basic_ios<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_tie",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios<char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  result = (std::basic_ostream<char,std::char_traits<char > > *)((std::basic_ios<char > const *)arg1)->tie();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  std::basic_ostream<char,std::char_traits<char > > *arg2 = (std::basic_ostream<char,std::char_traits<char > > *) 0 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_tie",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_tie" "', argument " "2"" of type '" "std::basic_ostream<char,std::char_traits<char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ostream<char,std::char_traits<char > > * >(argp2);
  result = (std::basic_ostream<char,std::char_traits<char > > *)(arg1)->tie(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_tie__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_tie__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_tie'.\n  Possible C/C++ prototypes are:\n    tie()\n    tie(std::basic_ostream<char,std::char_traits<char > > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  std::basic_streambuf<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_rdbuf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios<char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  result = (std::basic_streambuf<char,std::char_traits<char > > *)((std::basic_ios<char > const *)arg1)->rdbuf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  std::basic_streambuf<char,std::char_traits<char > > *arg2 = (std::basic_streambuf<char,std::char_traits<char > > *) 0 ;
  std::basic_streambuf<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_rdbuf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_rdbuf" "', argument " "2"" of type '" "std::basic_streambuf<char,std::char_traits<char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf<char,std::char_traits<char > > * >(argp2);
  result = (std::basic_streambuf<char,std::char_traits<char > > *)(arg1)->rdbuf(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_rdbuf__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_rdbuf__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_rdbuf'.\n  Possible C/C++ prototypes are:\n    rdbuf()\n    rdbuf(std::basic_streambuf<char,std::char_traits<char > > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_copyfmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  std::basic_ios<char > *arg2 = 0 ;
  std::basic_ios<char > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_copyfmt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_copyfmt" "', argument " "1"" of type '" "std::basic_ios<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios<char > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios<char > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ios<char > * >(argp2);
  {
    std::basic_ios<char > &_result_ref = (arg1)->copyfmt((std::basic_ios<char > const &)*arg2);
    result = (std::basic_ios<char > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  std::basic_ios<char >::char_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_fill",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios<char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  result = (std::basic_ios<char >::char_type)((std::basic_ios<char > const *)arg1)->fill();
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  std::basic_ios<char >::char_type arg2 ;
  std::basic_ios<char >::char_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_fill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_fill" "', argument " "2"" of type '" "std::basic_ios<char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios<char >::char_type >(val2);
  result = (std::basic_ios<char >::char_type)(arg1)->fill(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_fill__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_fill__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_fill'.\n  Possible C/C++ prototypes are:\n    fill()\n    fill(std::basic_ios<char >::char_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_imbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  std::locale *arg2 = 0 ;
  std::locale result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_imbue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_imbue" "', argument " "1"" of type '" "std::basic_ios<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_narrow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  std::basic_ios<char >::char_type arg2 ;
  char arg3 ;
  char result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ios_narrow",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_narrow" "', argument " "1"" of type '" "std::basic_ios<char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_narrow" "', argument " "2"" of type '" "std::basic_ios<char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios<char >::char_type >(val2);
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_narrow" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  result = (char)((std::basic_ios<char > const *)arg1)->narrow(arg2,arg3);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_widen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios<char > *arg1 = (std::basic_ios<char > *) 0 ;
  char arg2 ;
  std::basic_ios<char >::char_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_widen",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_widen" "', argument " "1"" of type '" "std::basic_ios<char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios<char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_widen" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (std::basic_ios<char >::char_type)((std::basic_ios<char > const *)arg1)->widen(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ios_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_iosTchar_std__char_traitsTchar_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int cin_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cin is read-only.");
  return 1;
}


SWIGINTERN PyObject *cin_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cin), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t,  0 );
  return pyobj;
}


SWIGINTERN int cout_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cout is read-only.");
  return 1;
}


SWIGINTERN PyObject *cout_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cout), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,  0 );
  return pyobj;
}


SWIGINTERN int cerr_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cerr is read-only.");
  return 1;
}


SWIGINTERN PyObject *cerr_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cerr), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,  0 );
  return pyobj;
}


SWIGINTERN int clog_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable clog is read-only.");
  return 1;
}


SWIGINTERN PyObject *clog_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::clog), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_ostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf<char,std::char_traits<char > > *arg1 = (std::basic_streambuf<char,std::char_traits<char > > *) 0 ;
  std::basic_ostream<char > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ostream" "', argument " "1"" of type '" "std::basic_streambuf<char,std::char_traits<char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf<char,std::char_traits<char > > * >(argp1);
  result = (std::basic_ostream<char > *)new std::basic_ostream<char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ostream" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  std::basic_ostream<char,std::char_traits<char > > &(*arg2)(std::basic_ostream<char,std::char_traits<char > > &) = (std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) 0 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)""'"); 
    }
  }
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(*arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  std::basic_ios<char,std::char_traits<char > > &(*arg2)(std::basic_ios<char,std::char_traits<char > > &) = (std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) 0 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)""'"); 
    }
  }
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(*arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(*arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  long arg2 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  unsigned long arg2 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  bool arg2 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  short arg2 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  unsigned short arg2 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  int arg2 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  unsigned int arg2 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  long long arg2 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  unsigned long long arg2 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  double arg2 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  float arg2 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  long double arg2 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  void *arg2 = (void *) 0 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "void const *""'"); 
  }
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<((void const *)arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  std::basic_streambuf<char,std::char_traits<char > > *arg2 = (std::basic_streambuf<char,std::char_traits<char > > *) 0 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_streambuf<char,std::char_traits<char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf<char,std::char_traits<char > > * >(argp2);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  std::basic_string<char,std::char_traits<char >,std::allocator<char > > *arg2 = 0 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string<char,std::char_traits<char >,std::allocator<char > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string<char,std::char_traits<char >,std::allocator<char > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_string<char,std::char_traits<char >,std::allocator<char > > * >(argp2);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(arg1,(std::basic_string<char,std::char_traits<char >,std::allocator<char > > const &)*arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_14(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_16(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_17(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_15(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_13(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_5(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream_put(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  std::basic_ostream<char >::char_type arg2 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream_put",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_put" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream_put" "', argument " "2"" of type '" "std::basic_ostream<char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ostream<char >::char_type >(val2);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->put(arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  std::basic_ostream<char >::char_type *arg2 = (std::basic_ostream<char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ostream_write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_write" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_write" "', argument " "2"" of type '" "std::basic_ostream<char >::char_type const *""'");
  }
  arg2 = reinterpret_cast< std::basic_ostream<char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_write" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->write((std::basic_ostream<char >::char_type const *)arg2,arg3);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ostream_flush",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_flush" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->flush();
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_tellp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  std::basic_ostream<char >::pos_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ostream_tellp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_tellp" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  result = (arg1)->tellp();
  resultobj = SWIG_NewPointerObj((new std::basic_ostream<char >::pos_type(static_cast< const std::basic_ostream<char >::pos_type& >(result))), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  std::basic_ostream<char >::pos_type arg2 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream_seekp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream<char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream<char >::pos_type""'");
    } else {
      std::basic_ostream<char >::pos_type * temp = reinterpret_cast< std::basic_ostream<char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->seekp(arg2);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char > *arg1 = (std::basic_ostream<char > *) 0 ;
  std::basic_ostream<char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ostream_seekp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream<char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream<char >::off_type""'");
    } else {
      std::basic_ostream<char >::off_type * temp = reinterpret_cast< std::basic_ostream<char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_seekp" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = (arg1)->seekp(arg2,arg3);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream_seekp__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ostream_seekp__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ostream_seekp'.\n  Possible C/C++ prototypes are:\n    seekp(std::basic_ostream<char >::pos_type)\n    seekp(std::basic_ostream<char >::off_type,std::ios_base::seekdir)\n");
  return NULL;
}


SWIGINTERN PyObject *ostream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_istream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf<char,std::char_traits<char > > *arg1 = (std::basic_streambuf<char,std::char_traits<char > > *) 0 ;
  std::basic_istream<char > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_istream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_istream" "', argument " "1"" of type '" "std::basic_streambuf<char,std::char_traits<char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf<char,std::char_traits<char > > * >(argp1);
  result = (std::basic_istream<char > *)new std::basic_istream<char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_istream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_istream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_istream" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char,std::char_traits<char > > &(*arg2)(std::basic_istream<char,std::char_traits<char > > &) = (std::basic_istream<char,std::char_traits<char > > &(*)(std::basic_istream<char,std::char_traits<char > > &)) 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_istream<char,std::char_traits<char > > &(*)(std::basic_istream<char,std::char_traits<char > > &)""'"); 
    }
  }
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_ios<char,std::char_traits<char > > &(*arg2)(std::basic_ios<char,std::char_traits<char > > &) = (std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)""'"); 
    }
  }
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  bool *arg2 = 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  short *arg2 = 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  arg2 = reinterpret_cast< short * >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  unsigned short *arg2 = 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  arg2 = reinterpret_cast< unsigned short * >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  int *arg2 = 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  unsigned int *arg2 = 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  long *arg2 = 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  unsigned long *arg2 = 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long * >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  long long *arg2 = 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  arg2 = reinterpret_cast< long long * >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  unsigned long long *arg2 = 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long long * >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  float *arg2 = 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  double *arg2 = 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  long double *arg2 = 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  arg2 = reinterpret_cast< long double * >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  void **arg2 = 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_void,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_streambuf<char,std::char_traits<char > > *arg2 = (std::basic_streambuf<char,std::char_traits<char > > *) 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_streambuf<char,std::char_traits<char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf<char,std::char_traits<char > > * >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->operator >>(arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_short, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_short, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_13(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_14(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_void, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_15(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_16(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream_gcount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::streamsize result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_gcount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_gcount" "', argument " "1"" of type '" "std::basic_istream<char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  result = ((std::basic_istream<char > const *)arg1)->gcount();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char >::int_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  result = (std::basic_istream<char >::int_type)(arg1)->get();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char >::char_type *arg2 = 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream<char >::char_type &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream<char >::char_type &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_istream<char >::char_type * >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->get(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char >::char_type *arg2 = (std::basic_istream<char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream<char >::char_type arg4 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:istream_get",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream<char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream<char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_get" "', argument " "4"" of type '" "std::basic_istream<char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream<char >::char_type >(val4);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->get(arg2,arg3,arg4);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char >::char_type *arg2 = (std::basic_istream<char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_get",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream<char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream<char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->get(arg2,arg3);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_streambuf<char,std::char_traits<char > > *arg2 = 0 ;
  std::basic_istream<char >::char_type arg3 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_get",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf<char,std::char_traits<char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf<char,std::char_traits<char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf<char,std::char_traits<char > > * >(argp2);
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::basic_istream<char >::char_type""'");
  } 
  arg3 = static_cast< std::basic_istream<char >::char_type >(val3);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->get(*arg2,arg3);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_streambuf<char,std::char_traits<char > > *arg2 = 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf<char,std::char_traits<char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf<char,std::char_traits<char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf<char,std::char_traits<char > > * >(argp2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->get(*arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_get__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_get__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'istream_get'.\n  Possible C/C++ prototypes are:\n    get()\n    get(std::basic_istream<char >::char_type &)\n    get(std::basic_istream<char >::char_type *,std::streamsize,std::basic_istream<char >::char_type)\n    get(std::basic_istream<char >::char_type *,std::streamsize)\n    get(std::basic_streambuf<char,std::char_traits<char > > &,std::basic_istream<char >::char_type)\n    get(std::basic_streambuf<char,std::char_traits<char > > &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char >::char_type *arg2 = (std::basic_istream<char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream<char >::char_type arg4 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:istream_getline",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream<char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream<char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_getline" "', argument " "4"" of type '" "std::basic_istream<char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream<char >::char_type >(val4);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->getline(arg2,arg3,arg4);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char >::char_type *arg2 = (std::basic_istream<char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_getline",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream<char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream<char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->getline(arg2,arg3);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_getline__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_getline__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'istream_getline'.\n  Possible C/C++ prototypes are:\n    getline(std::basic_istream<char >::char_type *,std::streamsize,std::basic_istream<char >::char_type)\n    getline(std::basic_istream<char >::char_type *,std::streamsize)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::streamsize arg2 ;
  std::basic_istream<char >::int_type arg3 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_ignore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_ignore" "', argument " "3"" of type '" "std::basic_istream<char >::int_type""'");
  } 
  arg3 = static_cast< std::basic_istream<char >::int_type >(val3);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->ignore(arg2,arg3);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::streamsize arg2 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_ignore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->ignore(arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_ignore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->ignore();
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_ignore__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_istream_ignore__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_ignore__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'istream_ignore'.\n  Possible C/C++ prototypes are:\n    ignore(std::streamsize,std::basic_istream<char >::int_type)\n    ignore(std::streamsize)\n    ignore()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_peek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char >::int_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_peek",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_peek" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  result = (std::basic_istream<char >::int_type)(arg1)->peek();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char >::char_type *arg2 = (std::basic_istream<char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_read" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_read" "', argument " "2"" of type '" "std::basic_istream<char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream<char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_read" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->read(arg2,arg3);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_readsome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char >::char_type *arg2 = (std::basic_istream<char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::streamsize result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_readsome",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_readsome" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_readsome" "', argument " "2"" of type '" "std::basic_istream<char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream<char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_readsome" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (arg1)->readsome(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_putback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char >::char_type arg2 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_putback",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_putback" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_putback" "', argument " "2"" of type '" "std::basic_istream<char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_istream<char >::char_type >(val2);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->putback(arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_unget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_unget",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_unget" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->unget();
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_sync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_sync",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_sync" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  result = (int)(arg1)->sync();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_tellg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char >::pos_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_tellg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_tellg" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  result = (arg1)->tellg();
  resultobj = SWIG_NewPointerObj((new std::basic_istream<char >::pos_type(static_cast< const std::basic_istream<char >::pos_type& >(result))), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char >::pos_type arg2 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_seekg",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream<char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream<char >::pos_type""'");
    } else {
      std::basic_istream<char >::pos_type * temp = reinterpret_cast< std::basic_istream<char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->seekg(arg2);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream<char > *arg1 = (std::basic_istream<char > *) 0 ;
  std::basic_istream<char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  std::basic_istream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_seekg",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream<char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream<char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream<char >::off_type""'");
    } else {
      std::basic_istream<char >::off_type * temp = reinterpret_cast< std::basic_istream<char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_seekg" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  {
    std::basic_istream<char,std::char_traits<char > > &_result_ref = (arg1)->seekg(arg2,arg3);
    result = (std::basic_istream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_seekg__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_seekg__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'istream_seekg'.\n  Possible C/C++ prototypes are:\n    seekg(std::basic_istream<char >::pos_type)\n    seekg(std::basic_istream<char >::off_type,std::ios_base::seekdir)\n");
  return NULL;
}


SWIGINTERN PyObject *istream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_iostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf<char,std::char_traits<char > > *arg1 = (std::basic_streambuf<char,std::char_traits<char > > *) 0 ;
  std::basic_iostream<char > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_iostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_iostream" "', argument " "1"" of type '" "std::basic_streambuf<char,std::char_traits<char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf<char,std::char_traits<char > > * >(argp1);
  result = (std::basic_iostream<char > *)new std::basic_iostream<char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_iostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_iostream<char > *arg1 = (std::basic_iostream<char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_iostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_iostream" "', argument " "1"" of type '" "std::basic_iostream<char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_iostream<char > * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *iostream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_endl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char,std::char_traits<char > > *arg1 = 0 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:endl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream<char,std::char_traits<char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream<char,std::char_traits<char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char,std::char_traits<char > > * >(argp1);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = std::SWIGTEMPLATEDISAMBIGUATOR endl<char,std::char_traits<char > >(*arg1);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ends(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char,std::char_traits<char > > *arg1 = 0 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ends",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream<char,std::char_traits<char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream<char,std::char_traits<char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char,std::char_traits<char > > * >(argp1);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = std::SWIGTEMPLATEDISAMBIGUATOR ends<char,std::char_traits<char > >(*arg1);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream<char,std::char_traits<char > > *arg1 = 0 ;
  std::basic_ostream<char,std::char_traits<char > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:flush",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream<char,std::char_traits<char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream<char,std::char_traits<char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream<char,std::char_traits<char > > * >(argp1);
  {
    std::basic_ostream<char,std::char_traits<char > > &_result_ref = std::SWIGTEMPLATEDISAMBIGUATOR flush<char,std::char_traits<char > >(*arg1);
    result = (std::basic_ostream<char,std::char_traits<char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Epsilon__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Epsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Epsilon" "', argument " "1"" of type '" "double &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Epsilon" "', argument " "1"" of type '" "double &""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Epsilon" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      Gambit::Epsilon(*arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Epsilon__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Epsilon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Epsilon" "', argument " "1"" of type '" "double &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Epsilon" "', argument " "1"" of type '" "double &""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  {
    try {
      Gambit::Epsilon(*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ToText__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  int arg2 ;
  std::string result;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ToText",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ToText" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ToText" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = Gambit::ToText(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IndexException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IndexException *arg1 = (Gambit::IndexException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IndexException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IndexException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IndexException" "', argument " "1"" of type '" "Gambit::IndexException *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IndexException * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexException_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IndexException *arg1 = (Gambit::IndexException *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexException_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IndexException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexException_GetDescription" "', argument " "1"" of type '" "Gambit::IndexException const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IndexException * >(argp1);
  {
    try {
      result = ((Gambit::IndexException const *)arg1)->GetDescription();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IndexException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IndexException")) SWIG_fail;
  {
    try {
      result = (Gambit::IndexException *)new Gambit::IndexException();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__IndexException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IndexException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__IndexException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_RangeException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::RangeException *arg1 = (Gambit::RangeException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RangeException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__RangeException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RangeException" "', argument " "1"" of type '" "Gambit::RangeException *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::RangeException * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeException_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::RangeException *arg1 = (Gambit::RangeException *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RangeException_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__RangeException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeException_GetDescription" "', argument " "1"" of type '" "Gambit::RangeException const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::RangeException * >(argp1);
  {
    try {
      result = ((Gambit::RangeException const *)arg1)->GetDescription();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RangeException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::RangeException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RangeException")) SWIG_fail;
  {
    try {
      result = (Gambit::RangeException *)new Gambit::RangeException();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__RangeException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RangeException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__RangeException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_DimensionException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DimensionException *arg1 = (Gambit::DimensionException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DimensionException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DimensionException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DimensionException" "', argument " "1"" of type '" "Gambit::DimensionException *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DimensionException * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionException_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DimensionException *arg1 = (Gambit::DimensionException *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionException_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DimensionException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionException_GetDescription" "', argument " "1"" of type '" "Gambit::DimensionException const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DimensionException * >(argp1);
  {
    try {
      result = ((Gambit::DimensionException const *)arg1)->GetDescription();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DimensionException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DimensionException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DimensionException")) SWIG_fail;
  {
    try {
      result = (Gambit::DimensionException *)new Gambit::DimensionException();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__DimensionException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DimensionException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__DimensionException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ValueException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::ValueException *arg1 = (Gambit::ValueException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ValueException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ValueException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ValueException" "', argument " "1"" of type '" "Gambit::ValueException *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::ValueException * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ValueException_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::ValueException *arg1 = (Gambit::ValueException *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ValueException_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ValueException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ValueException_GetDescription" "', argument " "1"" of type '" "Gambit::ValueException const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::ValueException * >(argp1);
  {
    try {
      result = ((Gambit::ValueException const *)arg1)->GetDescription();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ValueException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::ValueException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ValueException")) SWIG_fail;
  {
    try {
      result = (Gambit::ValueException *)new Gambit::ValueException();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__ValueException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ValueException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__ValueException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ZeroDivideException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::ZeroDivideException *arg1 = (Gambit::ZeroDivideException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ZeroDivideException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ZeroDivideException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ZeroDivideException" "', argument " "1"" of type '" "Gambit::ZeroDivideException *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::ZeroDivideException * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ZeroDivideException_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::ZeroDivideException *arg1 = (Gambit::ZeroDivideException *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ZeroDivideException_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ZeroDivideException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZeroDivideException_GetDescription" "', argument " "1"" of type '" "Gambit::ZeroDivideException const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::ZeroDivideException * >(argp1);
  {
    try {
      result = ((Gambit::ZeroDivideException const *)arg1)->GetDescription();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ZeroDivideException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::ZeroDivideException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ZeroDivideException")) SWIG_fail;
  {
    try {
      result = (Gambit::ZeroDivideException *)new Gambit::ZeroDivideException();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__ZeroDivideException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ZeroDivideException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__ZeroDivideException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ArrayDouble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  Gambit::Array<double > *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ArrayDouble",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ArrayDouble" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (Gambit::Array<double > *)new Gambit::Array<double >(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__ArrayTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayDouble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ArrayDouble")) SWIG_fail;
  {
    try {
      result = (Gambit::Array<double > *)new Gambit::Array<double >();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__ArrayTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayDouble__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Gambit::Array<double > *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ArrayDouble",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ArrayDouble" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ArrayDouble" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Gambit::Array<double > *)new Gambit::Array<double >(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__ArrayTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayDouble__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<double > *arg1 = 0 ;
  Gambit::Array<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ArrayDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__ArrayTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArrayDouble" "', argument " "1"" of type '" "Gambit::Array<double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ArrayDouble" "', argument " "1"" of type '" "Gambit::Array<double > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<double > * >(argp1);
  {
    try {
      result = (Gambit::Array<double > *)new Gambit::Array<double >((Gambit::Array<double > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__ArrayTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayDouble(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ArrayDouble__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__ArrayTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ArrayDouble__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ArrayDouble__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ArrayDouble__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ArrayDouble'.\n  Possible C/C++ prototypes are:\n    Gambit::Array<(double)>(unsigned int)\n    Gambit::Array<(double)>()\n    Gambit::Array<(double)>(int,int)\n    Gambit::Array<(double)>(Gambit::Array<double > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ArrayDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<double > *arg1 = (Gambit::Array<double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ArrayDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ArrayDouble" "', argument " "1"" of type '" "Gambit::Array<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<double > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayDouble___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<double > *arg1 = (Gambit::Array<double > *) 0 ;
  Gambit::Array<double > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArrayDouble___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayDouble___eq__" "', argument " "1"" of type '" "Gambit::Array<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__ArrayTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArrayDouble___eq__" "', argument " "2"" of type '" "Gambit::Array<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArrayDouble___eq__" "', argument " "2"" of type '" "Gambit::Array<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Array<double > * >(argp2);
  {
    try {
      result = (bool)((Gambit::Array<double > const *)arg1)->operator ==((Gambit::Array<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayDouble___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<double > *arg1 = (Gambit::Array<double > *) 0 ;
  Gambit::Array<double > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArrayDouble___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayDouble___ne__" "', argument " "1"" of type '" "Gambit::Array<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__ArrayTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArrayDouble___ne__" "', argument " "2"" of type '" "Gambit::Array<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArrayDouble___ne__" "', argument " "2"" of type '" "Gambit::Array<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Array<double > * >(argp2);
  {
    try {
      result = (bool)((Gambit::Array<double > const *)arg1)->operator !=((Gambit::Array<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayDouble_Length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<double > *arg1 = (Gambit::Array<double > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ArrayDouble_Length",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayDouble_Length" "', argument " "1"" of type '" "Gambit::Array<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<double > * >(argp1);
  {
    try {
      result = (int)((Gambit::Array<double > const *)arg1)->Length();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayDouble_First(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<double > *arg1 = (Gambit::Array<double > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ArrayDouble_First",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayDouble_First" "', argument " "1"" of type '" "Gambit::Array<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<double > * >(argp1);
  {
    try {
      result = (int)((Gambit::Array<double > const *)arg1)->First();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayDouble_Last(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<double > *arg1 = (Gambit::Array<double > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ArrayDouble_Last",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayDouble_Last" "', argument " "1"" of type '" "Gambit::Array<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<double > * >(argp1);
  {
    try {
      result = (int)((Gambit::Array<double > const *)arg1)->Last();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayDouble_Find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<double > *arg1 = (Gambit::Array<double > *) 0 ;
  double *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArrayDouble_Find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayDouble_Find" "', argument " "1"" of type '" "Gambit::Array<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArrayDouble_Find" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (int)((Gambit::Array<double > const *)arg1)->Find((double const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayDouble_Contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<double > *arg1 = (Gambit::Array<double > *) 0 ;
  double *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArrayDouble_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayDouble_Contains" "', argument " "1"" of type '" "Gambit::Array<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArrayDouble_Contains" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (bool)((Gambit::Array<double > const *)arg1)->Contains((double const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayDouble_Append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<double > *arg1 = (Gambit::Array<double > *) 0 ;
  double *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArrayDouble_Append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayDouble_Append" "', argument " "1"" of type '" "Gambit::Array<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArrayDouble_Append" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = (int)(arg1)->Append((double const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayDouble_Insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<double > *arg1 = (Gambit::Array<double > *) 0 ;
  double *arg2 = 0 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ArrayDouble_Insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayDouble_Insert" "', argument " "1"" of type '" "Gambit::Array<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArrayDouble_Insert" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ArrayDouble_Insert" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)(arg1)->Insert((double const &)*arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayDouble_Remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<double > *arg1 = (Gambit::Array<double > *) 0 ;
  int arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArrayDouble_Remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayDouble_Remove" "', argument " "1"" of type '" "Gambit::Array<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArrayDouble_Remove" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)(arg1)->Remove(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ArrayDouble_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__ArrayTdouble_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ArrayRational__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  Gambit::Array<Gambit::Rational > *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ArrayRational",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ArrayRational" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (Gambit::Array<Gambit::Rational > *)new Gambit::Array<Gambit::Rational >(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayRational__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::Rational > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ArrayRational")) SWIG_fail;
  {
    try {
      result = (Gambit::Array<Gambit::Rational > *)new Gambit::Array<Gambit::Rational >();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayRational__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Gambit::Array<Gambit::Rational > *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ArrayRational",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ArrayRational" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ArrayRational" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Gambit::Array<Gambit::Rational > *)new Gambit::Array<Gambit::Rational >(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayRational__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::Rational > *arg1 = 0 ;
  Gambit::Array<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ArrayRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArrayRational" "', argument " "1"" of type '" "Gambit::Array<Gambit::Rational > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ArrayRational" "', argument " "1"" of type '" "Gambit::Array<Gambit::Rational > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::Rational > * >(argp1);
  {
    try {
      result = (Gambit::Array<Gambit::Rational > *)new Gambit::Array<Gambit::Rational >((Gambit::Array<Gambit::Rational > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayRational(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ArrayRational__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ArrayRational__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ArrayRational__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ArrayRational__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ArrayRational'.\n  Possible C/C++ prototypes are:\n    Gambit::Array<(Gambit::Rational)>(unsigned int)\n    Gambit::Array<(Gambit::Rational)>()\n    Gambit::Array<(Gambit::Rational)>(int,int)\n    Gambit::Array<(Gambit::Rational)>(Gambit::Array<Gambit::Rational > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ArrayRational(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::Rational > *arg1 = (Gambit::Array<Gambit::Rational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ArrayRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ArrayRational" "', argument " "1"" of type '" "Gambit::Array<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::Rational > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRational___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::Rational > *arg1 = (Gambit::Array<Gambit::Rational > *) 0 ;
  Gambit::Array<Gambit::Rational > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArrayRational___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRational___eq__" "', argument " "1"" of type '" "Gambit::Array<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArrayRational___eq__" "', argument " "2"" of type '" "Gambit::Array<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArrayRational___eq__" "', argument " "2"" of type '" "Gambit::Array<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Array<Gambit::Rational > * >(argp2);
  {
    try {
      result = (bool)((Gambit::Array<Gambit::Rational > const *)arg1)->operator ==((Gambit::Array<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRational___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::Rational > *arg1 = (Gambit::Array<Gambit::Rational > *) 0 ;
  Gambit::Array<Gambit::Rational > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArrayRational___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRational___ne__" "', argument " "1"" of type '" "Gambit::Array<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArrayRational___ne__" "', argument " "2"" of type '" "Gambit::Array<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArrayRational___ne__" "', argument " "2"" of type '" "Gambit::Array<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Array<Gambit::Rational > * >(argp2);
  {
    try {
      result = (bool)((Gambit::Array<Gambit::Rational > const *)arg1)->operator !=((Gambit::Array<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRational_Length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::Rational > *arg1 = (Gambit::Array<Gambit::Rational > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ArrayRational_Length",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRational_Length" "', argument " "1"" of type '" "Gambit::Array<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::Rational > * >(argp1);
  {
    try {
      result = (int)((Gambit::Array<Gambit::Rational > const *)arg1)->Length();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRational_First(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::Rational > *arg1 = (Gambit::Array<Gambit::Rational > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ArrayRational_First",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRational_First" "', argument " "1"" of type '" "Gambit::Array<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::Rational > * >(argp1);
  {
    try {
      result = (int)((Gambit::Array<Gambit::Rational > const *)arg1)->First();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRational_Last(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::Rational > *arg1 = (Gambit::Array<Gambit::Rational > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ArrayRational_Last",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRational_Last" "', argument " "1"" of type '" "Gambit::Array<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::Rational > * >(argp1);
  {
    try {
      result = (int)((Gambit::Array<Gambit::Rational > const *)arg1)->Last();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRational_Find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::Rational > *arg1 = (Gambit::Array<Gambit::Rational > *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArrayRational_Find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRational_Find" "', argument " "1"" of type '" "Gambit::Array<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArrayRational_Find" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArrayRational_Find" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      result = (int)((Gambit::Array<Gambit::Rational > const *)arg1)->Find((Gambit::Rational const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRational_Contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::Rational > *arg1 = (Gambit::Array<Gambit::Rational > *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArrayRational_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRational_Contains" "', argument " "1"" of type '" "Gambit::Array<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArrayRational_Contains" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArrayRational_Contains" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      result = (bool)((Gambit::Array<Gambit::Rational > const *)arg1)->Contains((Gambit::Rational const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRational_Append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::Rational > *arg1 = (Gambit::Array<Gambit::Rational > *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArrayRational_Append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRational_Append" "', argument " "1"" of type '" "Gambit::Array<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArrayRational_Append" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArrayRational_Append" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      result = (int)(arg1)->Append((Gambit::Rational const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRational_Insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::Rational > *arg1 = (Gambit::Array<Gambit::Rational > *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ArrayRational_Insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRational_Insert" "', argument " "1"" of type '" "Gambit::Array<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArrayRational_Insert" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArrayRational_Insert" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ArrayRational_Insert" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)(arg1)->Insert((Gambit::Rational const &)*arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRational_Remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::Rational > *arg1 = (Gambit::Array<Gambit::Rational > *) 0 ;
  int arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArrayRational_Remove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRational_Remove" "', argument " "1"" of type '" "Gambit::Array<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArrayRational_Remove" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->Remove(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ArrayRational_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__ArrayTGambit__Rational_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VectorDouble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  Gambit::Vector<double > *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorDouble",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorDouble" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (Gambit::Vector<double > *)new Gambit::Vector<double >(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDouble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorDouble")) SWIG_fail;
  {
    try {
      result = (Gambit::Vector<double > *)new Gambit::Vector<double >();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDouble__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Gambit::Vector<double > *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorDouble",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorDouble" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VectorDouble" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Gambit::Vector<double > *)new Gambit::Vector<double >(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDouble__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = 0 ;
  Gambit::Vector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__VectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorDouble" "', argument " "1"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorDouble" "', argument " "1"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  {
    try {
      result = (Gambit::Vector<double > *)new Gambit::Vector<double >((Gambit::Vector<double > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorDouble(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorDouble__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__VectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorDouble__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorDouble__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_VectorDouble__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_VectorDouble'.\n  Possible C/C++ prototypes are:\n    Gambit::Vector<(double)>(unsigned int)\n    Gambit::Vector<(double)>()\n    Gambit::Vector<(double)>(int,int)\n    Gambit::Vector<(double)>(Gambit::Vector<double > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorDouble" "', argument " "1"" of type '" "Gambit::Vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDouble___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  Gambit::Vector<double > *arg2 = 0 ;
  Gambit::Vector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDouble___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDouble___add__" "', argument " "1"" of type '" "Gambit::Vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDouble___add__" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDouble___add__" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<double > * >(argp2);
  {
    try {
      result = ((Gambit::Vector<double > const *)arg1)->operator +((Gambit::Vector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Vector<double >(static_cast< const Gambit::Vector<double >& >(result))), SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDouble___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  Gambit::Vector<double > *arg2 = 0 ;
  Gambit::Vector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDouble___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDouble___iadd__" "', argument " "1"" of type '" "Gambit::Vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDouble___iadd__" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDouble___iadd__" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<double > * >(argp2);
  {
    try {
      {
        Gambit::Vector<double > &_result_ref = (arg1)->operator +=((Gambit::Vector<double > const &)*arg2);
        result = (Gambit::Vector<double > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDouble___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  Gambit::Vector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDouble___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDouble___neg__" "', argument " "1"" of type '" "Gambit::Vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  {
    try {
      result = (arg1)->operator -();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Vector<double >(static_cast< const Gambit::Vector<double >& >(result))), SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDouble___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  Gambit::Vector<double > *arg2 = 0 ;
  Gambit::Vector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDouble___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDouble___sub__" "', argument " "1"" of type '" "Gambit::Vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDouble___sub__" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDouble___sub__" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<double > * >(argp2);
  {
    try {
      result = ((Gambit::Vector<double > const *)arg1)->operator -((Gambit::Vector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Vector<double >(static_cast< const Gambit::Vector<double >& >(result))), SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDouble___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  Gambit::Vector<double > *arg2 = 0 ;
  Gambit::Vector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDouble___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDouble___isub__" "', argument " "1"" of type '" "Gambit::Vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDouble___isub__" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDouble___isub__" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<double > * >(argp2);
  {
    try {
      {
        Gambit::Vector<double > &_result_ref = (arg1)->operator -=((Gambit::Vector<double > const &)*arg2);
        result = (Gambit::Vector<double > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDouble___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  double arg2 ;
  Gambit::Vector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDouble___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDouble___mul__" "', argument " "1"" of type '" "Gambit::Vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDouble___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((Gambit::Vector<double > const *)arg1)->operator *(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Vector<double >(static_cast< const Gambit::Vector<double >& >(result))), SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDouble___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  double arg2 ;
  Gambit::Vector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDouble___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDouble___imul__" "', argument " "1"" of type '" "Gambit::Vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDouble___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        Gambit::Vector<double > &_result_ref = (arg1)->operator *=(arg2);
        result = (Gambit::Vector<double > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDouble___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  Gambit::Vector<double > *arg2 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDouble___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDouble___mul__" "', argument " "1"" of type '" "Gambit::Vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDouble___mul__" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDouble___mul__" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<double > * >(argp2);
  {
    try {
      result = (double)((Gambit::Vector<double > const *)arg1)->operator *((Gambit::Vector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDouble___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__VectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__VectorTdouble_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorDouble___mul____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__VectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDouble___mul____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_VectorDouble___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  double arg2 ;
  Gambit::Vector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDouble___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDouble___div__" "', argument " "1"" of type '" "Gambit::Vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDouble___div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((Gambit::Vector<double > const *)arg1)->operator /(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Vector<double >(static_cast< const Gambit::Vector<double >& >(result))), SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDouble___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  Gambit::Vector<double > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDouble___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDouble___eq__" "', argument " "1"" of type '" "Gambit::Vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDouble___eq__" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDouble___eq__" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<double > * >(argp2);
  {
    try {
      result = (bool)((Gambit::Vector<double > const *)arg1)->operator ==((Gambit::Vector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDouble___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  Gambit::Vector<double > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDouble___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDouble___ne__" "', argument " "1"" of type '" "Gambit::Vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDouble___ne__" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDouble___ne__" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<double > * >(argp2);
  {
    try {
      result = (bool)((Gambit::Vector<double > const *)arg1)->operator !=((Gambit::Vector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDouble___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  double arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDouble___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDouble___eq__" "', argument " "1"" of type '" "Gambit::Vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDouble___eq__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)((Gambit::Vector<double > const *)arg1)->operator ==(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDouble___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__VectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__VectorTdouble_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorDouble___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__VectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDouble___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_VectorDouble___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  double arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDouble___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDouble___ne__" "', argument " "1"" of type '" "Gambit::Vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDouble___ne__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)((Gambit::Vector<double > const *)arg1)->operator !=(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDouble___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__VectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__VectorTdouble_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorDouble___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__VectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDouble___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_VectorDouble_NormSquared(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorDouble_NormSquared",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDouble_NormSquared" "', argument " "1"" of type '" "Gambit::Vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  {
    try {
      result = (double)((Gambit::Vector<double > const *)arg1)->NormSquared();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorDouble_Check(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = (Gambit::Vector<double > *) 0 ;
  Gambit::Vector<double > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorDouble_Check",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDouble_Check" "', argument " "1"" of type '" "Gambit::Vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorDouble_Check" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorDouble_Check" "', argument " "2"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<double > * >(argp2);
  {
    try {
      result = (bool)((Gambit::Vector<double > const *)arg1)->Check((Gambit::Vector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorDouble_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VectorRational__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  Gambit::Vector<Gambit::Rational > *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorRational",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorRational" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (Gambit::Vector<Gambit::Rational > *)new Gambit::Vector<Gambit::Rational >(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorRational__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorRational")) SWIG_fail;
  {
    try {
      result = (Gambit::Vector<Gambit::Rational > *)new Gambit::Vector<Gambit::Rational >();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorRational__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Gambit::Vector<Gambit::Rational > *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorRational",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorRational" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VectorRational" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Gambit::Vector<Gambit::Rational > *)new Gambit::Vector<Gambit::Rational >(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorRational__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = 0 ;
  Gambit::Vector<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorRational" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorRational" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  {
    try {
      result = (Gambit::Vector<Gambit::Rational > *)new Gambit::Vector<Gambit::Rational >((Gambit::Vector<Gambit::Rational > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorRational(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorRational__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorRational__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorRational__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_VectorRational__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_VectorRational'.\n  Possible C/C++ prototypes are:\n    Gambit::Vector<(Gambit::Rational)>(unsigned int)\n    Gambit::Vector<(Gambit::Rational)>()\n    Gambit::Vector<(Gambit::Rational)>(int,int)\n    Gambit::Vector<(Gambit::Rational)>(Gambit::Vector<Gambit::Rational > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorRational(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorRational" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRational___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  Gambit::Vector<Gambit::Rational > *arg2 = 0 ;
  Gambit::Vector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorRational___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRational___add__" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRational___add__" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRational___add__" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp2);
  {
    try {
      result = ((Gambit::Vector<Gambit::Rational > const *)arg1)->operator +((Gambit::Vector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Vector<Gambit::Rational >(static_cast< const Gambit::Vector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRational___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  Gambit::Vector<Gambit::Rational > *arg2 = 0 ;
  Gambit::Vector<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorRational___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRational___iadd__" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRational___iadd__" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRational___iadd__" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp2);
  {
    try {
      {
        Gambit::Vector<Gambit::Rational > &_result_ref = (arg1)->operator +=((Gambit::Vector<Gambit::Rational > const &)*arg2);
        result = (Gambit::Vector<Gambit::Rational > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRational___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  Gambit::Vector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorRational___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRational___neg__" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  {
    try {
      result = (arg1)->operator -();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Vector<Gambit::Rational >(static_cast< const Gambit::Vector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRational___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  Gambit::Vector<Gambit::Rational > *arg2 = 0 ;
  Gambit::Vector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorRational___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRational___sub__" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRational___sub__" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRational___sub__" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp2);
  {
    try {
      result = ((Gambit::Vector<Gambit::Rational > const *)arg1)->operator -((Gambit::Vector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Vector<Gambit::Rational >(static_cast< const Gambit::Vector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRational___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  Gambit::Vector<Gambit::Rational > *arg2 = 0 ;
  Gambit::Vector<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorRational___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRational___isub__" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRational___isub__" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRational___isub__" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp2);
  {
    try {
      {
        Gambit::Vector<Gambit::Rational > &_result_ref = (arg1)->operator -=((Gambit::Vector<Gambit::Rational > const &)*arg2);
        result = (Gambit::Vector<Gambit::Rational > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRational___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  Gambit::Rational arg2 ;
  Gambit::Vector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorRational___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRational___mul__" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRational___mul__" "', argument " "2"" of type '" "Gambit::Rational""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRational___mul__" "', argument " "2"" of type '" "Gambit::Rational""'");
    } else {
      Gambit::Rational * temp = reinterpret_cast< Gambit::Rational * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = ((Gambit::Vector<Gambit::Rational > const *)arg1)->operator *(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Vector<Gambit::Rational >(static_cast< const Gambit::Vector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRational___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  Gambit::Rational arg2 ;
  Gambit::Vector<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorRational___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRational___imul__" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRational___imul__" "', argument " "2"" of type '" "Gambit::Rational""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRational___imul__" "', argument " "2"" of type '" "Gambit::Rational""'");
    } else {
      Gambit::Rational * temp = reinterpret_cast< Gambit::Rational * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        Gambit::Vector<Gambit::Rational > &_result_ref = (arg1)->operator *=(arg2);
        result = (Gambit::Vector<Gambit::Rational > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRational___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  Gambit::Vector<Gambit::Rational > *arg2 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorRational___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRational___mul__" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRational___mul__" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRational___mul__" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp2);
  {
    try {
      result = ((Gambit::Vector<Gambit::Rational > const *)arg1)->operator *((Gambit::Vector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRational___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Rational, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorRational___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorRational___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_VectorRational___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  Gambit::Rational arg2 ;
  Gambit::Vector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorRational___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRational___div__" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRational___div__" "', argument " "2"" of type '" "Gambit::Rational""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRational___div__" "', argument " "2"" of type '" "Gambit::Rational""'");
    } else {
      Gambit::Rational * temp = reinterpret_cast< Gambit::Rational * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = ((Gambit::Vector<Gambit::Rational > const *)arg1)->operator /(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Vector<Gambit::Rational >(static_cast< const Gambit::Vector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRational___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  Gambit::Vector<Gambit::Rational > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorRational___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRational___eq__" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRational___eq__" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRational___eq__" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp2);
  {
    try {
      result = (bool)((Gambit::Vector<Gambit::Rational > const *)arg1)->operator ==((Gambit::Vector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRational___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  Gambit::Vector<Gambit::Rational > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorRational___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRational___ne__" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRational___ne__" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRational___ne__" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp2);
  {
    try {
      result = (bool)((Gambit::Vector<Gambit::Rational > const *)arg1)->operator !=((Gambit::Vector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRational___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  Gambit::Rational arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorRational___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRational___eq__" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRational___eq__" "', argument " "2"" of type '" "Gambit::Rational""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRational___eq__" "', argument " "2"" of type '" "Gambit::Rational""'");
    } else {
      Gambit::Rational * temp = reinterpret_cast< Gambit::Rational * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)((Gambit::Vector<Gambit::Rational > const *)arg1)->operator ==(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRational___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorRational___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Rational, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorRational___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_VectorRational___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  Gambit::Rational arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorRational___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRational___ne__" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRational___ne__" "', argument " "2"" of type '" "Gambit::Rational""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRational___ne__" "', argument " "2"" of type '" "Gambit::Rational""'");
    } else {
      Gambit::Rational * temp = reinterpret_cast< Gambit::Rational * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)((Gambit::Vector<Gambit::Rational > const *)arg1)->operator !=(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRational___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorRational___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Rational, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorRational___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_VectorRational_NormSquared(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorRational_NormSquared",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRational_NormSquared" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  {
    try {
      result = ((Gambit::Vector<Gambit::Rational > const *)arg1)->NormSquared();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorRational_Check(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = (Gambit::Vector<Gambit::Rational > *) 0 ;
  Gambit::Vector<Gambit::Rational > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorRational_Check",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorRational_Check" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorRational_Check" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorRational_Check" "', argument " "2"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp2);
  {
    try {
      result = (bool)((Gambit::Vector<Gambit::Rational > const *)arg1)->Check((Gambit::Vector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorRational_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PVectorDouble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PVectorDouble")) SWIG_fail;
  {
    try {
      result = (Gambit::PVector<double > *)new Gambit::PVector<double >();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PVectorDouble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<int > *arg1 = 0 ;
  Gambit::PVector<double > *result = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PVectorDouble",&obj0)) SWIG_fail;
  {
    int i;
    if (!PySequence_Check(obj0)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      return NULL;
    }
    arg1 = new Array<int>(PySequence_Length(obj0));
    for (i = 0; i < PySequence_Length(obj0); i++) {
      PyObject *o = PySequence_GetItem(obj0, i);
      if (PyNumber_Check(o)) {
        (*arg1)[i+1] = (int) PyInt_AsLong(o);
      }
      else {
        PyErr_SetString(PyExc_ValueError, "Sequence elements must be numbers");
        return NULL;
      }
    }
  }
  {
    try {
      result = (Gambit::PVector<double > *)new Gambit::PVector<double >((Gambit::Array<int > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PVectorDouble__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = 0 ;
  Gambit::Array<int > *arg2 = 0 ;
  Gambit::PVector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PVectorDouble",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__VectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PVectorDouble" "', argument " "1"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PVectorDouble" "', argument " "1"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  {
    int i;
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      return NULL;
    }
    arg2 = new Array<int>(PySequence_Length(obj1));
    for (i = 0; i < PySequence_Length(obj1); i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (PyNumber_Check(o)) {
        (*arg2)[i+1] = (int) PyInt_AsLong(o);
      }
      else {
        PyErr_SetString(PyExc_ValueError, "Sequence elements must be numbers");
        return NULL;
      }
    }
  }
  {
    try {
      result = (Gambit::PVector<double > *)new Gambit::PVector<double >((Gambit::Vector<double > const &)*arg1,(Gambit::Array<int > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PVectorDouble__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = 0 ;
  Gambit::PVector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PVectorDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__PVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PVectorDouble" "', argument " "1"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PVectorDouble" "', argument " "1"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  {
    try {
      result = (Gambit::PVector<double > *)new Gambit::PVector<double >((Gambit::PVector<double > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PVectorDouble(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PVectorDouble__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__ArrayTint_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PVectorDouble__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__PVectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PVectorDouble__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__VectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__ArrayTint_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PVectorDouble__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_PVectorDouble'.\n  Possible C/C++ prototypes are:\n    Gambit::PVector<(double)>()\n    Gambit::PVector<(double)>(Gambit::Array<int > const &)\n    Gambit::PVector<(double)>(Gambit::Vector<double > const &,Gambit::Array<int > const &)\n    Gambit::PVector<(double)>(Gambit::PVector<double > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PVectorDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PVectorDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PVectorDouble" "', argument " "1"" of type '" "Gambit::PVector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  int arg2 ;
  int arg3 ;
  double *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PVectorDouble___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble___call__" "', argument " "1"" of type '" "Gambit::PVector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PVectorDouble___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PVectorDouble___call__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      {
        double &_result_ref = (arg1)->operator ()(arg2,arg3);
        result = (double *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  int arg2 ;
  int arg3 ;
  double *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PVectorDouble___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble___call__" "', argument " "1"" of type '" "Gambit::PVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PVectorDouble___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PVectorDouble___call__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      {
        double const &_result_ref = ((Gambit::PVector<double > const *)arg1)->operator ()(arg2,arg3);
        result = (double *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble___call__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__PVectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PVectorDouble___call____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__PVectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PVectorDouble___call____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PVectorDouble___call__'.\n  Possible C/C++ prototypes are:\n    operator ()(int,int)\n    operator ()(int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble_GetRow__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  int arg2 ;
  Gambit::Vector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorDouble_GetRow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble_GetRow" "', argument " "1"" of type '" "Gambit::PVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PVectorDouble_GetRow" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::PVector<double > const *)arg1)->GetRow(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Vector<double >(static_cast< const Gambit::Vector<double >& >(result))), SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble_GetRow__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  int arg2 ;
  Gambit::Vector<double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PVectorDouble_GetRow",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble_GetRow" "', argument " "1"" of type '" "Gambit::PVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PVectorDouble_GetRow" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__VectorTdouble_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PVectorDouble_GetRow" "', argument " "3"" of type '" "Gambit::Vector<double > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorDouble_GetRow" "', argument " "3"" of type '" "Gambit::Vector<double > &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::Vector<double > * >(argp3);
  {
    try {
      ((Gambit::PVector<double > const *)arg1)->GetRow(arg2,*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble_GetRow(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__PVectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PVectorDouble_GetRow__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__PVectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gambit__VectorTdouble_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PVectorDouble_GetRow__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PVectorDouble_GetRow'.\n  Possible C/C++ prototypes are:\n    GetRow(int)\n    GetRow(int,Gambit::Vector<double > &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble_SetRow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  int arg2 ;
  Gambit::Vector<double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PVectorDouble_SetRow",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble_SetRow" "', argument " "1"" of type '" "Gambit::PVector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PVectorDouble_SetRow" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__VectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PVectorDouble_SetRow" "', argument " "3"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorDouble_SetRow" "', argument " "3"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::Vector<double > * >(argp3);
  {
    try {
      (arg1)->SetRow(arg2,(Gambit::Vector<double > const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble_CopyRow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  int arg2 ;
  Gambit::PVector<double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PVectorDouble_CopyRow",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble_CopyRow" "', argument " "1"" of type '" "Gambit::PVector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PVectorDouble_CopyRow" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__PVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PVectorDouble_CopyRow" "', argument " "3"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorDouble_CopyRow" "', argument " "3"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::PVector<double > * >(argp3);
  {
    try {
      (arg1)->CopyRow(arg2,(Gambit::PVector<double > const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  Gambit::PVector<double > *arg2 = 0 ;
  Gambit::PVector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorDouble___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble___add__" "', argument " "1"" of type '" "Gambit::PVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorDouble___add__" "', argument " "2"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorDouble___add__" "', argument " "2"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<double > * >(argp2);
  {
    try {
      result = ((Gambit::PVector<double > const *)arg1)->operator +((Gambit::PVector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::PVector<double >(static_cast< const Gambit::PVector<double >& >(result))), SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  Gambit::PVector<double > *arg2 = 0 ;
  Gambit::PVector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorDouble___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble___iadd__" "', argument " "1"" of type '" "Gambit::PVector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorDouble___iadd__" "', argument " "2"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorDouble___iadd__" "', argument " "2"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<double > * >(argp2);
  {
    try {
      {
        Gambit::PVector<double > &_result_ref = (arg1)->operator +=((Gambit::PVector<double > const &)*arg2);
        result = (Gambit::PVector<double > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  Gambit::PVector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PVectorDouble___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble___neg__" "', argument " "1"" of type '" "Gambit::PVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  {
    try {
      result = ((Gambit::PVector<double > const *)arg1)->operator -();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::PVector<double >(static_cast< const Gambit::PVector<double >& >(result))), SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  Gambit::PVector<double > *arg2 = 0 ;
  Gambit::PVector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorDouble___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble___sub__" "', argument " "1"" of type '" "Gambit::PVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorDouble___sub__" "', argument " "2"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorDouble___sub__" "', argument " "2"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<double > * >(argp2);
  {
    try {
      result = ((Gambit::PVector<double > const *)arg1)->operator -((Gambit::PVector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::PVector<double >(static_cast< const Gambit::PVector<double >& >(result))), SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  Gambit::PVector<double > *arg2 = 0 ;
  Gambit::PVector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorDouble___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble___isub__" "', argument " "1"" of type '" "Gambit::PVector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorDouble___isub__" "', argument " "2"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorDouble___isub__" "', argument " "2"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<double > * >(argp2);
  {
    try {
      {
        Gambit::PVector<double > &_result_ref = (arg1)->operator -=((Gambit::PVector<double > const &)*arg2);
        result = (Gambit::PVector<double > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  Gambit::PVector<double > *arg2 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorDouble___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble___mul__" "', argument " "1"" of type '" "Gambit::PVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorDouble___mul__" "', argument " "2"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorDouble___mul__" "', argument " "2"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<double > * >(argp2);
  {
    try {
      result = (double)((Gambit::PVector<double > const *)arg1)->operator *((Gambit::PVector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  double *arg2 = 0 ;
  Gambit::PVector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorDouble___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble___mul__" "', argument " "1"" of type '" "Gambit::PVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PVectorDouble___mul__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = ((Gambit::PVector<double > const *)arg1)->operator *((double const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::PVector<double >(static_cast< const Gambit::PVector<double >& >(result))), SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__PVectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__PVectorTdouble_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PVectorDouble___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__PVectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PVectorDouble___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PVectorDouble___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  double arg2 ;
  Gambit::PVector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorDouble___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble___imul__" "', argument " "1"" of type '" "Gambit::PVector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PVectorDouble___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      {
        Gambit::PVector<double > &_result_ref = (arg1)->operator *=(arg2);
        result = (Gambit::PVector<double > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  double arg2 ;
  Gambit::PVector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorDouble___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble___div__" "', argument " "1"" of type '" "Gambit::PVector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PVectorDouble___div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (arg1)->operator /(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::PVector<double >(static_cast< const Gambit::PVector<double >& >(result))), SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  Gambit::PVector<double > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorDouble___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble___eq__" "', argument " "1"" of type '" "Gambit::PVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorDouble___eq__" "', argument " "2"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorDouble___eq__" "', argument " "2"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<double > * >(argp2);
  {
    try {
      result = (bool)((Gambit::PVector<double > const *)arg1)->operator ==((Gambit::PVector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  Gambit::PVector<double > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorDouble___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble___ne__" "', argument " "1"" of type '" "Gambit::PVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorDouble___ne__" "', argument " "2"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorDouble___ne__" "', argument " "2"" of type '" "Gambit::PVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<double > * >(argp2);
  {
    try {
      result = (bool)((Gambit::PVector<double > const *)arg1)->operator !=((Gambit::PVector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorDouble_Lengths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<double > *arg1 = (Gambit::PVector<double > *) 0 ;
  Gambit::Array<int > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PVectorDouble_Lengths",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorDouble_Lengths" "', argument " "1"" of type '" "Gambit::PVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<double > * >(argp1);
  {
    try {
      {
        Gambit::Array<int > const &_result_ref = ((Gambit::PVector<double > const *)arg1)->Lengths();
        result = (Gambit::Array<int > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__ArrayTint_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PVectorDouble_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__PVectorTdouble_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PVectorRational__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PVectorRational")) SWIG_fail;
  {
    try {
      result = (Gambit::PVector<Gambit::Rational > *)new Gambit::PVector<Gambit::Rational >();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PVectorRational__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<int > *arg1 = 0 ;
  Gambit::PVector<Gambit::Rational > *result = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PVectorRational",&obj0)) SWIG_fail;
  {
    int i;
    if (!PySequence_Check(obj0)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      return NULL;
    }
    arg1 = new Array<int>(PySequence_Length(obj0));
    for (i = 0; i < PySequence_Length(obj0); i++) {
      PyObject *o = PySequence_GetItem(obj0, i);
      if (PyNumber_Check(o)) {
        (*arg1)[i+1] = (int) PyInt_AsLong(o);
      }
      else {
        PyErr_SetString(PyExc_ValueError, "Sequence elements must be numbers");
        return NULL;
      }
    }
  }
  {
    try {
      result = (Gambit::PVector<Gambit::Rational > *)new Gambit::PVector<Gambit::Rational >((Gambit::Array<int > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PVectorRational__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = 0 ;
  Gambit::Array<int > *arg2 = 0 ;
  Gambit::PVector<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PVectorRational",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PVectorRational" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PVectorRational" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  {
    int i;
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      return NULL;
    }
    arg2 = new Array<int>(PySequence_Length(obj1));
    for (i = 0; i < PySequence_Length(obj1); i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (PyNumber_Check(o)) {
        (*arg2)[i+1] = (int) PyInt_AsLong(o);
      }
      else {
        PyErr_SetString(PyExc_ValueError, "Sequence elements must be numbers");
        return NULL;
      }
    }
  }
  {
    try {
      result = (Gambit::PVector<Gambit::Rational > *)new Gambit::PVector<Gambit::Rational >((Gambit::Vector<Gambit::Rational > const &)*arg1,(Gambit::Array<int > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PVectorRational__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = 0 ;
  Gambit::PVector<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PVectorRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PVectorRational" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PVectorRational" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  {
    try {
      result = (Gambit::PVector<Gambit::Rational > *)new Gambit::PVector<Gambit::Rational >((Gambit::PVector<Gambit::Rational > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PVectorRational(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PVectorRational__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__ArrayTint_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PVectorRational__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PVectorRational__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__ArrayTint_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PVectorRational__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_PVectorRational'.\n  Possible C/C++ prototypes are:\n    Gambit::PVector<(Gambit::Rational)>()\n    Gambit::PVector<(Gambit::Rational)>(Gambit::Array<int > const &)\n    Gambit::PVector<(Gambit::Rational)>(Gambit::Vector<Gambit::Rational > const &,Gambit::Array<int > const &)\n    Gambit::PVector<(Gambit::Rational)>(Gambit::PVector<Gambit::Rational > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PVectorRational(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PVectorRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PVectorRational" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  int arg2 ;
  int arg3 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PVectorRational___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational___call__" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PVectorRational___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PVectorRational___call__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      {
        Gambit::Rational &_result_ref = (arg1)->operator ()(arg2,arg3);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  int arg2 ;
  int arg3 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PVectorRational___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational___call__" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PVectorRational___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PVectorRational___call__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      {
        Gambit::Rational const &_result_ref = ((Gambit::PVector<Gambit::Rational > const *)arg1)->operator ()(arg2,arg3);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational___call__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PVectorRational___call____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PVectorRational___call____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PVectorRational___call__'.\n  Possible C/C++ prototypes are:\n    operator ()(int,int)\n    operator ()(int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational_GetRow__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  int arg2 ;
  Gambit::Vector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorRational_GetRow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational_GetRow" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PVectorRational_GetRow" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::PVector<Gambit::Rational > const *)arg1)->GetRow(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Vector<Gambit::Rational >(static_cast< const Gambit::Vector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational_GetRow__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  int arg2 ;
  Gambit::Vector<Gambit::Rational > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PVectorRational_GetRow",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational_GetRow" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PVectorRational_GetRow" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PVectorRational_GetRow" "', argument " "3"" of type '" "Gambit::Vector<Gambit::Rational > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorRational_GetRow" "', argument " "3"" of type '" "Gambit::Vector<Gambit::Rational > &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp3);
  {
    try {
      ((Gambit::PVector<Gambit::Rational > const *)arg1)->GetRow(arg2,*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational_GetRow(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PVectorRational_GetRow__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PVectorRational_GetRow__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PVectorRational_GetRow'.\n  Possible C/C++ prototypes are:\n    GetRow(int)\n    GetRow(int,Gambit::Vector<Gambit::Rational > &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational_SetRow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  int arg2 ;
  Gambit::Vector<Gambit::Rational > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PVectorRational_SetRow",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational_SetRow" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PVectorRational_SetRow" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PVectorRational_SetRow" "', argument " "3"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorRational_SetRow" "', argument " "3"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp3);
  {
    try {
      (arg1)->SetRow(arg2,(Gambit::Vector<Gambit::Rational > const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational_CopyRow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  int arg2 ;
  Gambit::PVector<Gambit::Rational > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PVectorRational_CopyRow",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational_CopyRow" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PVectorRational_CopyRow" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PVectorRational_CopyRow" "', argument " "3"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorRational_CopyRow" "', argument " "3"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp3);
  {
    try {
      (arg1)->CopyRow(arg2,(Gambit::PVector<Gambit::Rational > const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  Gambit::PVector<Gambit::Rational > *arg2 = 0 ;
  Gambit::PVector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorRational___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational___add__" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorRational___add__" "', argument " "2"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorRational___add__" "', argument " "2"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp2);
  {
    try {
      result = ((Gambit::PVector<Gambit::Rational > const *)arg1)->operator +((Gambit::PVector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::PVector<Gambit::Rational >(static_cast< const Gambit::PVector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  Gambit::PVector<Gambit::Rational > *arg2 = 0 ;
  Gambit::PVector<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorRational___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational___iadd__" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorRational___iadd__" "', argument " "2"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorRational___iadd__" "', argument " "2"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp2);
  {
    try {
      {
        Gambit::PVector<Gambit::Rational > &_result_ref = (arg1)->operator +=((Gambit::PVector<Gambit::Rational > const &)*arg2);
        result = (Gambit::PVector<Gambit::Rational > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  Gambit::PVector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PVectorRational___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational___neg__" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  {
    try {
      result = ((Gambit::PVector<Gambit::Rational > const *)arg1)->operator -();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::PVector<Gambit::Rational >(static_cast< const Gambit::PVector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  Gambit::PVector<Gambit::Rational > *arg2 = 0 ;
  Gambit::PVector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorRational___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational___sub__" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorRational___sub__" "', argument " "2"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorRational___sub__" "', argument " "2"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp2);
  {
    try {
      result = ((Gambit::PVector<Gambit::Rational > const *)arg1)->operator -((Gambit::PVector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::PVector<Gambit::Rational >(static_cast< const Gambit::PVector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  Gambit::PVector<Gambit::Rational > *arg2 = 0 ;
  Gambit::PVector<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorRational___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational___isub__" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorRational___isub__" "', argument " "2"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorRational___isub__" "', argument " "2"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp2);
  {
    try {
      {
        Gambit::PVector<Gambit::Rational > &_result_ref = (arg1)->operator -=((Gambit::PVector<Gambit::Rational > const &)*arg2);
        result = (Gambit::PVector<Gambit::Rational > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  Gambit::PVector<Gambit::Rational > *arg2 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorRational___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational___mul__" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorRational___mul__" "', argument " "2"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorRational___mul__" "', argument " "2"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp2);
  {
    try {
      result = ((Gambit::PVector<Gambit::Rational > const *)arg1)->operator *((Gambit::PVector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  Gambit::PVector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorRational___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational___mul__" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorRational___mul__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorRational___mul__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      result = ((Gambit::PVector<Gambit::Rational > const *)arg1)->operator *((Gambit::Rational const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::PVector<Gambit::Rational >(static_cast< const Gambit::PVector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PVectorRational___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Rational, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PVectorRational___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PVectorRational___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  Gambit::Rational arg2 ;
  Gambit::PVector<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorRational___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational___imul__" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorRational___imul__" "', argument " "2"" of type '" "Gambit::Rational const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorRational___imul__" "', argument " "2"" of type '" "Gambit::Rational const""'");
    } else {
      Gambit::Rational * temp = reinterpret_cast< Gambit::Rational * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      {
        Gambit::PVector<Gambit::Rational > &_result_ref = (arg1)->operator *=(arg2);
        result = (Gambit::PVector<Gambit::Rational > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  Gambit::Rational arg2 ;
  Gambit::PVector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorRational___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational___div__" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorRational___div__" "', argument " "2"" of type '" "Gambit::Rational""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorRational___div__" "', argument " "2"" of type '" "Gambit::Rational""'");
    } else {
      Gambit::Rational * temp = reinterpret_cast< Gambit::Rational * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (arg1)->operator /(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::PVector<Gambit::Rational >(static_cast< const Gambit::PVector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  Gambit::PVector<Gambit::Rational > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorRational___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational___eq__" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorRational___eq__" "', argument " "2"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorRational___eq__" "', argument " "2"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp2);
  {
    try {
      result = (bool)((Gambit::PVector<Gambit::Rational > const *)arg1)->operator ==((Gambit::PVector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  Gambit::PVector<Gambit::Rational > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PVectorRational___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational___ne__" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PVectorRational___ne__" "', argument " "2"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PVectorRational___ne__" "', argument " "2"" of type '" "Gambit::PVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp2);
  {
    try {
      result = (bool)((Gambit::PVector<Gambit::Rational > const *)arg1)->operator !=((Gambit::PVector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PVectorRational_Lengths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<Gambit::Rational > *arg1 = (Gambit::PVector<Gambit::Rational > *) 0 ;
  Gambit::Array<int > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PVectorRational_Lengths",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PVectorRational_Lengths" "', argument " "1"" of type '" "Gambit::PVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<Gambit::Rational > * >(argp1);
  {
    try {
      {
        Gambit::Array<int > const &_result_ref = ((Gambit::PVector<Gambit::Rational > const *)arg1)->Lengths();
        result = (Gambit::Array<int > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__ArrayTint_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PVectorRational_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__PVectorTGambit__Rational_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DVectorDouble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DVectorDouble")) SWIG_fail;
  {
    try {
      result = (Gambit::DVector<double > *)new Gambit::DVector<double >();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DVectorDouble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<int > *arg1 = 0 ;
  Gambit::DVector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DVectorDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__PVectorTint_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DVectorDouble" "', argument " "1"" of type '" "Gambit::PVector<int > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DVectorDouble" "', argument " "1"" of type '" "Gambit::PVector<int > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<int > * >(argp1);
  {
    try {
      result = (Gambit::DVector<double > *)new Gambit::DVector<double >((Gambit::PVector<int > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DVectorDouble__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<double > *arg1 = 0 ;
  Gambit::PVector<int > *arg2 = 0 ;
  Gambit::DVector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DVectorDouble",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__VectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DVectorDouble" "', argument " "1"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DVectorDouble" "', argument " "1"" of type '" "Gambit::Vector<double > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTint_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DVectorDouble" "', argument " "2"" of type '" "Gambit::PVector<int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DVectorDouble" "', argument " "2"" of type '" "Gambit::PVector<int > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<int > * >(argp2);
  {
    try {
      result = (Gambit::DVector<double > *)new Gambit::DVector<double >((Gambit::Vector<double > const &)*arg1,(Gambit::PVector<int > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DVectorDouble__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = 0 ;
  Gambit::DVector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DVectorDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__DVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DVectorDouble" "', argument " "1"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DVectorDouble" "', argument " "1"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  {
    try {
      result = (Gambit::DVector<double > *)new Gambit::DVector<double >((Gambit::DVector<double > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DVectorDouble(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DVectorDouble__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__PVectorTint_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DVectorDouble__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__DVectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DVectorDouble__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__VectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__PVectorTint_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DVectorDouble__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DVectorDouble'.\n  Possible C/C++ prototypes are:\n    Gambit::DVector<(double)>()\n    Gambit::DVector<(double)>(Gambit::PVector<int > const &)\n    Gambit::DVector<(double)>(Gambit::Vector<double > const &,Gambit::PVector<int > const &)\n    Gambit::DVector<(double)>(Gambit::DVector<double > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DVectorDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = (Gambit::DVector<double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DVectorDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DVectorDouble" "', argument " "1"" of type '" "Gambit::DVector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorDouble___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = (Gambit::DVector<double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DVectorDouble___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorDouble___call__" "', argument " "1"" of type '" "Gambit::DVector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DVectorDouble___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DVectorDouble___call__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DVectorDouble___call__" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      {
        double &_result_ref = (arg1)->operator ()(arg2,arg3,arg4);
        result = (double *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorDouble___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = (Gambit::DVector<double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DVectorDouble___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorDouble___call__" "', argument " "1"" of type '" "Gambit::DVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DVectorDouble___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DVectorDouble___call__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DVectorDouble___call__" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      {
        double const &_result_ref = ((Gambit::DVector<double > const *)arg1)->operator ()(arg2,arg3,arg4);
        result = (double *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorDouble___call__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__DVectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DVectorDouble___call____SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__DVectorTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DVectorDouble___call____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DVectorDouble___call__'.\n  Possible C/C++ prototypes are:\n    operator ()(int,int,int)\n    operator ()(int,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorDouble_CopySubRow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = (Gambit::DVector<double > *) 0 ;
  int arg2 ;
  int arg3 ;
  Gambit::DVector<double > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DVectorDouble_CopySubRow",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorDouble_CopySubRow" "', argument " "1"" of type '" "Gambit::DVector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DVectorDouble_CopySubRow" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DVectorDouble_CopySubRow" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gambit__DVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DVectorDouble_CopySubRow" "', argument " "4"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorDouble_CopySubRow" "', argument " "4"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  arg4 = reinterpret_cast< Gambit::DVector<double > * >(argp4);
  {
    try {
      (arg1)->CopySubRow(arg2,arg3,(Gambit::DVector<double > const &)*arg4);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorDouble___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = (Gambit::DVector<double > *) 0 ;
  Gambit::DVector<double > *arg2 = 0 ;
  Gambit::DVector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorDouble___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorDouble___add__" "', argument " "1"" of type '" "Gambit::DVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorDouble___add__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorDouble___add__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<double > * >(argp2);
  {
    try {
      result = ((Gambit::DVector<double > const *)arg1)->operator +((Gambit::DVector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::DVector<double >(static_cast< const Gambit::DVector<double >& >(result))), SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorDouble___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = (Gambit::DVector<double > *) 0 ;
  Gambit::DVector<double > *arg2 = 0 ;
  Gambit::DVector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorDouble___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorDouble___iadd__" "', argument " "1"" of type '" "Gambit::DVector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorDouble___iadd__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorDouble___iadd__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<double > * >(argp2);
  {
    try {
      {
        Gambit::DVector<double > &_result_ref = (arg1)->operator +=((Gambit::DVector<double > const &)*arg2);
        result = (Gambit::DVector<double > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorDouble___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = (Gambit::DVector<double > *) 0 ;
  Gambit::DVector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DVectorDouble___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorDouble___neg__" "', argument " "1"" of type '" "Gambit::DVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  {
    try {
      result = ((Gambit::DVector<double > const *)arg1)->operator -();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::DVector<double >(static_cast< const Gambit::DVector<double >& >(result))), SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorDouble___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = (Gambit::DVector<double > *) 0 ;
  Gambit::DVector<double > *arg2 = 0 ;
  Gambit::DVector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorDouble___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorDouble___sub__" "', argument " "1"" of type '" "Gambit::DVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorDouble___sub__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorDouble___sub__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<double > * >(argp2);
  {
    try {
      result = ((Gambit::DVector<double > const *)arg1)->operator -((Gambit::DVector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::DVector<double >(static_cast< const Gambit::DVector<double >& >(result))), SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorDouble___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = (Gambit::DVector<double > *) 0 ;
  Gambit::DVector<double > *arg2 = 0 ;
  Gambit::DVector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorDouble___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorDouble___isub__" "', argument " "1"" of type '" "Gambit::DVector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorDouble___isub__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorDouble___isub__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<double > * >(argp2);
  {
    try {
      {
        Gambit::DVector<double > &_result_ref = (arg1)->operator -=((Gambit::DVector<double > const &)*arg2);
        result = (Gambit::DVector<double > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorDouble___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = (Gambit::DVector<double > *) 0 ;
  Gambit::DVector<double > *arg2 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorDouble___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorDouble___mul__" "', argument " "1"" of type '" "Gambit::DVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorDouble___mul__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorDouble___mul__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<double > * >(argp2);
  {
    try {
      result = (double)((Gambit::DVector<double > const *)arg1)->operator *((Gambit::DVector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorDouble___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = (Gambit::DVector<double > *) 0 ;
  double *arg2 = 0 ;
  Gambit::DVector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorDouble___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorDouble___imul__" "', argument " "1"" of type '" "Gambit::DVector<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DVectorDouble___imul__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      {
        Gambit::DVector<double > &_result_ref = (arg1)->operator *=((double const &)*arg2);
        result = (Gambit::DVector<double > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorDouble___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = (Gambit::DVector<double > *) 0 ;
  double *arg2 = 0 ;
  Gambit::DVector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorDouble___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorDouble___div__" "', argument " "1"" of type '" "Gambit::DVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DVectorDouble___div__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = ((Gambit::DVector<double > const *)arg1)->operator /((double const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::DVector<double >(static_cast< const Gambit::DVector<double >& >(result))), SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorDouble___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = (Gambit::DVector<double > *) 0 ;
  Gambit::DVector<double > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorDouble___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorDouble___eq__" "', argument " "1"" of type '" "Gambit::DVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorDouble___eq__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorDouble___eq__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<double > * >(argp2);
  {
    try {
      result = (bool)((Gambit::DVector<double > const *)arg1)->operator ==((Gambit::DVector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorDouble___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = (Gambit::DVector<double > *) 0 ;
  Gambit::DVector<double > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorDouble___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorDouble___ne__" "', argument " "1"" of type '" "Gambit::DVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorDouble___ne__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorDouble___ne__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<double > * >(argp2);
  {
    try {
      result = (bool)((Gambit::DVector<double > const *)arg1)->operator !=((Gambit::DVector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorDouble_DPLengths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<double > *arg1 = (Gambit::DVector<double > *) 0 ;
  Gambit::Array<int > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DVectorDouble_DPLengths",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorDouble_DPLengths" "', argument " "1"" of type '" "Gambit::DVector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<double > * >(argp1);
  {
    try {
      {
        Gambit::Array<int > const &_result_ref = ((Gambit::DVector<double > const *)arg1)->DPLengths();
        result = (Gambit::Array<int > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__ArrayTint_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DVectorDouble_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__DVectorTdouble_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DVectorRational__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DVectorRational")) SWIG_fail;
  {
    try {
      result = (Gambit::DVector<Gambit::Rational > *)new Gambit::DVector<Gambit::Rational >();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DVectorRational__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PVector<int > *arg1 = 0 ;
  Gambit::DVector<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DVectorRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__PVectorTint_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DVectorRational" "', argument " "1"" of type '" "Gambit::PVector<int > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DVectorRational" "', argument " "1"" of type '" "Gambit::PVector<int > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PVector<int > * >(argp1);
  {
    try {
      result = (Gambit::DVector<Gambit::Rational > *)new Gambit::DVector<Gambit::Rational >((Gambit::PVector<int > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DVectorRational__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Vector<Gambit::Rational > *arg1 = 0 ;
  Gambit::PVector<int > *arg2 = 0 ;
  Gambit::DVector<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DVectorRational",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DVectorRational" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DVectorRational" "', argument " "1"" of type '" "Gambit::Vector<Gambit::Rational > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Vector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__PVectorTint_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DVectorRational" "', argument " "2"" of type '" "Gambit::PVector<int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DVectorRational" "', argument " "2"" of type '" "Gambit::PVector<int > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::PVector<int > * >(argp2);
  {
    try {
      result = (Gambit::DVector<Gambit::Rational > *)new Gambit::DVector<Gambit::Rational >((Gambit::Vector<Gambit::Rational > const &)*arg1,(Gambit::PVector<int > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DVectorRational__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = 0 ;
  Gambit::DVector<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DVectorRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DVectorRational" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DVectorRational" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  {
    try {
      result = (Gambit::DVector<Gambit::Rational > *)new Gambit::DVector<Gambit::Rational >((Gambit::DVector<Gambit::Rational > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DVectorRational(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DVectorRational__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__PVectorTint_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DVectorRational__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DVectorRational__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__PVectorTint_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DVectorRational__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DVectorRational'.\n  Possible C/C++ prototypes are:\n    Gambit::DVector<(Gambit::Rational)>()\n    Gambit::DVector<(Gambit::Rational)>(Gambit::PVector<int > const &)\n    Gambit::DVector<(Gambit::Rational)>(Gambit::Vector<Gambit::Rational > const &,Gambit::PVector<int > const &)\n    Gambit::DVector<(Gambit::Rational)>(Gambit::DVector<Gambit::Rational > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DVectorRational(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = (Gambit::DVector<Gambit::Rational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DVectorRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DVectorRational" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorRational___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = (Gambit::DVector<Gambit::Rational > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DVectorRational___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorRational___call__" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DVectorRational___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DVectorRational___call__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DVectorRational___call__" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      {
        Gambit::Rational &_result_ref = (arg1)->operator ()(arg2,arg3,arg4);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorRational___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = (Gambit::DVector<Gambit::Rational > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DVectorRational___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorRational___call__" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DVectorRational___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DVectorRational___call__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DVectorRational___call__" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      {
        Gambit::Rational const &_result_ref = ((Gambit::DVector<Gambit::Rational > const *)arg1)->operator ()(arg2,arg3,arg4);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorRational___call__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DVectorRational___call____SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DVectorRational___call____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DVectorRational___call__'.\n  Possible C/C++ prototypes are:\n    operator ()(int,int,int)\n    operator ()(int,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorRational_CopySubRow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = (Gambit::DVector<Gambit::Rational > *) 0 ;
  int arg2 ;
  int arg3 ;
  Gambit::DVector<Gambit::Rational > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DVectorRational_CopySubRow",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorRational_CopySubRow" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DVectorRational_CopySubRow" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DVectorRational_CopySubRow" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DVectorRational_CopySubRow" "', argument " "4"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorRational_CopySubRow" "', argument " "4"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  arg4 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp4);
  {
    try {
      (arg1)->CopySubRow(arg2,arg3,(Gambit::DVector<Gambit::Rational > const &)*arg4);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorRational___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = (Gambit::DVector<Gambit::Rational > *) 0 ;
  Gambit::DVector<Gambit::Rational > *arg2 = 0 ;
  Gambit::DVector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorRational___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorRational___add__" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorRational___add__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorRational___add__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp2);
  {
    try {
      result = ((Gambit::DVector<Gambit::Rational > const *)arg1)->operator +((Gambit::DVector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::DVector<Gambit::Rational >(static_cast< const Gambit::DVector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorRational___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = (Gambit::DVector<Gambit::Rational > *) 0 ;
  Gambit::DVector<Gambit::Rational > *arg2 = 0 ;
  Gambit::DVector<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorRational___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorRational___iadd__" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorRational___iadd__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorRational___iadd__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp2);
  {
    try {
      {
        Gambit::DVector<Gambit::Rational > &_result_ref = (arg1)->operator +=((Gambit::DVector<Gambit::Rational > const &)*arg2);
        result = (Gambit::DVector<Gambit::Rational > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorRational___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = (Gambit::DVector<Gambit::Rational > *) 0 ;
  Gambit::DVector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DVectorRational___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorRational___neg__" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  {
    try {
      result = ((Gambit::DVector<Gambit::Rational > const *)arg1)->operator -();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::DVector<Gambit::Rational >(static_cast< const Gambit::DVector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorRational___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = (Gambit::DVector<Gambit::Rational > *) 0 ;
  Gambit::DVector<Gambit::Rational > *arg2 = 0 ;
  Gambit::DVector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorRational___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorRational___sub__" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorRational___sub__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorRational___sub__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp2);
  {
    try {
      result = ((Gambit::DVector<Gambit::Rational > const *)arg1)->operator -((Gambit::DVector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::DVector<Gambit::Rational >(static_cast< const Gambit::DVector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorRational___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = (Gambit::DVector<Gambit::Rational > *) 0 ;
  Gambit::DVector<Gambit::Rational > *arg2 = 0 ;
  Gambit::DVector<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorRational___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorRational___isub__" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorRational___isub__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorRational___isub__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp2);
  {
    try {
      {
        Gambit::DVector<Gambit::Rational > &_result_ref = (arg1)->operator -=((Gambit::DVector<Gambit::Rational > const &)*arg2);
        result = (Gambit::DVector<Gambit::Rational > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorRational___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = (Gambit::DVector<Gambit::Rational > *) 0 ;
  Gambit::DVector<Gambit::Rational > *arg2 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorRational___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorRational___mul__" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorRational___mul__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorRational___mul__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp2);
  {
    try {
      result = ((Gambit::DVector<Gambit::Rational > const *)arg1)->operator *((Gambit::DVector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorRational___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = (Gambit::DVector<Gambit::Rational > *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  Gambit::DVector<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorRational___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorRational___imul__" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorRational___imul__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorRational___imul__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      {
        Gambit::DVector<Gambit::Rational > &_result_ref = (arg1)->operator *=((Gambit::Rational const &)*arg2);
        result = (Gambit::DVector<Gambit::Rational > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorRational___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = (Gambit::DVector<Gambit::Rational > *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  Gambit::DVector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorRational___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorRational___div__" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorRational___div__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorRational___div__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      result = ((Gambit::DVector<Gambit::Rational > const *)arg1)->operator /((Gambit::Rational const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::DVector<Gambit::Rational >(static_cast< const Gambit::DVector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorRational___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = (Gambit::DVector<Gambit::Rational > *) 0 ;
  Gambit::DVector<Gambit::Rational > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorRational___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorRational___eq__" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorRational___eq__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorRational___eq__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp2);
  {
    try {
      result = (bool)((Gambit::DVector<Gambit::Rational > const *)arg1)->operator ==((Gambit::DVector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorRational___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = (Gambit::DVector<Gambit::Rational > *) 0 ;
  Gambit::DVector<Gambit::Rational > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DVectorRational___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorRational___ne__" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DVectorRational___ne__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DVectorRational___ne__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp2);
  {
    try {
      result = (bool)((Gambit::DVector<Gambit::Rational > const *)arg1)->operator !=((Gambit::DVector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DVectorRational_DPLengths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::DVector<Gambit::Rational > *arg1 = (Gambit::DVector<Gambit::Rational > *) 0 ;
  Gambit::Array<int > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DVectorRational_DPLengths",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DVectorRational_DPLengths" "', argument " "1"" of type '" "Gambit::DVector<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp1);
  {
    try {
      {
        Gambit::Array<int > const &_result_ref = ((Gambit::DVector<Gambit::Rational > const *)arg1)->DPLengths();
        result = (Gambit::Array<int > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__ArrayTint_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DVectorRational_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IntegerRep_len_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegerRep_len_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegerRep_len_set" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegerRep_len_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->len = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegerRep_len_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  unsigned short result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegerRep_len_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegerRep_len_get" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  result = (unsigned short) ((arg1)->len);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegerRep_sz_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegerRep_sz_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegerRep_sz_set" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegerRep_sz_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->sz = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegerRep_sz_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  unsigned short result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegerRep_sz_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegerRep_sz_get" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  result = (unsigned short) ((arg1)->sz);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegerRep_sgn_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegerRep_sgn_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegerRep_sgn_set" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntegerRep_sgn_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->sgn = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegerRep_sgn_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  short result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegerRep_sgn_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegerRep_sgn_get" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  result = (short) ((arg1)->sgn);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegerRep_s_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  unsigned short *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntegerRep_s_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegerRep_s_set" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntegerRep_s_set" "', argument " "2"" of type '" "unsigned short [1]""'"); 
  } 
  arg2 = reinterpret_cast< unsigned short * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)1; ++ii) arg1->s[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""s""' of type '""unsigned short [1]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntegerRep_s_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  unsigned short *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntegerRep_s_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntegerRep_s_get" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  result = (unsigned short *)(unsigned short *) ((arg1)->s);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntegerRep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IntegerRep")) SWIG_fail;
  {
    try {
      result = (Gambit::IntegerRep *)new Gambit::IntegerRep();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__IntegerRep, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntegerRep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntegerRep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntegerRep" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntegerRep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__IntegerRep, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Ialloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  Gambit::IntegerRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Ialloc",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Ialloc" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Ialloc" "', argument " "2"" of type '" "unsigned short const *""'"); 
  }
  arg2 = reinterpret_cast< unsigned short * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Ialloc" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Ialloc" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Ialloc" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (Gambit::IntegerRep *)Gambit::Ialloc(arg1,(unsigned short const *)arg2,arg3,arg4,arg5);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Icalloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  int arg2 ;
  Gambit::IntegerRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Icalloc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Icalloc" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Icalloc" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Gambit::IntegerRep *)Gambit::Icalloc(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Icopy_ulong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  unsigned long arg2 ;
  Gambit::IntegerRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Icopy_ulong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Icopy_ulong" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Icopy_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  {
    try {
      result = (Gambit::IntegerRep *)Gambit::Icopy_ulong(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Icopy_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  long arg2 ;
  Gambit::IntegerRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Icopy_long",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Icopy_long" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Icopy_long" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (Gambit::IntegerRep *)Gambit::Icopy_long(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Icopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  Gambit::IntegerRep *arg2 = (Gambit::IntegerRep *) 0 ;
  Gambit::IntegerRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Icopy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Icopy" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Icopy" "', argument " "2"" of type '" "Gambit::IntegerRep const *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::IntegerRep * >(argp2);
  {
    try {
      result = (Gambit::IntegerRep *)Gambit::Icopy(arg1,(Gambit::IntegerRep const *)arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Iresize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  int arg2 ;
  Gambit::IntegerRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Iresize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iresize" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Iresize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Gambit::IntegerRep *)Gambit::Iresize(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiply__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  Gambit::IntegerRep *arg2 = (Gambit::IntegerRep *) 0 ;
  Gambit::IntegerRep *arg3 = (Gambit::IntegerRep *) 0 ;
  Gambit::IntegerRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:multiply",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multiply" "', argument " "1"" of type '" "Gambit::IntegerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "multiply" "', argument " "2"" of type '" "Gambit::IntegerRep const *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::IntegerRep * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "multiply" "', argument " "3"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg3 = reinterpret_cast< Gambit::IntegerRep * >(argp3);
  {
    try {
      result = (Gambit::IntegerRep *)Gambit::multiply((Gambit::IntegerRep const *)arg1,(Gambit::IntegerRep const *)arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiply__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  long arg2 ;
  Gambit::IntegerRep *arg3 = (Gambit::IntegerRep *) 0 ;
  Gambit::IntegerRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:multiply",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multiply" "', argument " "1"" of type '" "Gambit::IntegerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multiply" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "multiply" "', argument " "3"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg3 = reinterpret_cast< Gambit::IntegerRep * >(argp3);
  {
    try {
      result = (Gambit::IntegerRep *)Gambit::multiply((Gambit::IntegerRep const *)arg1,arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiply(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__IntegerRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__IntegerRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gambit__IntegerRep, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_multiply__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__IntegerRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gambit__IntegerRep, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_multiply__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'multiply'.\n  Possible C/C++ prototypes are:\n    Gambit::multiply(Gambit::IntegerRep const *,Gambit::IntegerRep const *,Gambit::IntegerRep *)\n    Gambit::multiply(Gambit::IntegerRep const *,long,Gambit::IntegerRep *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_bitop__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  Gambit::IntegerRep *arg2 = (Gambit::IntegerRep *) 0 ;
  Gambit::IntegerRep *arg3 = (Gambit::IntegerRep *) 0 ;
  char arg4 ;
  Gambit::IntegerRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:bitop",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitop" "', argument " "1"" of type '" "Gambit::IntegerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bitop" "', argument " "2"" of type '" "Gambit::IntegerRep const *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::IntegerRep * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bitop" "', argument " "3"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg3 = reinterpret_cast< Gambit::IntegerRep * >(argp3);
  ecode4 = SWIG_AsVal_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "bitop" "', argument " "4"" of type '" "char""'");
  } 
  arg4 = static_cast< char >(val4);
  {
    try {
      result = (Gambit::IntegerRep *)Gambit::bitop((Gambit::IntegerRep const *)arg1,(Gambit::IntegerRep const *)arg2,arg3,arg4);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bitop__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  long arg2 ;
  Gambit::IntegerRep *arg3 = (Gambit::IntegerRep *) 0 ;
  char arg4 ;
  Gambit::IntegerRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:bitop",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bitop" "', argument " "1"" of type '" "Gambit::IntegerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bitop" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bitop" "', argument " "3"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg3 = reinterpret_cast< Gambit::IntegerRep * >(argp3);
  ecode4 = SWIG_AsVal_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "bitop" "', argument " "4"" of type '" "char""'");
  } 
  arg4 = static_cast< char >(val4);
  {
    try {
      result = (Gambit::IntegerRep *)Gambit::bitop((Gambit::IntegerRep const *)arg1,arg2,arg3,arg4);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bitop(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__IntegerRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__IntegerRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gambit__IntegerRep, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_bitop__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__IntegerRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gambit__IntegerRep, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_bitop__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'bitop'.\n  Possible C/C++ prototypes are:\n    Gambit::bitop(Gambit::IntegerRep const *,Gambit::IntegerRep const *,Gambit::IntegerRep *,char)\n    Gambit::bitop(Gambit::IntegerRep const *,long,Gambit::IntegerRep *,char)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_power(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  long arg2 ;
  Gambit::IntegerRep *arg3 = (Gambit::IntegerRep *) 0 ;
  Gambit::IntegerRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:power",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "power" "', argument " "1"" of type '" "Gambit::IntegerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "power" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "power" "', argument " "3"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg3 = reinterpret_cast< Gambit::IntegerRep * >(argp3);
  {
    try {
      result = (Gambit::IntegerRep *)Gambit::power((Gambit::IntegerRep const *)arg1,arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  Gambit::IntegerRep *arg2 = (Gambit::IntegerRep *) 0 ;
  Gambit::IntegerRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Compl",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compl" "', argument " "1"" of type '" "Gambit::IntegerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Compl" "', argument " "2"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::IntegerRep * >(argp2);
  {
    try {
      result = (Gambit::IntegerRep *)Gambit::Compl((Gambit::IntegerRep const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cvtItoa(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  std::string arg2 ;
  int *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  char arg8 ;
  char arg9 ;
  int arg10 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  char val8 ;
  int ecode8 = 0 ;
  char val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:cvtItoa",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cvtItoa" "', argument " "1"" of type '" "Gambit::IntegerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "cvtItoa" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cvtItoa" "', argument " "3"" of type '" "int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cvtItoa" "', argument " "3"" of type '" "int &""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cvtItoa" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cvtItoa" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "cvtItoa" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "cvtItoa" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_char(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "cvtItoa" "', argument " "8"" of type '" "char""'");
  } 
  arg8 = static_cast< char >(val8);
  ecode9 = SWIG_AsVal_char(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "cvtItoa" "', argument " "9"" of type '" "char""'");
  } 
  arg9 = static_cast< char >(val9);
  ecode10 = SWIG_AsVal_int(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "cvtItoa" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  {
    try {
      result = Gambit::cvtItoa((Gambit::IntegerRep const *)arg1,arg2,*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Itolong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Itolong",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Itolong" "', argument " "1"" of type '" "Gambit::IntegerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  {
    try {
      result = (long)Gambit::Itolong((Gambit::IntegerRep const *)arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Itodouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Itodouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Itodouble" "', argument " "1"" of type '" "Gambit::IntegerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  {
    try {
      result = (double)Gambit::Itodouble((Gambit::IntegerRep const *)arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Iislong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Iislong",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iislong" "', argument " "1"" of type '" "Gambit::IntegerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  {
    try {
      result = (int)Gambit::Iislong((Gambit::IntegerRep const *)arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Iisdouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Iisdouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Iisdouble" "', argument " "1"" of type '" "Gambit::IntegerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  {
    try {
      result = (int)Gambit::Iisdouble((Gambit::IntegerRep const *)arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Integer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Integer")) SWIG_fail;
  {
    try {
      result = (Gambit::Integer *)new Gambit::Integer();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Integer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  Gambit::Integer *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Integer",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Integer" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (Gambit::Integer *)new Gambit::Integer(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Integer__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  Gambit::Integer *result = 0 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Integer",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Integer" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gambit::Integer *)new Gambit::Integer(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Integer__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long arg1 ;
  Gambit::Integer *result = 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Integer",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Integer" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    try {
      result = (Gambit::Integer *)new Gambit::Integer(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Integer__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::IntegerRep *arg1 = (Gambit::IntegerRep *) 0 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Integer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__IntegerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Integer" "', argument " "1"" of type '" "Gambit::IntegerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::IntegerRep * >(argp1);
  {
    try {
      result = (Gambit::Integer *)new Gambit::Integer(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Integer__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = 0 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Integer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Integer" "', argument " "1"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Integer" "', argument " "1"" of type '" "Gambit::Integer const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      result = (Gambit::Integer *)new Gambit::Integer((Gambit::Integer const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Integer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Integer__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__IntegerRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Integer__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Integer__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Integer__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Integer__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Integer__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Integer'.\n  Possible C/C++ prototypes are:\n    Gambit::Integer()\n    Gambit::Integer(int)\n    Gambit::Integer(long)\n    Gambit::Integer(unsigned long)\n    Gambit::Integer(Gambit::IntegerRep *)\n    Gambit::Integer(Gambit::Integer const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Integer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Integer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Integer" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer_plusplus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integer_plusplus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer_plusplus" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      (arg1)->operator ++();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer_negate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integer_negate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer_negate" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      (arg1)->negate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer_abs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integer_abs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer_abs" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      (arg1)->abs();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___eq__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___eq__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___eq__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      result = (bool)((Gambit::Integer const *)arg1)->operator ==((Gambit::Integer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___eq__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___eq__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (bool)((Gambit::Integer const *)arg1)->operator ==(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Integer___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___ne__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___ne__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___ne__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      result = (bool)((Gambit::Integer const *)arg1)->operator !=((Gambit::Integer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___ne__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___ne__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (bool)((Gambit::Integer const *)arg1)->operator !=(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Integer___lt____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___lt__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___lt__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___lt__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      result = (bool)((Gambit::Integer const *)arg1)->operator <((Gambit::Integer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___lt____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___lt__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___lt__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (bool)((Gambit::Integer const *)arg1)->operator <(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___lt__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___lt____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___lt____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Integer___le____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___le__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___le__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___le__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      result = (bool)((Gambit::Integer const *)arg1)->operator <=((Gambit::Integer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___le____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___le__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___le__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (bool)((Gambit::Integer const *)arg1)->operator <=(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___le__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___le____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___le____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Integer___gt____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___gt__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___gt__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___gt__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      result = (bool)((Gambit::Integer const *)arg1)->operator >((Gambit::Integer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___gt____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___gt__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___gt__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (bool)((Gambit::Integer const *)arg1)->operator >(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___gt__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___gt____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___gt____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Integer___ge____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___ge__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___ge__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___ge__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      result = (bool)((Gambit::Integer const *)arg1)->operator >=((Gambit::Integer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___ge____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___ge__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___ge__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (bool)((Gambit::Integer const *)arg1)->operator >=(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___ge__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___ge____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___ge____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Integer___iadd____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___iadd__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___iadd__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___iadd__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      {
        Gambit::Integer &_result_ref = (arg1)->operator +=((Gambit::Integer const &)*arg2);
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___isub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___isub__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___isub__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___isub__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      {
        Gambit::Integer &_result_ref = (arg1)->operator -=((Gambit::Integer const &)*arg2);
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___imul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___imul__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___imul__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___imul__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      {
        Gambit::Integer &_result_ref = (arg1)->operator *=((Gambit::Integer const &)*arg2);
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___idiv____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___idiv__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___idiv__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___idiv__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      {
        Gambit::Integer &_result_ref = (arg1)->operator /=((Gambit::Integer const &)*arg2);
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___imod____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___imod__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___imod__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___imod__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___imod__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      {
        Gambit::Integer &_result_ref = (arg1)->operator %=((Gambit::Integer const &)*arg2);
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___ilshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___ilshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___ilshift__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___ilshift__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___ilshift__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      {
        Gambit::Integer &_result_ref = (arg1)->operator <<=((Gambit::Integer const &)*arg2);
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___irshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___irshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___irshift__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___irshift__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___irshift__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      {
        Gambit::Integer &_result_ref = (arg1)->operator >>=((Gambit::Integer const &)*arg2);
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___iadd____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___iadd__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___iadd__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      {
        Gambit::Integer &_result_ref = (arg1)->operator +=(arg2);
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___iadd__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___iadd____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___iadd____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Integer___iadd__'.\n  Possible C/C++ prototypes are:\n    operator +=(Gambit::Integer const &)\n    operator +=(long)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___isub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___isub__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___isub__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      {
        Gambit::Integer &_result_ref = (arg1)->operator -=(arg2);
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___isub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___isub____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___isub____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Integer___isub__'.\n  Possible C/C++ prototypes are:\n    operator -=(Gambit::Integer const &)\n    operator -=(long)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___imul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___imul__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___imul__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      {
        Gambit::Integer &_result_ref = (arg1)->operator *=(arg2);
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___imul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___imul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___imul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Integer___imul__'.\n  Possible C/C++ prototypes are:\n    operator *=(Gambit::Integer const &)\n    operator *=(long)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___idiv____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___idiv__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___idiv__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      {
        Gambit::Integer &_result_ref = (arg1)->operator /=(arg2);
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___idiv__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___idiv____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___idiv____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Integer___idiv__'.\n  Possible C/C++ prototypes are:\n    operator /=(Gambit::Integer const &)\n    operator /=(long)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___imod____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___imod__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___imod__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___imod__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      {
        Gambit::Integer &_result_ref = (arg1)->operator %=(arg2);
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___imod__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___imod____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___imod____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Integer___imod__'.\n  Possible C/C++ prototypes are:\n    operator %=(Gambit::Integer const &)\n    operator %=(long)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___ilshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___ilshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___ilshift__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___ilshift__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      {
        Gambit::Integer &_result_ref = (arg1)->operator <<=(arg2);
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___ilshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___ilshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___ilshift____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Integer___ilshift__'.\n  Possible C/C++ prototypes are:\n    operator <<=(Gambit::Integer const &)\n    operator <<=(long)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___irshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___irshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___irshift__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___irshift__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      {
        Gambit::Integer &_result_ref = (arg1)->operator >>=(arg2);
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___irshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___irshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___irshift____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Integer___irshift__'.\n  Possible C/C++ prototypes are:\n    operator >>=(Gambit::Integer const &)\n    operator >>=(long)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integer___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___neg__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      result = ((Gambit::Integer const *)arg1)->operator -();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___add____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___add__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___add__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___add__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      result = ((Gambit::Integer const *)arg1)->operator +((Gambit::Integer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___add____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___add__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___add__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = ((Gambit::Integer const *)arg1)->operator +(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___add__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___add____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___add____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Integer___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___sub__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___sub__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___sub__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      result = ((Gambit::Integer const *)arg1)->operator -((Gambit::Integer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___sub__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___sub__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = ((Gambit::Integer const *)arg1)->operator -(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___sub____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___sub____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Integer___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___mul__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___mul__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___mul__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      result = ((Gambit::Integer const *)arg1)->operator *((Gambit::Integer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___mul__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___mul__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = ((Gambit::Integer const *)arg1)->operator *(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Integer___div____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___div__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___div__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___div__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      result = ((Gambit::Integer const *)arg1)->operator /((Gambit::Integer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___div____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___div__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___div__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = ((Gambit::Integer const *)arg1)->operator /(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___div__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___div____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___div____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Integer___mod____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___mod__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___mod__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___mod__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___mod__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      result = ((Gambit::Integer const *)arg1)->operator %((Gambit::Integer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___mod____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___mod__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___mod__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___mod__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = ((Gambit::Integer const *)arg1)->operator %(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___mod__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___mod____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___mod____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Integer___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___lshift__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___lshift__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___lshift__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      result = ((Gambit::Integer const *)arg1)->operator <<((Gambit::Integer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___lshift__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___lshift__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = ((Gambit::Integer const *)arg1)->operator <<(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___lshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___lshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___lshift____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Integer___rshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___rshift__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer___rshift__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Integer___rshift__" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      result = ((Gambit::Integer const *)arg1)->operator >>((Gambit::Integer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___rshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___rshift__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___rshift__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = ((Gambit::Integer const *)arg1)->operator >>(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___rshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Integer___rshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Integer___rshift____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Integer_fits_in_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integer_fits_in_long",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer_fits_in_long" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      result = (int)((Gambit::Integer const *)arg1)->fits_in_long();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer_fits_in_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integer_fits_in_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer_fits_in_double" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      result = (int)((Gambit::Integer const *)arg1)->fits_in_double();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer_as_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integer_as_long",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer_as_long" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      result = (long)((Gambit::Integer const *)arg1)->as_long();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer_as_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integer_as_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer_as_double" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      result = (double)((Gambit::Integer const *)arg1)->as_double();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer_initialized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integer_initialized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer_initialized" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      result = (int)((Gambit::Integer const *)arg1)->initialized();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer_error",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer_error" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Integer_error" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      ((Gambit::Integer const *)arg1)->error((char const *)arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer_OK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integer_OK",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer_OK" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      result = (int)((Gambit::Integer const *)arg1)->OK();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integer___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___str__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      result = Gambit_Integer___str__(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integer___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___repr__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      result = Gambit_Integer___repr__(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___radd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___radd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___radd__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___radd__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = Gambit_Integer___radd__((Gambit::Integer const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___rsub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___rsub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___rsub__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___rsub__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = Gambit_Integer___rsub__((Gambit::Integer const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___rmul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___rmul__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___rmul__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = Gambit_Integer___rmul__((Gambit::Integer const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___rdiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long arg2 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integer___rdiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___rdiv__" "', argument " "1"" of type '" "Gambit::Integer const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integer___rdiv__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = Gambit_Integer___rdiv__((Gambit::Integer const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integer___int__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = (Gambit::Integer *) 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integer___int__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Integer___int__" "', argument " "1"" of type '" "Gambit::Integer *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      result = (long)Gambit_Integer___int__(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Integer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__Integer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Ipow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long arg2 ;
  Gambit::Integer result;
  long val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Ipow",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Ipow" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Ipow" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = Gambit::Ipow(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sqrt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = 0 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sqrt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqrt" "', argument " "1"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sqrt" "', argument " "1"" of type '" "Gambit::Integer const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      result = Gambit::sqrt((Gambit::Integer const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lcm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Integer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:lcm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lcm" "', argument " "1"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lcm" "', argument " "1"" of type '" "Gambit::Integer const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lcm" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lcm" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      result = Gambit::lcm((Gambit::Integer const &)*arg1,(Gambit::Integer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Integer(static_cast< const Gambit::Integer& >(result))), SWIGTYPE_p_Gambit__Integer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ToText__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ToText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ToText" "', argument " "1"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToText" "', argument " "1"" of type '" "Gambit::Integer const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      result = Gambit::ToText((Gambit::Integer const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rational__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Rational")) SWIG_fail;
  {
    try {
      result = (Gambit::Rational *)new Gambit::Rational();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rational__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  Gambit::Rational *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Rational",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rational" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (Gambit::Rational *)new Gambit::Rational(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rational__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  Gambit::Rational *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Rational",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rational" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (Gambit::Rational *)new Gambit::Rational(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rational__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  Gambit::Rational *result = 0 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Rational",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rational" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (Gambit::Rational *)new Gambit::Rational(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rational__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  Gambit::Rational *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Rational",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rational" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Rational" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Gambit::Rational *)new Gambit::Rational(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rational__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long arg2 ;
  Gambit::Rational *result = 0 ;
  long val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Rational",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rational" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Rational" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (Gambit::Rational *)new Gambit::Rational(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rational__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = 0 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Rational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rational" "', argument " "1"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rational" "', argument " "1"" of type '" "Gambit::Integer const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  {
    try {
      result = (Gambit::Rational *)new Gambit::Rational((Gambit::Integer const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rational__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Integer *arg1 = 0 ;
  Gambit::Integer *arg2 = 0 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Rational",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rational" "', argument " "1"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rational" "', argument " "1"" of type '" "Gambit::Integer const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Integer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Integer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Rational" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rational" "', argument " "2"" of type '" "Gambit::Integer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Integer * >(argp2);
  {
    try {
      result = (Gambit::Rational *)new Gambit::Rational((Gambit::Integer const &)*arg1,(Gambit::Integer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rational__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = 0 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Rational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rational" "', argument " "1"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rational" "', argument " "1"" of type '" "Gambit::Rational const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      result = (Gambit::Rational *)new Gambit::Rational((Gambit::Rational const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rational(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Rational__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Rational__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Rational__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Rational__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Rational__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Rational__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Integer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Rational__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Rational__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Rational__SWIG_5(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Rational'.\n  Possible C/C++ prototypes are:\n    Gambit::Rational()\n    Gambit::Rational(double)\n    Gambit::Rational(int)\n    Gambit::Rational(long)\n    Gambit::Rational(int,int)\n    Gambit::Rational(long,long)\n    Gambit::Rational(Gambit::Integer const &)\n    Gambit::Rational(Gambit::Integer const &,Gambit::Integer const &)\n    Gambit::Rational(Gambit::Rational const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Rational(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Rational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rational" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___eq__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational___eq__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rational___eq__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      result = (bool)((Gambit::Rational const *)arg1)->operator ==((Gambit::Rational const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___ne__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational___ne__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rational___ne__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      result = (bool)((Gambit::Rational const *)arg1)->operator !=((Gambit::Rational const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___lt__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational___lt__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rational___lt__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      result = (bool)((Gambit::Rational const *)arg1)->operator <((Gambit::Rational const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___le__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational___le__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rational___le__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      result = (bool)((Gambit::Rational const *)arg1)->operator <=((Gambit::Rational const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___gt__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational___gt__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rational___gt__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      result = (bool)((Gambit::Rational const *)arg1)->operator >((Gambit::Rational const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___ge__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational___ge__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rational___ge__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      result = (bool)((Gambit::Rational const *)arg1)->operator >=((Gambit::Rational const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___add____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___add__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational___add__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rational___add__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      result = ((Gambit::Rational const *)arg1)->operator +((Gambit::Rational const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___sub__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational___sub__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rational___sub__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      result = ((Gambit::Rational const *)arg1)->operator -((Gambit::Rational const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___mul__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational___mul__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rational___mul__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      result = ((Gambit::Rational const *)arg1)->operator *((Gambit::Rational const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___div____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___div__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational___div__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rational___div__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      result = ((Gambit::Rational const *)arg1)->operator /((Gambit::Rational const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___iadd____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___iadd__" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational___iadd__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rational___iadd__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      {
        Gambit::Rational &_result_ref = (arg1)->operator +=((Gambit::Rational const &)*arg2);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___isub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___isub__" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational___isub__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rational___isub__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      {
        Gambit::Rational &_result_ref = (arg1)->operator -=((Gambit::Rational const &)*arg2);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___imul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___imul__" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational___imul__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rational___imul__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      {
        Gambit::Rational &_result_ref = (arg1)->operator *=((Gambit::Rational const &)*arg2);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___idiv____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___idiv__" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational___idiv__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rational___idiv__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      {
        Gambit::Rational &_result_ref = (arg1)->operator /=((Gambit::Rational const &)*arg2);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational___neg__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___neg__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      result = ((Gambit::Rational const *)arg1)->operator -();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational_negate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational_negate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational_negate" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      (arg1)->negate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational_invert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational_invert",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational_invert" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      (arg1)->invert();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational_numerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational_numerator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational_numerator" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      {
        Gambit::Integer const &_result_ref = ((Gambit::Rational const *)arg1)->numerator();
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational_denominator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Integer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational_denominator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational_denominator" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      {
        Gambit::Integer const &_result_ref = ((Gambit::Rational const *)arg1)->denominator();
        result = (Gambit::Integer *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Integer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational_fits_in_float(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational_fits_in_float",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational_fits_in_float" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      result = (int)((Gambit::Rational const *)arg1)->fits_in_float();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational_fits_in_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational_fits_in_double",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational_fits_in_double" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      result = (int)((Gambit::Rational const *)arg1)->fits_in_double();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational_error",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational_error" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rational_error" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      ((Gambit::Rational const *)arg1)->error((char const *)arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational_OK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational_OK",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational_OK" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      result = (int)((Gambit::Rational const *)arg1)->OK();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___str__" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      result = Gambit_Rational___str__(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___repr__" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      result = Gambit_Rational___repr__(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___add____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  double arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___add__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rational___add__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)Gambit_Rational_operator_Sa___SWIG_1((Gambit::Rational const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___add__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Rational, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rational___add____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Rational___add____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Rational___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  double arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___sub__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rational___sub__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)Gambit_Rational_operator_Ss___SWIG_1((Gambit::Rational const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Rational, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rational___sub____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Rational___sub____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Rational___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  double arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___mul__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rational___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)Gambit_Rational_operator_Sm___SWIG_1((Gambit::Rational const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Rational, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rational___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Rational___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Rational___div____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  double arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___div__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rational___div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)Gambit_Rational_operator_Sd___SWIG_1((Gambit::Rational const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___div__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Rational, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rational___div____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Rational___div____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Rational___iadd____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  double arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___iadd__" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rational___iadd__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = Gambit_Rational_operator_Sa__Se___SWIG_1(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___iadd__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Rational, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rational___iadd____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Rational___iadd____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Rational___iadd__'.\n  Possible C/C++ prototypes are:\n    operator +=(Gambit::Rational const &)\n    operator +=(double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___isub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  double arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___isub__" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rational___isub__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = Gambit_Rational_operator_Ss__Se___SWIG_1(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___isub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Rational, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rational___isub____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Rational___isub____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Rational___isub__'.\n  Possible C/C++ prototypes are:\n    operator -=(Gambit::Rational const &)\n    operator -=(double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___imul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  double arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___imul__" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rational___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = Gambit_Rational_operator_Sm__Se___SWIG_1(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___imul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Rational, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rational___imul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Rational___imul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Rational___imul__'.\n  Possible C/C++ prototypes are:\n    operator *=(Gambit::Rational const &)\n    operator *=(double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___idiv____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  double arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___idiv__" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rational___idiv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = Gambit_Rational_operator_Sd__Se___SWIG_1(arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___idiv__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__Rational, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rational___idiv____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Rational___idiv____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Rational___idiv__'.\n  Possible C/C++ prototypes are:\n    operator /=(Gambit::Rational const &)\n    operator /=(double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___pos__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational___pos__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___pos__" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      result = Gambit_Rational___pos__(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___radd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  double arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___radd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___radd__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rational___radd__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)Gambit_Rational___radd__((Gambit::Rational const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___rsub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  double arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___rsub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___rsub__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rational___rsub__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)Gambit_Rational___rsub__((Gambit::Rational const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  double arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___rmul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___rmul__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rational___rmul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)Gambit_Rational___rmul__((Gambit::Rational const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___rdiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  double arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Rational___rdiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___rdiv__" "', argument " "1"" of type '" "Gambit::Rational const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rational___rdiv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)Gambit_Rational___rdiv__((Gambit::Rational const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___float__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational___float__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___float__" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      result = (double)Gambit_Rational___float__(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rational___abs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = (Gambit::Rational *) 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Rational___abs__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rational___abs__" "', argument " "1"" of type '" "Gambit::Rational *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      result = Gambit_Rational___abs__(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Rational_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__Rational, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ToText__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ToText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ToText" "', argument " "1"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToText" "', argument " "1"" of type '" "Gambit::Rational const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      result = Gambit::ToText((Gambit::Rational const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ToText__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = 0 ;
  int arg2 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ToText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ToText" "', argument " "1"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToText" "', argument " "1"" of type '" "Gambit::Rational const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ToText" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = Gambit::ToText((Gambit::Rational const &)*arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ToText(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__Integer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ToText__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ToText__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ToText__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ToText__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ToText'.\n  Possible C/C++ prototypes are:\n    Gambit::ToText(double,int)\n    Gambit::ToText(Gambit::Integer const &)\n    Gambit::ToText(Gambit::Rational const &)\n    Gambit::ToText(Gambit::Rational const &,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ToRational(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Gambit::Rational result;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ToRational",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ToRational" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToRational" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = Gambit::ToRational((std::string const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Epsilon__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Epsilon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__Rational,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Epsilon" "', argument " "1"" of type '" "Gambit::Rational &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Epsilon" "', argument " "1"" of type '" "Gambit::Rational &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Epsilon" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      Gambit::Epsilon(*arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Epsilon__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Rational *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Epsilon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__Rational,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Epsilon" "', argument " "1"" of type '" "Gambit::Rational &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Epsilon" "', argument " "1"" of type '" "Gambit::Rational &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Rational * >(argp1);
  {
    try {
      Gambit::Epsilon(*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Epsilon(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Epsilon__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Epsilon__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__Rational, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Epsilon__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Epsilon__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Epsilon'.\n  Possible C/C++ prototypes are:\n    Gambit::Epsilon(double &,int)\n    Gambit::Epsilon(double &)\n    Gambit::Epsilon(Gambit::Rational &,int)\n    Gambit::Epsilon(Gambit::Rational &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ToDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double result;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ToDouble",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ToDouble" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToDouble" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (double)Gambit::ToDouble((std::string const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ToNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Gambit::Rational result;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ToNumber",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ToNumber" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ToNumber" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = Gambit::ToNumber((std::string const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GameObject")) SWIG_fail;
  {
    try {
      result = (Gambit::GameObject *)new Gambit::GameObject();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameObject_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObject *arg1 = (Gambit::GameObject *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameObject_IsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameObject_IsValid" "', argument " "1"" of type '" "Gambit::GameObject const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObject * >(argp1);
  {
    try {
      result = (bool)((Gambit::GameObject const *)arg1)->IsValid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameObject_Invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObject *arg1 = (Gambit::GameObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameObject_Invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameObject_Invalidate" "', argument " "1"" of type '" "Gambit::GameObject *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObject * >(argp1);
  {
    try {
      (arg1)->Invalidate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameObject_IncRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObject *arg1 = (Gambit::GameObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameObject_IncRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameObject_IncRef" "', argument " "1"" of type '" "Gambit::GameObject *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObject * >(argp1);
  {
    try {
      (arg1)->IncRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameObject_DecRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObject *arg1 = (Gambit::GameObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameObject_DecRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameObject_DecRef" "', argument " "1"" of type '" "Gambit::GameObject *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObject * >(argp1);
  {
    try {
      (arg1)->DecRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameObject_RefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObject *arg1 = (Gambit::GameObject *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameObject_RefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameObject_RefCount" "', argument " "1"" of type '" "Gambit::GameObject const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObject * >(argp1);
  {
    try {
      result = (int)((Gambit::GameObject const *)arg1)->RefCount();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GameObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObject *arg1 = (Gambit::GameObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GameObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObject, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GameObject" "', argument " "1"" of type '" "Gambit::GameObject *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObject * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameObject, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_NullException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::NullException *arg1 = (Gambit::NullException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NullException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__NullException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NullException" "', argument " "1"" of type '" "Gambit::NullException *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::NullException * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NullException_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::NullException *arg1 = (Gambit::NullException *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NullException_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__NullException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NullException_GetDescription" "', argument " "1"" of type '" "Gambit::NullException const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::NullException * >(argp1);
  {
    try {
      result = ((Gambit::NullException const *)arg1)->GetDescription();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NullException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::NullException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NullException")) SWIG_fail;
  {
    try {
      result = (Gambit::NullException *)new Gambit::NullException();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__NullException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NullException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__NullException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_UndefinedException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::UndefinedException *arg1 = (Gambit::UndefinedException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UndefinedException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__UndefinedException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UndefinedException" "', argument " "1"" of type '" "Gambit::UndefinedException *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::UndefinedException * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UndefinedException_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::UndefinedException *arg1 = (Gambit::UndefinedException *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UndefinedException_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__UndefinedException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UndefinedException_GetDescription" "', argument " "1"" of type '" "Gambit::UndefinedException const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::UndefinedException * >(argp1);
  {
    try {
      result = ((Gambit::UndefinedException const *)arg1)->GetDescription();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UndefinedException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::UndefinedException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UndefinedException")) SWIG_fail;
  {
    try {
      result = (Gambit::UndefinedException *)new Gambit::UndefinedException();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__UndefinedException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UndefinedException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__UndefinedException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_MismatchException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MismatchException *arg1 = (Gambit::MismatchException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MismatchException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MismatchException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MismatchException" "', argument " "1"" of type '" "Gambit::MismatchException *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MismatchException * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MismatchException_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MismatchException *arg1 = (Gambit::MismatchException *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MismatchException_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MismatchException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MismatchException_GetDescription" "', argument " "1"" of type '" "Gambit::MismatchException const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MismatchException * >(argp1);
  {
    try {
      result = ((Gambit::MismatchException const *)arg1)->GetDescription();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MismatchException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MismatchException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MismatchException")) SWIG_fail;
  {
    try {
      result = (Gambit::MismatchException *)new Gambit::MismatchException();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MismatchException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MismatchException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__MismatchException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_InvalidFileException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::InvalidFileException *arg1 = (Gambit::InvalidFileException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InvalidFileException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__InvalidFileException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InvalidFileException" "', argument " "1"" of type '" "Gambit::InvalidFileException *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::InvalidFileException * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InvalidFileException_GetDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::InvalidFileException *arg1 = (Gambit::InvalidFileException *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InvalidFileException_GetDescription",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__InvalidFileException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InvalidFileException_GetDescription" "', argument " "1"" of type '" "Gambit::InvalidFileException const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::InvalidFileException * >(argp1);
  {
    try {
      result = ((Gambit::InvalidFileException const *)arg1)->GetDescription();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidFileException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::InvalidFileException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InvalidFileException")) SWIG_fail;
  {
    try {
      result = (Gambit::InvalidFileException *)new Gambit::InvalidFileException();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__InvalidFileException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InvalidFileException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__InvalidFileException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GameOutcomeRep_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameOutcomeRep *arg1 = (Gambit::GameOutcomeRep *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameOutcomeRep_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameOutcomeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcomeRep_GetGame" "', argument " "1"" of type '" "Gambit::GameOutcomeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameOutcomeRep * >(argp1);
  {
    try {
      result = ((Gambit::GameOutcomeRep const *)arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcomeRep_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameOutcomeRep *arg1 = (Gambit::GameOutcomeRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameOutcomeRep_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameOutcomeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcomeRep_GetNumber" "', argument " "1"" of type '" "Gambit::GameOutcomeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameOutcomeRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GameOutcomeRep const *)arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcomeRep_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameOutcomeRep *arg1 = (Gambit::GameOutcomeRep *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameOutcomeRep_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameOutcomeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcomeRep_GetLabel" "', argument " "1"" of type '" "Gambit::GameOutcomeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameOutcomeRep * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((Gambit::GameOutcomeRep const *)arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcomeRep_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameOutcomeRep *arg1 = (Gambit::GameOutcomeRep *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameOutcomeRep_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameOutcomeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcomeRep_SetLabel" "', argument " "1"" of type '" "Gambit::GameOutcomeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameOutcomeRep * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameOutcomeRep_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameOutcomeRep_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcomeRep_SetPayoff__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameOutcomeRep *arg1 = (Gambit::GameOutcomeRep *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GameOutcomeRep_SetPayoff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameOutcomeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcomeRep_SetPayoff" "', argument " "1"" of type '" "Gambit::GameOutcomeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameOutcomeRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameOutcomeRep_SetPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GameOutcomeRep_SetPayoff" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameOutcomeRep_SetPayoff" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->SetPayoff(arg2,(std::string const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcomeRep_GetPayoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameOutcomeRep *arg1 = (Gambit::GameOutcomeRep *) 0 ;
  int arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameOutcomeRep_GetPayoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameOutcomeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcomeRep_GetPayoff" "', argument " "1"" of type '" "Gambit::GameOutcomeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameOutcomeRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameOutcomeRep_GetPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = Gambit_GameOutcomeRep_GetPayoff((Gambit::GameOutcomeRep const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcomeRep_SetPayoff__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameOutcomeRep *arg1 = (Gambit::GameOutcomeRep *) 0 ;
  int arg2 ;
  Gambit::Rational *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GameOutcomeRep_SetPayoff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameOutcomeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcomeRep_SetPayoff" "', argument " "1"" of type '" "Gambit::GameOutcomeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameOutcomeRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameOutcomeRep_SetPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GameOutcomeRep_SetPayoff" "', argument " "3"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameOutcomeRep_SetPayoff" "', argument " "3"" of type '" "Gambit::Rational const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::Rational * >(argp3);
  {
    try {
      Gambit_GameOutcomeRep_SetPayoff__SWIG_1(arg1,arg2,(Gambit::Rational const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcomeRep_SetPayoff__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameOutcomeRep *arg1 = (Gambit::GameOutcomeRep *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GameOutcomeRep_SetPayoff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameOutcomeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcomeRep_SetPayoff" "', argument " "1"" of type '" "Gambit::GameOutcomeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameOutcomeRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameOutcomeRep_SetPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GameOutcomeRep_SetPayoff" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      Gambit_GameOutcomeRep_SetPayoff__SWIG_2(arg1,arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcomeRep_SetPayoff(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameOutcomeRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gambit__Rational, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GameOutcomeRep_SetPayoff__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameOutcomeRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GameOutcomeRep_SetPayoff__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameOutcomeRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GameOutcomeRep_SetPayoff__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameOutcomeRep_SetPayoff'.\n  Possible C/C++ prototypes are:\n    SetPayoff(int,std::string const &)\n    SetPayoff(int,Gambit::Rational const &)\n    SetPayoff(int,double)\n");
  return NULL;
}


SWIGINTERN PyObject *GameOutcomeRep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameOutcomeRep, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GameActionRep_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameActionRep *arg1 = (Gambit::GameActionRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionRep_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameActionRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionRep_GetNumber" "', argument " "1"" of type '" "Gambit::GameActionRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameActionRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GameActionRep const *)arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionRep_GetInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameActionRep *arg1 = (Gambit::GameActionRep *) 0 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionRep_GetInfoset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameActionRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionRep_GetInfoset" "', argument " "1"" of type '" "Gambit::GameActionRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameActionRep * >(argp1);
  {
    try {
      result = ((Gambit::GameActionRep const *)arg1)->GetInfoset();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionRep_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameActionRep *arg1 = (Gambit::GameActionRep *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionRep_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameActionRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionRep_GetLabel" "', argument " "1"" of type '" "Gambit::GameActionRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameActionRep * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((Gambit::GameActionRep const *)arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionRep_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameActionRep *arg1 = (Gambit::GameActionRep *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameActionRep_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameActionRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionRep_SetLabel" "', argument " "1"" of type '" "Gambit::GameActionRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameActionRep * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameActionRep_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameActionRep_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionRep_Precedes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameActionRep *arg1 = (Gambit::GameActionRep *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameActionRep_Precedes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameActionRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionRep_Precedes" "', argument " "1"" of type '" "Gambit::GameActionRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameActionRep * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameActionRep_Precedes" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameActionRep_Precedes" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameActionRep const *)arg1)->Precedes((Gambit::GameNode const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionRep_DeleteAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameActionRep *arg1 = (Gambit::GameActionRep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionRep_DeleteAction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameActionRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionRep_DeleteAction" "', argument " "1"" of type '" "Gambit::GameActionRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameActionRep * >(argp1);
  {
    try {
      (arg1)->DeleteAction();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameActionRep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameActionRep, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GameInfosetRep_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetRep_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_GetGame" "', argument " "1"" of type '" "Gambit::GameInfosetRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  {
    try {
      result = ((Gambit::GameInfosetRep const *)arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetRep_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_GetNumber" "', argument " "1"" of type '" "Gambit::GameInfosetRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GameInfosetRep const *)arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_GetPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  Gambit::GamePlayer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetRep_GetPlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_GetPlayer" "', argument " "1"" of type '" "Gambit::GameInfosetRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  {
    try {
      result = ((Gambit::GameInfosetRep const *)arg1)->GetPlayer();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayer(static_cast< const Gambit::GamePlayer& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_SetPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  Gambit::GamePlayer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfosetRep_SetPlayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_SetPlayer" "', argument " "1"" of type '" "Gambit::GameInfosetRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfosetRep_SetPlayer" "', argument " "2"" of type '" "Gambit::GamePlayer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfosetRep_SetPlayer" "', argument " "2"" of type '" "Gambit::GamePlayer""'");
    } else {
      Gambit::GamePlayer * temp = reinterpret_cast< Gambit::GamePlayer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->SetPlayer(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_IsChanceInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetRep_IsChanceInfoset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_IsChanceInfoset" "', argument " "1"" of type '" "Gambit::GameInfosetRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  {
    try {
      result = (bool)((Gambit::GameInfosetRep const *)arg1)->IsChanceInfoset();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfosetRep_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_SetLabel" "', argument " "1"" of type '" "Gambit::GameInfosetRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfosetRep_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfosetRep_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetRep_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_GetLabel" "', argument " "1"" of type '" "Gambit::GameInfosetRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((Gambit::GameInfosetRep const *)arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_InsertAction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  Gambit::GameAction arg2 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfosetRep_InsertAction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_InsertAction" "', argument " "1"" of type '" "Gambit::GameInfosetRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfosetRep_InsertAction" "', argument " "2"" of type '" "Gambit::GameAction""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfosetRep_InsertAction" "', argument " "2"" of type '" "Gambit::GameAction""'");
    } else {
      Gambit::GameAction * temp = reinterpret_cast< Gambit::GameAction * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (arg1)->InsertAction(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_InsertAction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetRep_InsertAction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_InsertAction" "', argument " "1"" of type '" "Gambit::GameInfosetRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  {
    try {
      result = (arg1)->InsertAction();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_InsertAction(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameInfosetRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GameInfosetRep_InsertAction__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameInfosetRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameInfosetRep_InsertAction__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameInfosetRep_InsertAction'.\n  Possible C/C++ prototypes are:\n    InsertAction(Gambit::GameAction)\n    InsertAction()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_NumActions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetRep_NumActions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_NumActions" "', argument " "1"" of type '" "Gambit::GameInfosetRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GameInfosetRep const *)arg1)->NumActions();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_GetAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  int arg2 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfosetRep_GetAction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_GetAction" "', argument " "1"" of type '" "Gambit::GameInfosetRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameInfosetRep_GetAction" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::GameInfosetRep const *)arg1)->GetAction(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_Actions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  SwigValueWrapper<Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameObjectPtr<Gambit::GameActionRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetRep_Actions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_Actions" "', argument " "1"" of type '" "Gambit::GameInfosetRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  {
    try {
      result = ((Gambit::GameInfosetRep const *)arg1)->Actions();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameActionIterator(static_cast< const Gambit::GameActionIterator& >(result))), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_NumMembers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetRep_NumMembers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_NumMembers" "', argument " "1"" of type '" "Gambit::GameInfosetRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GameInfosetRep const *)arg1)->NumMembers();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_GetMember(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  int arg2 ;
  Gambit::GameNode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfosetRep_GetMember",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_GetMember" "', argument " "1"" of type '" "Gambit::GameInfosetRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameInfosetRep_GetMember" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::GameInfosetRep const *)arg1)->GetMember(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameNode(static_cast< const Gambit::GameNode& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_Precedes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  Gambit::GameNode arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfosetRep_Precedes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_Precedes" "', argument " "1"" of type '" "Gambit::GameInfosetRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfosetRep_Precedes" "', argument " "2"" of type '" "Gambit::GameNode""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfosetRep_Precedes" "', argument " "2"" of type '" "Gambit::GameNode""'");
    } else {
      Gambit::GameNode * temp = reinterpret_cast< Gambit::GameNode * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)((Gambit::GameInfosetRep const *)arg1)->Precedes(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_SetActionProb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GameInfosetRep_SetActionProb",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_SetActionProb" "', argument " "1"" of type '" "Gambit::GameInfosetRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameInfosetRep_SetActionProb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GameInfosetRep_SetActionProb" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfosetRep_SetActionProb" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->SetActionProb(arg2,(std::string const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetRep_Reveal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  Gambit::GamePlayer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfosetRep_Reveal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetRep_Reveal" "', argument " "1"" of type '" "Gambit::GameInfosetRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfosetRep_Reveal" "', argument " "2"" of type '" "Gambit::GamePlayer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfosetRep_Reveal" "', argument " "2"" of type '" "Gambit::GamePlayer""'");
    } else {
      Gambit::GamePlayer * temp = reinterpret_cast< Gambit::GamePlayer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->Reveal(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameInfosetRep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameInfosetRep, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GameStrategyRep_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameStrategyRep *arg1 = (Gambit::GameStrategyRep *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyRep_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameStrategyRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyRep_GetLabel" "', argument " "1"" of type '" "Gambit::GameStrategyRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameStrategyRep * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((Gambit::GameStrategyRep const *)arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyRep_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameStrategyRep *arg1 = (Gambit::GameStrategyRep *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameStrategyRep_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameStrategyRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyRep_SetLabel" "', argument " "1"" of type '" "Gambit::GameStrategyRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameStrategyRep * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameStrategyRep_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameStrategyRep_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyRep_GetPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameStrategyRep *arg1 = (Gambit::GameStrategyRep *) 0 ;
  Gambit::GamePlayer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyRep_GetPlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameStrategyRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyRep_GetPlayer" "', argument " "1"" of type '" "Gambit::GameStrategyRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameStrategyRep * >(argp1);
  {
    try {
      result = ((Gambit::GameStrategyRep const *)arg1)->GetPlayer();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayer(static_cast< const Gambit::GamePlayer& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyRep_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameStrategyRep *arg1 = (Gambit::GameStrategyRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyRep_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameStrategyRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyRep_GetNumber" "', argument " "1"" of type '" "Gambit::GameStrategyRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameStrategyRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GameStrategyRep const *)arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyRep_GetId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameStrategyRep *arg1 = (Gambit::GameStrategyRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyRep_GetId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameStrategyRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyRep_GetId" "', argument " "1"" of type '" "Gambit::GameStrategyRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameStrategyRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GameStrategyRep const *)arg1)->GetId();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyRep_DeleteStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameStrategyRep *arg1 = (Gambit::GameStrategyRep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyRep_DeleteStrategy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameStrategyRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyRep_DeleteStrategy" "', argument " "1"" of type '" "Gambit::GameStrategyRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameStrategyRep * >(argp1);
  {
    try {
      (arg1)->DeleteStrategy();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GameStrategyRep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameStrategyRep *arg1 = (Gambit::GameStrategyRep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GameStrategyRep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameStrategyRep, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GameStrategyRep" "', argument " "1"" of type '" "Gambit::GameStrategyRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameStrategyRep * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameStrategyRep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameStrategyRep, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GamePlayerRep_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GamePlayerRep *arg1 = (Gambit::GamePlayerRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerRep_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerRep_GetNumber" "', argument " "1"" of type '" "Gambit::GamePlayerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GamePlayerRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GamePlayerRep const *)arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerRep_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GamePlayerRep *arg1 = (Gambit::GamePlayerRep *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerRep_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerRep_GetGame" "', argument " "1"" of type '" "Gambit::GamePlayerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GamePlayerRep * >(argp1);
  {
    try {
      result = ((Gambit::GamePlayerRep const *)arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerRep_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GamePlayerRep *arg1 = (Gambit::GamePlayerRep *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerRep_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerRep_GetLabel" "', argument " "1"" of type '" "Gambit::GamePlayerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GamePlayerRep * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((Gambit::GamePlayerRep const *)arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerRep_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GamePlayerRep *arg1 = (Gambit::GamePlayerRep *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GamePlayerRep_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerRep_SetLabel" "', argument " "1"" of type '" "Gambit::GamePlayerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GamePlayerRep * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePlayerRep_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePlayerRep_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerRep_IsChance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GamePlayerRep *arg1 = (Gambit::GamePlayerRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerRep_IsChance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerRep_IsChance" "', argument " "1"" of type '" "Gambit::GamePlayerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GamePlayerRep * >(argp1);
  {
    try {
      result = (bool)((Gambit::GamePlayerRep const *)arg1)->IsChance();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerRep_NumInfosets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GamePlayerRep *arg1 = (Gambit::GamePlayerRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerRep_NumInfosets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerRep_NumInfosets" "', argument " "1"" of type '" "Gambit::GamePlayerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GamePlayerRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GamePlayerRep const *)arg1)->NumInfosets();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerRep_GetInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GamePlayerRep *arg1 = (Gambit::GamePlayerRep *) 0 ;
  int arg2 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GamePlayerRep_GetInfoset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerRep_GetInfoset" "', argument " "1"" of type '" "Gambit::GamePlayerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GamePlayerRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePlayerRep_GetInfoset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::GamePlayerRep const *)arg1)->GetInfoset(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerRep_Infosets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GamePlayerRep *arg1 = (Gambit::GamePlayerRep *) 0 ;
  SwigValueWrapper<Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameObjectPtr<Gambit::GameInfosetRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerRep_Infosets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerRep_Infosets" "', argument " "1"" of type '" "Gambit::GamePlayerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GamePlayerRep * >(argp1);
  {
    try {
      result = ((Gambit::GamePlayerRep const *)arg1)->Infosets();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfosetIterator(static_cast< const Gambit::GameInfosetIterator& >(result))), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerRep_NumStrategies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GamePlayerRep *arg1 = (Gambit::GamePlayerRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerRep_NumStrategies",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerRep_NumStrategies" "', argument " "1"" of type '" "Gambit::GamePlayerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GamePlayerRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GamePlayerRep const *)arg1)->NumStrategies();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerRep_GetStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GamePlayerRep *arg1 = (Gambit::GamePlayerRep *) 0 ;
  int arg2 ;
  Gambit::GameStrategy result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GamePlayerRep_GetStrategy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerRep_GetStrategy" "', argument " "1"" of type '" "Gambit::GamePlayerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GamePlayerRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePlayerRep_GetStrategy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::GamePlayerRep const *)arg1)->GetStrategy(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameStrategy(static_cast< const Gambit::GameStrategy& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerRep_Strategies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GamePlayerRep *arg1 = (Gambit::GamePlayerRep *) 0 ;
  SwigValueWrapper<Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameObjectPtr<Gambit::GameStrategyRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerRep_Strategies",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerRep_Strategies" "', argument " "1"" of type '" "Gambit::GamePlayerRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GamePlayerRep * >(argp1);
  {
    try {
      result = ((Gambit::GamePlayerRep const *)arg1)->Strategies();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameStrategyIterator(static_cast< const Gambit::GameStrategyIterator& >(result))), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerRep_NewStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GamePlayerRep *arg1 = (Gambit::GamePlayerRep *) 0 ;
  Gambit::GameStrategy result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerRep_NewStrategy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerRep_NewStrategy" "', argument " "1"" of type '" "Gambit::GamePlayerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GamePlayerRep * >(argp1);
  {
    try {
      result = (arg1)->NewStrategy();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameStrategy(static_cast< const Gambit::GameStrategy& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GamePlayerRep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GamePlayerRep, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_GameNodeRep_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_GetGame" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      result = ((Gambit::GameNodeRep const *)arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_GetLabel" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((Gambit::GameNodeRep const *)arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNodeRep_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_SetLabel" "', argument " "1"" of type '" "Gambit::GameNodeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNodeRep_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNodeRep_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_GetNumber" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GameNodeRep const *)arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_NumberInInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_NumberInInfoset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_NumberInInfoset" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GameNodeRep const *)arg1)->NumberInInfoset();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_NumChildren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_NumChildren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_NumChildren" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GameNodeRep const *)arg1)->NumChildren();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_GetInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_GetInfoset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_GetInfoset" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      result = ((Gambit::GameNodeRep const *)arg1)->GetInfoset();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_SetInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GameInfoset arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNodeRep_SetInfoset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_SetInfoset" "', argument " "1"" of type '" "Gambit::GameNodeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNodeRep_SetInfoset" "', argument " "2"" of type '" "Gambit::GameInfoset""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNodeRep_SetInfoset" "', argument " "2"" of type '" "Gambit::GameInfoset""'");
    } else {
      Gambit::GameInfoset * temp = reinterpret_cast< Gambit::GameInfoset * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->SetInfoset(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_LeaveInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_LeaveInfoset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_LeaveInfoset" "', argument " "1"" of type '" "Gambit::GameNodeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      result = (arg1)->LeaveInfoset();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_IsTerminal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_IsTerminal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_IsTerminal" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      result = (bool)((Gambit::GameNodeRep const *)arg1)->IsTerminal();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_GetPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GamePlayer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_GetPlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_GetPlayer" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      result = ((Gambit::GameNodeRep const *)arg1)->GetPlayer();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayer(static_cast< const Gambit::GamePlayer& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_GetPriorAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_GetPriorAction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_GetPriorAction" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      result = ((Gambit::GameNodeRep const *)arg1)->GetPriorAction();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_GetChild(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  int arg2 ;
  Gambit::GameNode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNodeRep_GetChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_GetChild" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameNodeRep_GetChild" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::GameNodeRep const *)arg1)->GetChild(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameNode(static_cast< const Gambit::GameNode& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_GetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GameNode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_GetParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_GetParent" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      result = ((Gambit::GameNodeRep const *)arg1)->GetParent();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameNode(static_cast< const Gambit::GameNode& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_GetNextSibling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GameNode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_GetNextSibling",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_GetNextSibling" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      result = ((Gambit::GameNodeRep const *)arg1)->GetNextSibling();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameNode(static_cast< const Gambit::GameNode& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_GetPriorSibling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GameNode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_GetPriorSibling",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_GetPriorSibling" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      result = ((Gambit::GameNodeRep const *)arg1)->GetPriorSibling();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameNode(static_cast< const Gambit::GameNode& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_GetOutcome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GameOutcome result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_GetOutcome",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_GetOutcome" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      result = ((Gambit::GameNodeRep const *)arg1)->GetOutcome();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameOutcome(static_cast< const Gambit::GameOutcome& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_SetOutcome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GameOutcome *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNodeRep_SetOutcome",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_SetOutcome" "', argument " "1"" of type '" "Gambit::GameNodeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNodeRep_SetOutcome" "', argument " "2"" of type '" "Gambit::GameOutcome const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNodeRep_SetOutcome" "', argument " "2"" of type '" "Gambit::GameOutcome const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameOutcome * >(argp2);
  {
    try {
      (arg1)->SetOutcome((Gambit::GameOutcome const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_IsSuccessorOf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GameNode arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNodeRep_IsSuccessorOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_IsSuccessorOf" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNodeRep_IsSuccessorOf" "', argument " "2"" of type '" "Gambit::GameNode""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNodeRep_IsSuccessorOf" "', argument " "2"" of type '" "Gambit::GameNode""'");
    } else {
      Gambit::GameNode * temp = reinterpret_cast< Gambit::GameNode * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)((Gambit::GameNodeRep const *)arg1)->IsSuccessorOf(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_IsSubgameRoot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_IsSubgameRoot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_IsSubgameRoot" "', argument " "1"" of type '" "Gambit::GameNodeRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      result = (bool)((Gambit::GameNodeRep const *)arg1)->IsSubgameRoot();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_DeleteParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_DeleteParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_DeleteParent" "', argument " "1"" of type '" "Gambit::GameNodeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      (arg1)->DeleteParent();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_DeleteTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNodeRep_DeleteTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_DeleteTree" "', argument " "1"" of type '" "Gambit::GameNodeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      (arg1)->DeleteTree();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_CopyTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GameNode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNodeRep_CopyTree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_CopyTree" "', argument " "1"" of type '" "Gambit::GameNodeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNodeRep_CopyTree" "', argument " "2"" of type '" "Gambit::GameNode""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNodeRep_CopyTree" "', argument " "2"" of type '" "Gambit::GameNode""'");
    } else {
      Gambit::GameNode * temp = reinterpret_cast< Gambit::GameNode * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->CopyTree(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_MoveTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GameNode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNodeRep_MoveTree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_MoveTree" "', argument " "1"" of type '" "Gambit::GameNodeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNodeRep_MoveTree" "', argument " "2"" of type '" "Gambit::GameNode""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNodeRep_MoveTree" "', argument " "2"" of type '" "Gambit::GameNode""'");
    } else {
      Gambit::GameNode * temp = reinterpret_cast< Gambit::GameNode * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->MoveTree(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_AppendMove__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GamePlayer arg2 ;
  int arg3 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GameNodeRep_AppendMove",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_AppendMove" "', argument " "1"" of type '" "Gambit::GameNodeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNodeRep_AppendMove" "', argument " "2"" of type '" "Gambit::GamePlayer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNodeRep_AppendMove" "', argument " "2"" of type '" "Gambit::GamePlayer""'");
    } else {
      Gambit::GamePlayer * temp = reinterpret_cast< Gambit::GamePlayer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GameNodeRep_AppendMove" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (arg1)->AppendMove(arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_AppendMove__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GameInfoset arg2 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNodeRep_AppendMove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_AppendMove" "', argument " "1"" of type '" "Gambit::GameNodeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNodeRep_AppendMove" "', argument " "2"" of type '" "Gambit::GameInfoset""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNodeRep_AppendMove" "', argument " "2"" of type '" "Gambit::GameInfoset""'");
    } else {
      Gambit::GameInfoset * temp = reinterpret_cast< Gambit::GameInfoset * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (arg1)->AppendMove(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_AppendMove(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameNodeRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameNodeRep_AppendMove__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameNodeRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GameNodeRep_AppendMove__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameNodeRep_AppendMove'.\n  Possible C/C++ prototypes are:\n    AppendMove(Gambit::GamePlayer,int)\n    AppendMove(Gambit::GameInfoset)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_InsertMove__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GamePlayer arg2 ;
  int arg3 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GameNodeRep_InsertMove",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_InsertMove" "', argument " "1"" of type '" "Gambit::GameNodeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNodeRep_InsertMove" "', argument " "2"" of type '" "Gambit::GamePlayer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNodeRep_InsertMove" "', argument " "2"" of type '" "Gambit::GamePlayer""'");
    } else {
      Gambit::GamePlayer * temp = reinterpret_cast< Gambit::GamePlayer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GameNodeRep_InsertMove" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (arg1)->InsertMove(arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_InsertMove__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GameInfoset arg2 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNodeRep_InsertMove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNodeRep_InsertMove" "', argument " "1"" of type '" "Gambit::GameNodeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNodeRep_InsertMove" "', argument " "2"" of type '" "Gambit::GameInfoset""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNodeRep_InsertMove" "', argument " "2"" of type '" "Gambit::GameInfoset""'");
    } else {
      Gambit::GameInfoset * temp = reinterpret_cast< Gambit::GameInfoset * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (arg1)->InsertMove(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNodeRep_InsertMove(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameNodeRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameNodeRep_InsertMove__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameNodeRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GameNodeRep_InsertMove__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameNodeRep_InsertMove'.\n  Possible C/C++ prototypes are:\n    InsertMove(Gambit::GamePlayer,int)\n    InsertMove(Gambit::GameInfoset)\n");
  return NULL;
}


SWIGINTERN PyObject *GameNodeRep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameNodeRep, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PureStrategyProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Game *arg1 = 0 ;
  Gambit::PureStrategyProfile *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PureStrategyProfile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PureStrategyProfile" "', argument " "1"" of type '" "Gambit::Game const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PureStrategyProfile" "', argument " "1"" of type '" "Gambit::Game const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Game * >(argp1);
  {
    try {
      result = (Gambit::PureStrategyProfile *)new Gambit::PureStrategyProfile((Gambit::Game const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PureStrategyProfile, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PureStrategyProfile_GetStrategy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PureStrategyProfile *arg1 = (Gambit::PureStrategyProfile *) 0 ;
  int arg2 ;
  Gambit::GameStrategy *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PureStrategyProfile_GetStrategy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PureStrategyProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PureStrategyProfile_GetStrategy" "', argument " "1"" of type '" "Gambit::PureStrategyProfile const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PureStrategyProfile * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PureStrategyProfile_GetStrategy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      {
        Gambit::GameStrategy const &_result_ref = ((Gambit::PureStrategyProfile const *)arg1)->GetStrategy(arg2);
        result = (Gambit::GameStrategy *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PureStrategyProfile_GetStrategy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PureStrategyProfile *arg1 = (Gambit::PureStrategyProfile *) 0 ;
  Gambit::GamePlayer *arg2 = 0 ;
  Gambit::GameStrategy *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PureStrategyProfile_GetStrategy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PureStrategyProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PureStrategyProfile_GetStrategy" "', argument " "1"" of type '" "Gambit::PureStrategyProfile const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PureStrategyProfile * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PureStrategyProfile_GetStrategy" "', argument " "2"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PureStrategyProfile_GetStrategy" "', argument " "2"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GamePlayer * >(argp2);
  {
    try {
      {
        Gambit::GameStrategy const &_result_ref = ((Gambit::PureStrategyProfile const *)arg1)->GetStrategy((Gambit::GamePlayer const &)*arg2);
        result = (Gambit::GameStrategy *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PureStrategyProfile_GetStrategy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__PureStrategyProfile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PureStrategyProfile_GetStrategy__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__PureStrategyProfile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PureStrategyProfile_GetStrategy__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PureStrategyProfile_GetStrategy'.\n  Possible C/C++ prototypes are:\n    GetStrategy(int)\n    GetStrategy(Gambit::GamePlayer const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PureStrategyProfile_SetStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PureStrategyProfile *arg1 = (Gambit::PureStrategyProfile *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PureStrategyProfile_SetStrategy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PureStrategyProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PureStrategyProfile_SetStrategy" "', argument " "1"" of type '" "Gambit::PureStrategyProfile *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PureStrategyProfile * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PureStrategyProfile_SetStrategy" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PureStrategyProfile_SetStrategy" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  {
    try {
      (arg1)->SetStrategy((Gambit::GameStrategy const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PureStrategyProfile_GetOutcome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PureStrategyProfile *arg1 = (Gambit::PureStrategyProfile *) 0 ;
  Gambit::GameOutcome result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PureStrategyProfile_GetOutcome",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PureStrategyProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PureStrategyProfile_GetOutcome" "', argument " "1"" of type '" "Gambit::PureStrategyProfile const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PureStrategyProfile * >(argp1);
  {
    try {
      result = ((Gambit::PureStrategyProfile const *)arg1)->GetOutcome();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameOutcome(static_cast< const Gambit::GameOutcome& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PureStrategyProfile_SetOutcome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PureStrategyProfile *arg1 = (Gambit::PureStrategyProfile *) 0 ;
  Gambit::GameOutcome arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PureStrategyProfile_SetOutcome",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PureStrategyProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PureStrategyProfile_SetOutcome" "', argument " "1"" of type '" "Gambit::PureStrategyProfile *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PureStrategyProfile * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PureStrategyProfile_SetOutcome" "', argument " "2"" of type '" "Gambit::GameOutcome""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PureStrategyProfile_SetOutcome" "', argument " "2"" of type '" "Gambit::GameOutcome""'");
    } else {
      Gambit::GameOutcome * temp = reinterpret_cast< Gambit::GameOutcome * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->SetOutcome(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PureStrategyProfile_GetPayoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PureStrategyProfile *arg1 = (Gambit::PureStrategyProfile *) 0 ;
  Gambit::GamePlayer *arg2 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PureStrategyProfile_GetPayoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PureStrategyProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PureStrategyProfile_GetPayoff" "', argument " "1"" of type '" "Gambit::PureStrategyProfile const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PureStrategyProfile * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PureStrategyProfile_GetPayoff" "', argument " "2"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PureStrategyProfile_GetPayoff" "', argument " "2"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GamePlayer * >(argp2);
  {
    try {
      result = Gambit_PureStrategyProfile_GetPayoff((Gambit::PureStrategyProfile const *)arg1,(Gambit::GameObjectPtr<Gambit::GamePlayerRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PureStrategyProfile_GetStrategyValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PureStrategyProfile *arg1 = (Gambit::PureStrategyProfile *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PureStrategyProfile_GetStrategyValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PureStrategyProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PureStrategyProfile_GetStrategyValue" "', argument " "1"" of type '" "Gambit::PureStrategyProfile const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PureStrategyProfile * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PureStrategyProfile_GetStrategyValue" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PureStrategyProfile_GetStrategyValue" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  {
    try {
      result = Gambit_PureStrategyProfile_GetStrategyValue((Gambit::PureStrategyProfile const *)arg1,(Gambit::GameObjectPtr<Gambit::GameStrategyRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PureStrategyProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PureStrategyProfile *arg1 = (Gambit::PureStrategyProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PureStrategyProfile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PureStrategyProfile, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PureStrategyProfile" "', argument " "1"" of type '" "Gambit::PureStrategyProfile *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PureStrategyProfile * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PureStrategyProfile_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__PureStrategyProfile, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PureBehavProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Game arg1 ;
  Gambit::PureBehavProfile *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PureBehavProfile",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PureBehavProfile" "', argument " "1"" of type '" "Gambit::Game""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PureBehavProfile" "', argument " "1"" of type '" "Gambit::Game""'");
    } else {
      Gambit::Game * temp = reinterpret_cast< Gambit::Game * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (Gambit::PureBehavProfile *)new Gambit::PureBehavProfile(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PureBehavProfile, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PureBehavProfile_GetAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PureBehavProfile *arg1 = (Gambit::PureBehavProfile *) 0 ;
  Gambit::GameInfoset *arg2 = 0 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PureBehavProfile_GetAction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PureBehavProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PureBehavProfile_GetAction" "', argument " "1"" of type '" "Gambit::PureBehavProfile const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PureBehavProfile * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PureBehavProfile_GetAction" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PureBehavProfile_GetAction" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfoset * >(argp2);
  {
    try {
      result = ((Gambit::PureBehavProfile const *)arg1)->GetAction((Gambit::GameInfoset const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PureBehavProfile_SetAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PureBehavProfile *arg1 = (Gambit::PureBehavProfile *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PureBehavProfile_SetAction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PureBehavProfile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PureBehavProfile_SetAction" "', argument " "1"" of type '" "Gambit::PureBehavProfile *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PureBehavProfile * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PureBehavProfile_SetAction" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PureBehavProfile_SetAction" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      (arg1)->SetAction((Gambit::GameAction const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PureBehavProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::PureBehavProfile *arg1 = (Gambit::PureBehavProfile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PureBehavProfile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__PureBehavProfile, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PureBehavProfile" "', argument " "1"" of type '" "Gambit::PureBehavProfile *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::PureBehavProfile * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PureBehavProfile_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__PureBehavProfile, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GameRep__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GameRep")) SWIG_fail;
  {
    try {
      result = (Gambit::GameRep *)new Gambit::GameRep();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameRep, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameRep__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<int > *arg1 = 0 ;
  Gambit::GameRep *result = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameRep",&obj0)) SWIG_fail;
  {
    int i;
    if (!PySequence_Check(obj0)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      return NULL;
    }
    arg1 = new Array<int>(PySequence_Length(obj0));
    for (i = 0; i < PySequence_Length(obj0); i++) {
      PyObject *o = PySequence_GetItem(obj0, i);
      if (PyNumber_Check(o)) {
        (*arg1)[i+1] = (int) PyInt_AsLong(o);
      }
      else {
        PyErr_SetString(PyExc_ValueError, "Sequence elements must be numbers");
        return NULL;
      }
    }
  }
  {
    try {
      result = (Gambit::GameRep *)new Gambit::GameRep((Gambit::Array<int > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameRep, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameRep(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GameRep__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__ArrayTint_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GameRep__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_GameRep'.\n  Possible C/C++ prototypes are:\n    Gambit::GameRep()\n    Gambit::GameRep(Gambit::Array<int > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GameRep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GameRep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GameRep" "', argument " "1"" of type '" "Gambit::GameRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_Copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_Copy" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->Copy();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_IsTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_IsTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_IsTree" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = (bool)((Gambit::GameRep const *)arg1)->IsTree();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_GetTitle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_GetTitle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_GetTitle" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((Gambit::GameRep const *)arg1)->GetTitle();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_SetTitle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameRep_SetTitle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_SetTitle" "', argument " "1"" of type '" "Gambit::GameRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameRep_SetTitle" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameRep_SetTitle" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->SetTitle((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_GetComment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_GetComment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_GetComment" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((Gambit::GameRep const *)arg1)->GetComment();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_SetComment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameRep_SetComment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_SetComment" "', argument " "1"" of type '" "Gambit::GameRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameRep_SetComment" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameRep_SetComment" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->SetComment((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_IsConstSum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_IsConstSum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_IsConstSum" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = (bool)((Gambit::GameRep const *)arg1)->IsConstSum();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_GetMinPayoff__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  int arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameRep_GetMinPayoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_GetMinPayoff" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameRep_GetMinPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->GetMinPayoff(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_GetMinPayoff__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_GetMinPayoff",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_GetMinPayoff" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->GetMinPayoff();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_GetMinPayoff(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GameRep_GetMinPayoff__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GameRep_GetMinPayoff__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameRep_GetMinPayoff'.\n  Possible C/C++ prototypes are:\n    GetMinPayoff(int)\n    GetMinPayoff()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_GetMaxPayoff__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  int arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameRep_GetMaxPayoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_GetMaxPayoff" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameRep_GetMaxPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->GetMaxPayoff(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_GetMaxPayoff__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_GetMaxPayoff",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_GetMaxPayoff" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->GetMaxPayoff();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_GetMaxPayoff(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GameRep_GetMaxPayoff__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GameRep_GetMaxPayoff__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameRep_GetMaxPayoff'.\n  Possible C/C++ prototypes are:\n    GetMaxPayoff(int)\n    GetMaxPayoff()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_IsPerfectRecall__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  Gambit::GameInfoset *arg2 = 0 ;
  Gambit::GameInfoset *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GameRep_IsPerfectRecall",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_IsPerfectRecall" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameRep_IsPerfectRecall" "', argument " "2"" of type '" "Gambit::GameInfoset &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameRep_IsPerfectRecall" "', argument " "2"" of type '" "Gambit::GameInfoset &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfoset * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GameRep_IsPerfectRecall" "', argument " "3"" of type '" "Gambit::GameInfoset &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameRep_IsPerfectRecall" "', argument " "3"" of type '" "Gambit::GameInfoset &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GameInfoset * >(argp3);
  {
    try {
      result = (bool)((Gambit::GameRep const *)arg1)->IsPerfectRecall(*arg2,*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_IsPerfectRecall__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_IsPerfectRecall",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_IsPerfectRecall" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = (bool)((Gambit::GameRep const *)arg1)->IsPerfectRecall();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_IsPerfectRecall(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GameRep_IsPerfectRecall__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GameRep_IsPerfectRecall__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameRep_IsPerfectRecall'.\n  Possible C/C++ prototypes are:\n    IsPerfectRecall(Gambit::GameInfoset &,Gambit::GameInfoset &)\n    IsPerfectRecall()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_Canonicalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_Canonicalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_Canonicalize" "', argument " "1"" of type '" "Gambit::GameRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      (arg1)->Canonicalize();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_ClearComputedValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_ClearComputedValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_ClearComputedValues" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      ((Gambit::GameRep const *)arg1)->ClearComputedValues();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_BuildComputedValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_BuildComputedValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_BuildComputedValues" "', argument " "1"" of type '" "Gambit::GameRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      (arg1)->BuildComputedValues();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_HasComputedValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_HasComputedValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_HasComputedValues" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = (bool)((Gambit::GameRep const *)arg1)->HasComputedValues();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_WriteEfgFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameRep_WriteEfgFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_WriteEfgFile" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameRep_WriteEfgFile" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameRep_WriteEfgFile" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((Gambit::GameRep const *)arg1)->WriteEfgFile(*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_WriteEfgFile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  std::ostream *arg2 = 0 ;
  Gambit::GameNode *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GameRep_WriteEfgFile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_WriteEfgFile" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameRep_WriteEfgFile" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameRep_WriteEfgFile" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GameRep_WriteEfgFile" "', argument " "3"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameRep_WriteEfgFile" "', argument " "3"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GameNode * >(argp3);
  {
    try {
      ((Gambit::GameRep const *)arg1)->WriteEfgFile(*arg2,(Gambit::GameNode const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_WriteEfgFile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameRep_WriteEfgFile__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GameRep_WriteEfgFile__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameRep_WriteEfgFile'.\n  Possible C/C++ prototypes are:\n    WriteEfgFile(std::ostream &)\n    WriteEfgFile(std::ostream &,Gambit::GameNode const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_WriteNfgFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameRep_WriteNfgFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_WriteNfgFile" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameRep_WriteNfgFile" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameRep_WriteNfgFile" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      ((Gambit::GameRep const *)arg1)->WriteNfgFile(*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_NumActions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  SwigValueWrapper<Gambit::PVector<int > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_NumActions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_NumActions" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->NumActions();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::PVector<int >(static_cast< const Gambit::PVector<int >& >(result))), SWIGTYPE_p_Gambit__PVectorTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_NumMembers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  SwigValueWrapper<Gambit::PVector<int > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_NumMembers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_NumMembers" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->NumMembers();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::PVector<int >(static_cast< const Gambit::PVector<int >& >(result))), SWIGTYPE_p_Gambit__PVectorTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_NumStrategies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  SwigValueWrapper<Gambit::Array<int > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_NumStrategies",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_NumStrategies" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->NumStrategies();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Array<int >(static_cast< const Gambit::Array<int >& >(result))), SWIGTYPE_p_Gambit__ArrayTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_GetStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  int arg2 ;
  Gambit::GameStrategy result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameRep_GetStrategy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_GetStrategy" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameRep_GetStrategy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->GetStrategy(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameStrategy(static_cast< const Gambit::GameStrategy& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_BehavProfileLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_BehavProfileLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_BehavProfileLength" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GameRep const *)arg1)->BehavProfileLength();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_MixedProfileLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_MixedProfileLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_MixedProfileLength" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GameRep const *)arg1)->MixedProfileLength();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_NumPlayers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_NumPlayers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_NumPlayers" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GameRep const *)arg1)->NumPlayers();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_GetPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  int arg2 ;
  Gambit::GamePlayer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameRep_GetPlayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_GetPlayer" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameRep_GetPlayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->GetPlayer(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayer(static_cast< const Gambit::GamePlayer& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_Players(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  SwigValueWrapper<Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GameObjectPtr<Gambit::GamePlayerRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_Players",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_Players" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->Players();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayerIterator(static_cast< const Gambit::GamePlayerIterator& >(result))), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_GetChance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  Gambit::GamePlayer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_GetChance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_GetChance" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->GetChance();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayer(static_cast< const Gambit::GamePlayer& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_NewPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  Gambit::GamePlayer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_NewPlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_NewPlayer" "', argument " "1"" of type '" "Gambit::GameRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = (arg1)->NewPlayer();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayer(static_cast< const Gambit::GamePlayer& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_GetInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  int arg2 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameRep_GetInfoset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_GetInfoset" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameRep_GetInfoset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->GetInfoset(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_NumInfosets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  SwigValueWrapper<Gambit::Array<int > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_NumInfosets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_NumInfosets" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->NumInfosets();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Array<int >(static_cast< const Gambit::Array<int >& >(result))), SWIGTYPE_p_Gambit__ArrayTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_GetAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  int arg2 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameRep_GetAction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_GetAction" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameRep_GetAction" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->GetAction(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_NumOutcomes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_NumOutcomes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_NumOutcomes" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GameRep const *)arg1)->NumOutcomes();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_GetOutcome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  int arg2 ;
  Gambit::GameOutcome result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameRep_GetOutcome",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_GetOutcome" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameRep_GetOutcome" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->GetOutcome(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameOutcome(static_cast< const Gambit::GameOutcome& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_NewOutcome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  Gambit::GameOutcome result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_NewOutcome",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_NewOutcome" "', argument " "1"" of type '" "Gambit::GameRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = (arg1)->NewOutcome();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameOutcome(static_cast< const Gambit::GameOutcome& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_DeleteOutcome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  Gambit::GameOutcome *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameRep_DeleteOutcome",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_DeleteOutcome" "', argument " "1"" of type '" "Gambit::GameRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameRep_DeleteOutcome" "', argument " "2"" of type '" "Gambit::GameOutcome const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameRep_DeleteOutcome" "', argument " "2"" of type '" "Gambit::GameOutcome const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameOutcome * >(argp2);
  {
    try {
      (arg1)->DeleteOutcome((Gambit::GameOutcome const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_GetRoot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  Gambit::GameNode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_GetRoot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_GetRoot" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = ((Gambit::GameRep const *)arg1)->GetRoot();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameNode(static_cast< const Gambit::GameNode& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_NumNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_NumNodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_NumNodes" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = (int)((Gambit::GameRep const *)arg1)->NumNodes();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_efg_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_efg_file",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_efg_file" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = Gambit_GameRep_efg_file((Gambit::GameRep const *)arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_nfg_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_nfg_file",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_nfg_file" "', argument " "1"" of type '" "Gambit::GameRep const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = Gambit_GameRep_nfg_file((Gambit::GameRep const *)arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_NewMixedStrategyDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  SwigValueWrapper<Gambit::MixedStrategyProfile<double > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_NewMixedStrategyDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_NewMixedStrategyDouble" "', argument " "1"" of type '" "Gambit::GameRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = Gambit_GameRep_NewMixedStrategyDouble(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::MixedStrategyProfile<double >(static_cast< const Gambit::MixedStrategyProfile<double >& >(result))), SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_NewMixedStrategyRational(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  SwigValueWrapper<Gambit::MixedStrategyProfile<Gambit::Rational > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_NewMixedStrategyRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_NewMixedStrategyRational" "', argument " "1"" of type '" "Gambit::GameRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = Gambit_GameRep_NewMixedStrategyRational(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::MixedStrategyProfile<Gambit::Rational >(static_cast< const Gambit::MixedStrategyProfile<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_NewMixedBehavDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  SwigValueWrapper<Gambit::MixedBehavProfile<double > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_NewMixedBehavDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_NewMixedBehavDouble" "', argument " "1"" of type '" "Gambit::GameRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = Gambit_GameRep_NewMixedBehavDouble(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::MixedBehavProfile<double >(static_cast< const Gambit::MixedBehavProfile<double >& >(result))), SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameRep_NewMixedBehavRational(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  SwigValueWrapper<Gambit::MixedBehavProfile<Gambit::Rational > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameRep_NewMixedBehavRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameRep_NewMixedBehavRational" "', argument " "1"" of type '" "Gambit::GameRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = Gambit_GameRep_NewMixedBehavRational(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::MixedBehavProfile<Gambit::Rational >(static_cast< const Gambit::MixedBehavProfile<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameRep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameRep, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NewTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Game result;
  
  if (!PyArg_ParseTuple(args,(char *)":NewTree")) SWIG_fail;
  {
    try {
      result = Gambit::NewTree();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<int > *arg1 = 0 ;
  Gambit::Game result;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NewTable",&obj0)) SWIG_fail;
  {
    int i;
    if (!PySequence_Check(obj0)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      return NULL;
    }
    arg1 = new Array<int>(PySequence_Length(obj0));
    for (i = 0; i < PySequence_Length(obj0); i++) {
      PyObject *o = PySequence_GetItem(obj0, i);
      if (PyNumber_Check(o)) {
        (*arg1)[i+1] = (int) PyInt_AsLong(o);
      }
      else {
        PyErr_SetString(PyExc_ValueError, "Sequence elements must be numbers");
        return NULL;
      }
    }
  }
  {
    try {
      result = Gambit::NewTable((Gambit::Array<int > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ReadGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReadGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_istreamTchar_std__char_traitsTchar_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadGame" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReadGame" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  {
    try {
      try {
        result = Gambit::ReadGame(*arg1);
      }
      catch(Gambit::InvalidFileException &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new Gambit::InvalidFileException(static_cast< const Gambit::InvalidFileException& >(_e))),SWIGTYPE_p_Gambit__InvalidFileException,SWIG_POINTER_OWN), "Gambit::InvalidFileException", SWIGTYPE_p_Gambit__InvalidFileException); SWIG_fail;
      }
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameOutcome__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameOutcomeRep *arg1 = (Gambit::GameOutcomeRep *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameOutcome",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameOutcomeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GameOutcome" "', argument " "1"" of type '" "Gambit::GameOutcomeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameOutcomeRep * >(argp1);
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *)new Gambit::GameObjectPtr<Gambit::GameOutcomeRep >(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameOutcome__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GameOutcome")) SWIG_fail;
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *)new Gambit::GameObjectPtr<Gambit::GameOutcomeRep >();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameOutcome__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = 0 ;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameOutcome",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GameOutcome" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GameOutcome" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *)new Gambit::GameObjectPtr<Gambit::GameOutcomeRep >((Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameOutcome(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GameOutcome__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameOutcomeRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GameOutcome__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GameOutcome__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_GameOutcome'.\n  Possible C/C++ prototypes are:\n    Gambit::GameObjectPtr<(Gambit::GameOutcomeRep)>(Gambit::GameOutcomeRep *)\n    Gambit::GameObjectPtr<(Gambit::GameOutcomeRep)>()\n    Gambit::GameObjectPtr<(Gambit::GameOutcomeRep)>(Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GameOutcome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GameOutcome",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GameOutcome" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  Gambit::GameOutcomeRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameOutcome___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome___deref__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  {
    try {
      result = (Gambit::GameOutcomeRep *)((Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *)arg1)->operator ->();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameOutcomeRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameOutcome___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome___eq__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameOutcome___eq__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameOutcome___eq__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *)arg1)->operator ==((Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  Gambit::GameOutcomeRep *arg2 = (Gambit::GameOutcomeRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameOutcome___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome___eq__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__GameOutcomeRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameOutcome___eq__" "', argument " "2"" of type '" "Gambit::GameOutcomeRep *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameOutcomeRep * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *)arg1)->operator ==(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameOutcome___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GameOutcomeRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameOutcome___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_GameOutcome___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameOutcome___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome___ne__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameOutcome___ne__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameOutcome___ne__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *)arg1)->operator !=((Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  Gambit::GameOutcomeRep *arg2 = (Gambit::GameOutcomeRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameOutcome___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome___ne__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__GameOutcomeRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameOutcome___ne__" "', argument " "2"" of type '" "Gambit::GameOutcomeRep *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameOutcomeRep * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *)arg1)->operator !=(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameOutcome___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GameOutcomeRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameOutcome___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_GameOutcome_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameOutcome_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome_GetGame" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameOutcome_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome_GetNumber" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameOutcome_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome_GetLabel" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = (*arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameOutcome_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome_SetLabel" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameOutcome_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameOutcome_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome_SetPayoff__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GameOutcome_SetPayoff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome_SetPayoff" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameOutcome_SetPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GameOutcome_SetPayoff" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameOutcome_SetPayoff" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (*arg1)->SetPayoff(arg2,(std::string const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome_SetPayoff__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  int arg2 ;
  Gambit::Rational *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GameOutcome_SetPayoff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome_SetPayoff" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameOutcome_SetPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GameOutcome_SetPayoff" "', argument " "3"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameOutcome_SetPayoff" "', argument " "3"" of type '" "Gambit::Rational const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::Rational * >(argp3);
  {
    try {
      Gambit_GameOutcomeRep_SetPayoff__SWIG_1((Gambit::GameOutcomeRep*)(arg1)->operator ->(),arg2,(Gambit::Rational const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome_SetPayoff__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GameOutcome_SetPayoff",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome_SetPayoff" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameOutcome_SetPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GameOutcome_SetPayoff" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      Gambit_GameOutcomeRep_SetPayoff__SWIG_2((Gambit::GameOutcomeRep*)(arg1)->operator ->(),arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome_SetPayoff(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gambit__Rational, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GameOutcome_SetPayoff__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GameOutcome_SetPayoff__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GameOutcome_SetPayoff__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameOutcome_SetPayoff'.\n  Possible C/C++ prototypes are:\n    SetPayoff(int,std::string const &)\n    SetPayoff(int,Gambit::Rational const &)\n    SetPayoff(int,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome_GetPayoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  int arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameOutcome_GetPayoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome_GetPayoff" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameOutcome_GetPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = Gambit_GameOutcomeRep_GetPayoff((Gambit::GameOutcomeRep*)(arg1)->operator ->(),arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameOutcome_IsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome_IsValid" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsValid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome_Invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameOutcome_Invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome_Invalidate" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  {
    try {
      (*arg1)->Invalidate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome_IncRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameOutcome_IncRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome_IncRef" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  {
    try {
      (*arg1)->IncRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome_DecRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameOutcome_DecRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome_DecRef" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  {
    try {
      (*arg1)->DecRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameOutcome_RefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameOutcome_RefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameOutcome_RefCount" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameOutcomeRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->RefCount();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameOutcome_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GameStrategy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameStrategyRep *arg1 = (Gambit::GameStrategyRep *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameStrategy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameStrategyRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GameStrategy" "', argument " "1"" of type '" "Gambit::GameStrategyRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameStrategyRep * >(argp1);
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *)new Gambit::GameObjectPtr<Gambit::GameStrategyRep >(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameStrategy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GameStrategy")) SWIG_fail;
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *)new Gambit::GameObjectPtr<Gambit::GameStrategyRep >();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameStrategy__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = 0 ;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameStrategy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GameStrategy" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GameStrategy" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *)new Gambit::GameObjectPtr<Gambit::GameStrategyRep >((Gambit::GameObjectPtr<Gambit::GameStrategyRep > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameStrategy(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GameStrategy__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameStrategyRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GameStrategy__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GameStrategy__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_GameStrategy'.\n  Possible C/C++ prototypes are:\n    Gambit::GameObjectPtr<(Gambit::GameStrategyRep)>(Gambit::GameStrategyRep *)\n    Gambit::GameObjectPtr<(Gambit::GameStrategyRep)>()\n    Gambit::GameObjectPtr<(Gambit::GameStrategyRep)>(Gambit::GameObjectPtr<Gambit::GameStrategyRep > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GameStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GameStrategy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GameStrategy" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  Gambit::GameStrategyRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategy___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy___deref__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  {
    try {
      result = (Gambit::GameStrategyRep *)((Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *)arg1)->operator ->();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameStrategyRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameStrategy___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy___eq__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameStrategy___eq__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameStrategy___eq__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *)arg1)->operator ==((Gambit::GameObjectPtr<Gambit::GameStrategyRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  Gambit::GameStrategyRep *arg2 = (Gambit::GameStrategyRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameStrategy___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy___eq__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__GameStrategyRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameStrategy___eq__" "', argument " "2"" of type '" "Gambit::GameStrategyRep *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategyRep * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *)arg1)->operator ==(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameStrategy___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GameStrategyRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameStrategy___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_GameStrategy___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameStrategy___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy___ne__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameStrategy___ne__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameStrategy___ne__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *)arg1)->operator !=((Gambit::GameObjectPtr<Gambit::GameStrategyRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  Gambit::GameStrategyRep *arg2 = (Gambit::GameStrategyRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameStrategy___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy___ne__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__GameStrategyRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameStrategy___ne__" "', argument " "2"" of type '" "Gambit::GameStrategyRep *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategyRep * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *)arg1)->operator !=(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameStrategy___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GameStrategyRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameStrategy___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_GameStrategy_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategy_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy_GetLabel" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = (*arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameStrategy_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy_SetLabel" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameStrategy_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameStrategy_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy_GetPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  Gambit::GamePlayer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategy_GetPlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy_GetPlayer" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetPlayer();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayer(static_cast< const Gambit::GamePlayer& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategy_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy_GetNumber" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy_GetId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategy_GetId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy_GetId" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetId();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy_DeleteStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategy_DeleteStrategy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy_DeleteStrategy" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  {
    try {
      (*arg1)->DeleteStrategy();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategy_IsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy_IsValid" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsValid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy_Invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategy_Invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy_Invalidate" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  {
    try {
      (*arg1)->Invalidate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy_IncRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategy_IncRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy_IncRef" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  {
    try {
      (*arg1)->IncRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy_DecRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategy_DecRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy_DecRef" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  {
    try {
      (*arg1)->DecRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategy_RefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameStrategyRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategy_RefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategy_RefCount" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameStrategyRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameStrategyRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->RefCount();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameStrategy_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GameAction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameActionRep *arg1 = (Gambit::GameActionRep *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameAction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameActionRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GameAction" "', argument " "1"" of type '" "Gambit::GameActionRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameActionRep * >(argp1);
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameActionRep > *)new Gambit::GameObjectPtr<Gambit::GameActionRep >(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameAction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GameAction")) SWIG_fail;
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameActionRep > *)new Gambit::GameObjectPtr<Gambit::GameActionRep >();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameAction__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = 0 ;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameAction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GameAction" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GameAction" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameActionRep > *)new Gambit::GameObjectPtr<Gambit::GameActionRep >((Gambit::GameObjectPtr<Gambit::GameActionRep > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameAction(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GameAction__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameActionRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GameAction__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GameAction__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_GameAction'.\n  Possible C/C++ prototypes are:\n    Gambit::GameObjectPtr<(Gambit::GameActionRep)>(Gambit::GameActionRep *)\n    Gambit::GameObjectPtr<(Gambit::GameActionRep)>()\n    Gambit::GameObjectPtr<(Gambit::GameActionRep)>(Gambit::GameObjectPtr<Gambit::GameActionRep > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GameAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GameAction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GameAction" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  Gambit::GameActionRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameAction___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction___deref__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  {
    try {
      result = (Gambit::GameActionRep *)((Gambit::GameObjectPtr<Gambit::GameActionRep > const *)arg1)->operator ->();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameActionRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameAction___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction___eq__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameAction___eq__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameAction___eq__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameActionRep > const *)arg1)->operator ==((Gambit::GameObjectPtr<Gambit::GameActionRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  Gambit::GameActionRep *arg2 = (Gambit::GameActionRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameAction___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction___eq__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__GameActionRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameAction___eq__" "', argument " "2"" of type '" "Gambit::GameActionRep *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameActionRep * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameActionRep > const *)arg1)->operator ==(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameAction___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GameActionRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameAction___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_GameAction___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameAction___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction___ne__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameAction___ne__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameAction___ne__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameActionRep > const *)arg1)->operator !=((Gambit::GameObjectPtr<Gambit::GameActionRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  Gambit::GameActionRep *arg2 = (Gambit::GameActionRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameAction___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction___ne__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__GameActionRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameAction___ne__" "', argument " "2"" of type '" "Gambit::GameActionRep *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameActionRep * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameActionRep > const *)arg1)->operator !=(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameAction___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GameActionRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameAction___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_GameAction_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameAction_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction_GetNumber" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction_GetInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameAction_GetInfoset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction_GetInfoset" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetInfoset();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameAction_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction_GetLabel" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = (*arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameAction_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction_SetLabel" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameAction_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameAction_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction_Precedes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameAction_Precedes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction_Precedes" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameAction_Precedes" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameAction_Precedes" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  {
    try {
      result = (bool)(*arg1)->Precedes((Gambit::GameNode const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction_DeleteAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameAction_DeleteAction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction_DeleteAction" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  {
    try {
      (*arg1)->DeleteAction();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameAction_IsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction_IsValid" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsValid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction_Invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameAction_Invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction_Invalidate" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  {
    try {
      (*arg1)->Invalidate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction_IncRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameAction_IncRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction_IncRef" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  {
    try {
      (*arg1)->IncRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction_DecRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameAction_DecRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction_DecRef" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  {
    try {
      (*arg1)->DecRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameAction_RefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameActionRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameActionRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameAction_RefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameAction_RefCount" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameActionRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameActionRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->RefCount();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameAction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GameInfoset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameInfosetRep *arg1 = (Gambit::GameInfosetRep *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameInfoset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GameInfoset" "', argument " "1"" of type '" "Gambit::GameInfosetRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameInfosetRep * >(argp1);
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *)new Gambit::GameObjectPtr<Gambit::GameInfosetRep >(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameInfoset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GameInfoset")) SWIG_fail;
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *)new Gambit::GameObjectPtr<Gambit::GameInfosetRep >();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameInfoset__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = 0 ;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameInfoset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GameInfoset" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GameInfoset" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *)new Gambit::GameObjectPtr<Gambit::GameInfosetRep >((Gambit::GameObjectPtr<Gambit::GameInfosetRep > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameInfoset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GameInfoset__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameInfosetRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GameInfoset__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GameInfoset__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_GameInfoset'.\n  Possible C/C++ prototypes are:\n    Gambit::GameObjectPtr<(Gambit::GameInfosetRep)>(Gambit::GameInfosetRep *)\n    Gambit::GameObjectPtr<(Gambit::GameInfosetRep)>()\n    Gambit::GameObjectPtr<(Gambit::GameInfosetRep)>(Gambit::GameObjectPtr<Gambit::GameInfosetRep > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GameInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GameInfoset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GameInfoset" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  Gambit::GameInfosetRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfoset___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset___deref__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      result = (Gambit::GameInfosetRep *)((Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *)arg1)->operator ->();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfoset___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset___eq__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfoset___eq__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfoset___eq__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *)arg1)->operator ==((Gambit::GameObjectPtr<Gambit::GameInfosetRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  Gambit::GameInfosetRep *arg2 = (Gambit::GameInfosetRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfoset___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset___eq__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfoset___eq__" "', argument " "2"" of type '" "Gambit::GameInfosetRep *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfosetRep * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *)arg1)->operator ==(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameInfoset___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GameInfosetRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameInfoset___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_GameInfoset___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfoset___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset___ne__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfoset___ne__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfoset___ne__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *)arg1)->operator !=((Gambit::GameObjectPtr<Gambit::GameInfosetRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  Gambit::GameInfosetRep *arg2 = (Gambit::GameInfosetRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfoset___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset___ne__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__GameInfosetRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfoset___ne__" "', argument " "2"" of type '" "Gambit::GameInfosetRep *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfosetRep * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *)arg1)->operator !=(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameInfoset___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GameInfosetRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameInfoset___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_GameInfoset_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfoset_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_GetGame" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfoset_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_GetNumber" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_GetPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  Gambit::GamePlayer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfoset_GetPlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_GetPlayer" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetPlayer();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayer(static_cast< const Gambit::GamePlayer& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_SetPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  Gambit::GamePlayer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfoset_SetPlayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_SetPlayer" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfoset_SetPlayer" "', argument " "2"" of type '" "Gambit::GamePlayer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfoset_SetPlayer" "', argument " "2"" of type '" "Gambit::GamePlayer""'");
    } else {
      Gambit::GamePlayer * temp = reinterpret_cast< Gambit::GamePlayer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetPlayer(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_IsChanceInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfoset_IsChanceInfoset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_IsChanceInfoset" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsChanceInfoset();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfoset_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_SetLabel" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfoset_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfoset_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfoset_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_GetLabel" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = (*arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_InsertAction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  Gambit::GameAction arg2 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfoset_InsertAction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_InsertAction" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfoset_InsertAction" "', argument " "2"" of type '" "Gambit::GameAction""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfoset_InsertAction" "', argument " "2"" of type '" "Gambit::GameAction""'");
    } else {
      Gambit::GameAction * temp = reinterpret_cast< Gambit::GameAction * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->InsertAction(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_InsertAction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfoset_InsertAction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_InsertAction" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      result = (*arg1)->InsertAction();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_InsertAction(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GameInfoset_InsertAction__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameInfoset_InsertAction__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameInfoset_InsertAction'.\n  Possible C/C++ prototypes are:\n    InsertAction(Gambit::GameAction)\n    InsertAction()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_NumActions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfoset_NumActions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_NumActions" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->NumActions();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_GetAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  int arg2 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfoset_GetAction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_GetAction" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameInfoset_GetAction" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetAction(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_Actions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  SwigValueWrapper<Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameObjectPtr<Gambit::GameActionRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfoset_Actions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_Actions" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      result = (*arg1)->Actions();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameActionIterator(static_cast< const Gambit::GameActionIterator& >(result))), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_NumMembers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfoset_NumMembers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_NumMembers" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->NumMembers();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_GetMember(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  int arg2 ;
  Gambit::GameNode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfoset_GetMember",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_GetMember" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameInfoset_GetMember" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetMember(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameNode(static_cast< const Gambit::GameNode& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_Precedes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  Gambit::GameNode arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfoset_Precedes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_Precedes" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfoset_Precedes" "', argument " "2"" of type '" "Gambit::GameNode""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfoset_Precedes" "', argument " "2"" of type '" "Gambit::GameNode""'");
    } else {
      Gambit::GameNode * temp = reinterpret_cast< Gambit::GameNode * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->Precedes(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_SetActionProb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GameInfoset_SetActionProb",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_SetActionProb" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameInfoset_SetActionProb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GameInfoset_SetActionProb" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfoset_SetActionProb" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (*arg1)->SetActionProb(arg2,(std::string const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_Reveal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  Gambit::GamePlayer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfoset_Reveal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_Reveal" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfoset_Reveal" "', argument " "2"" of type '" "Gambit::GamePlayer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfoset_Reveal" "', argument " "2"" of type '" "Gambit::GamePlayer""'");
    } else {
      Gambit::GamePlayer * temp = reinterpret_cast< Gambit::GamePlayer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Reveal(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfoset_IsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_IsValid" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsValid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_Invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfoset_Invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_Invalidate" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      (*arg1)->Invalidate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_IncRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfoset_IncRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_IncRef" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      (*arg1)->IncRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_DecRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfoset_DecRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_DecRef" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      (*arg1)->DecRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfoset_RefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameInfosetRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfoset_RefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfoset_RefCount" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameInfosetRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameInfosetRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->RefCount();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameInfoset_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GameNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameNodeRep *arg1 = (Gambit::GameNodeRep *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GameNode" "', argument " "1"" of type '" "Gambit::GameNodeRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameNodeRep * >(argp1);
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *)new Gambit::GameObjectPtr<Gambit::GameNodeRep >(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GameNode")) SWIG_fail;
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *)new Gambit::GameObjectPtr<Gambit::GameNodeRep >();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameNode__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = 0 ;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GameNode" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GameNode" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *)new Gambit::GameObjectPtr<Gambit::GameNodeRep >((Gambit::GameObjectPtr<Gambit::GameNodeRep > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameNode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GameNode__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameNodeRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GameNode__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GameNode__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_GameNode'.\n  Possible C/C++ prototypes are:\n    Gambit::GameObjectPtr<(Gambit::GameNodeRep)>(Gambit::GameNodeRep *)\n    Gambit::GameObjectPtr<(Gambit::GameNodeRep)>()\n    Gambit::GameObjectPtr<(Gambit::GameNodeRep)>(Gambit::GameObjectPtr<Gambit::GameNodeRep > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GameNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GameNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GameNode" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameNodeRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode___deref__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (Gambit::GameNodeRep *)((Gambit::GameObjectPtr<Gambit::GameNodeRep > const *)arg1)->operator ->();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNode___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode___eq__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNode___eq__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNode___eq__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameNodeRep > const *)arg1)->operator ==((Gambit::GameObjectPtr<Gambit::GameNodeRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameNodeRep *arg2 = (Gambit::GameNodeRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNode___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode___eq__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNode___eq__" "', argument " "2"" of type '" "Gambit::GameNodeRep *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNodeRep * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameNodeRep > const *)arg1)->operator ==(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameNode___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GameNodeRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameNode___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_GameNode___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNode___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode___ne__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNode___ne__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNode___ne__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameNodeRep > const *)arg1)->operator !=((Gambit::GameObjectPtr<Gambit::GameNodeRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameNodeRep *arg2 = (Gambit::GameNodeRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNode___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode___ne__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__GameNodeRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNode___ne__" "', argument " "2"" of type '" "Gambit::GameNodeRep *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNodeRep * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameNodeRep > const *)arg1)->operator !=(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameNode___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GameNodeRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameNode___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_GameNode_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_GetGame" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_GetLabel" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = (*arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNode_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_SetLabel" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNode_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNode_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_GetNumber" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_NumberInInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_NumberInInfoset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_NumberInInfoset" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->NumberInInfoset();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_NumChildren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_NumChildren",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_NumChildren" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->NumChildren();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_GetInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_GetInfoset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_GetInfoset" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetInfoset();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_SetInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameInfoset arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNode_SetInfoset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_SetInfoset" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNode_SetInfoset" "', argument " "2"" of type '" "Gambit::GameInfoset""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNode_SetInfoset" "', argument " "2"" of type '" "Gambit::GameInfoset""'");
    } else {
      Gambit::GameInfoset * temp = reinterpret_cast< Gambit::GameInfoset * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetInfoset(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_LeaveInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_LeaveInfoset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_LeaveInfoset" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (*arg1)->LeaveInfoset();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_IsTerminal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_IsTerminal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_IsTerminal" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsTerminal();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_GetPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GamePlayer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_GetPlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_GetPlayer" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetPlayer();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayer(static_cast< const Gambit::GamePlayer& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_GetPriorAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_GetPriorAction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_GetPriorAction" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetPriorAction();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_GetChild(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  int arg2 ;
  Gambit::GameNode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNode_GetChild",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_GetChild" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameNode_GetChild" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetChild(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameNode(static_cast< const Gambit::GameNode& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_GetParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameNode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_GetParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_GetParent" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetParent();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameNode(static_cast< const Gambit::GameNode& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_GetNextSibling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameNode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_GetNextSibling",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_GetNextSibling" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetNextSibling();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameNode(static_cast< const Gambit::GameNode& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_GetPriorSibling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameNode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_GetPriorSibling",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_GetPriorSibling" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetPriorSibling();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameNode(static_cast< const Gambit::GameNode& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_GetOutcome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameOutcome result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_GetOutcome",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_GetOutcome" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetOutcome();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameOutcome(static_cast< const Gambit::GameOutcome& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_SetOutcome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameOutcome *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNode_SetOutcome",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_SetOutcome" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNode_SetOutcome" "', argument " "2"" of type '" "Gambit::GameOutcome const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNode_SetOutcome" "', argument " "2"" of type '" "Gambit::GameOutcome const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameOutcome * >(argp2);
  {
    try {
      (*arg1)->SetOutcome((Gambit::GameOutcome const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_IsSuccessorOf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameNode arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNode_IsSuccessorOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_IsSuccessorOf" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNode_IsSuccessorOf" "', argument " "2"" of type '" "Gambit::GameNode""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNode_IsSuccessorOf" "', argument " "2"" of type '" "Gambit::GameNode""'");
    } else {
      Gambit::GameNode * temp = reinterpret_cast< Gambit::GameNode * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->IsSuccessorOf(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_IsSubgameRoot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_IsSubgameRoot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_IsSubgameRoot" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsSubgameRoot();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_DeleteParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_DeleteParent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_DeleteParent" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      (*arg1)->DeleteParent();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_DeleteTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_DeleteTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_DeleteTree" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      (*arg1)->DeleteTree();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_CopyTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameNode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNode_CopyTree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_CopyTree" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNode_CopyTree" "', argument " "2"" of type '" "Gambit::GameNode""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNode_CopyTree" "', argument " "2"" of type '" "Gambit::GameNode""'");
    } else {
      Gambit::GameNode * temp = reinterpret_cast< Gambit::GameNode * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->CopyTree(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_MoveTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameNode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNode_MoveTree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_MoveTree" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNode_MoveTree" "', argument " "2"" of type '" "Gambit::GameNode""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNode_MoveTree" "', argument " "2"" of type '" "Gambit::GameNode""'");
    } else {
      Gambit::GameNode * temp = reinterpret_cast< Gambit::GameNode * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->MoveTree(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_AppendMove__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GamePlayer arg2 ;
  int arg3 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GameNode_AppendMove",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_AppendMove" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNode_AppendMove" "', argument " "2"" of type '" "Gambit::GamePlayer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNode_AppendMove" "', argument " "2"" of type '" "Gambit::GamePlayer""'");
    } else {
      Gambit::GamePlayer * temp = reinterpret_cast< Gambit::GamePlayer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GameNode_AppendMove" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (*arg1)->AppendMove(arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_AppendMove__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameInfoset arg2 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNode_AppendMove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_AppendMove" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNode_AppendMove" "', argument " "2"" of type '" "Gambit::GameInfoset""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNode_AppendMove" "', argument " "2"" of type '" "Gambit::GameInfoset""'");
    } else {
      Gambit::GameInfoset * temp = reinterpret_cast< Gambit::GameInfoset * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->AppendMove(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_AppendMove(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameNode_AppendMove__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GameNode_AppendMove__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameNode_AppendMove'.\n  Possible C/C++ prototypes are:\n    AppendMove(Gambit::GamePlayer,int)\n    AppendMove(Gambit::GameInfoset)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_InsertMove__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GamePlayer arg2 ;
  int arg3 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GameNode_InsertMove",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_InsertMove" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNode_InsertMove" "', argument " "2"" of type '" "Gambit::GamePlayer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNode_InsertMove" "', argument " "2"" of type '" "Gambit::GamePlayer""'");
    } else {
      Gambit::GamePlayer * temp = reinterpret_cast< Gambit::GamePlayer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GameNode_InsertMove" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (*arg1)->InsertMove(arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_InsertMove__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  Gambit::GameInfoset arg2 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameNode_InsertMove",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_InsertMove" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameNode_InsertMove" "', argument " "2"" of type '" "Gambit::GameInfoset""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameNode_InsertMove" "', argument " "2"" of type '" "Gambit::GameInfoset""'");
    } else {
      Gambit::GameInfoset * temp = reinterpret_cast< Gambit::GameInfoset * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->InsertMove(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_InsertMove(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameNode_InsertMove__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GameNode_InsertMove__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameNode_InsertMove'.\n  Possible C/C++ prototypes are:\n    InsertMove(Gambit::GamePlayer,int)\n    InsertMove(Gambit::GameInfoset)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_IsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_IsValid" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsValid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_Invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_Invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_Invalidate" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      (*arg1)->Invalidate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_IncRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_IncRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_IncRef" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      (*arg1)->IncRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_DecRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_DecRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_DecRef" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      (*arg1)->DecRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameNode_RefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameNodeRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameNodeRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameNode_RefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameNode_RefCount" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameNodeRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameNodeRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->RefCount();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GamePlayer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GamePlayerRep *arg1 = (Gambit::GamePlayerRep *) 0 ;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GamePlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GamePlayer" "', argument " "1"" of type '" "Gambit::GamePlayerRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GamePlayerRep * >(argp1);
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *)new Gambit::GameObjectPtr<Gambit::GamePlayerRep >(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GamePlayer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GamePlayer")) SWIG_fail;
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *)new Gambit::GameObjectPtr<Gambit::GamePlayerRep >();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GamePlayer__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = 0 ;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GamePlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GamePlayer" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GamePlayer" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *)new Gambit::GameObjectPtr<Gambit::GamePlayerRep >((Gambit::GameObjectPtr<Gambit::GamePlayerRep > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GamePlayer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GamePlayer__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GamePlayerRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GamePlayer__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GamePlayer__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_GamePlayer'.\n  Possible C/C++ prototypes are:\n    Gambit::GameObjectPtr<(Gambit::GamePlayerRep)>(Gambit::GamePlayerRep *)\n    Gambit::GameObjectPtr<(Gambit::GamePlayerRep)>()\n    Gambit::GameObjectPtr<(Gambit::GamePlayerRep)>(Gambit::GameObjectPtr<Gambit::GamePlayerRep > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GamePlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GamePlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GamePlayer" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  Gambit::GamePlayerRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayer___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer___deref__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      result = (Gambit::GamePlayerRep *)((Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *)arg1)->operator ->();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GamePlayer___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer___eq__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePlayer___eq__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePlayer___eq__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *)arg1)->operator ==((Gambit::GameObjectPtr<Gambit::GamePlayerRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  Gambit::GamePlayerRep *arg2 = (Gambit::GamePlayerRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GamePlayer___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer___eq__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePlayer___eq__" "', argument " "2"" of type '" "Gambit::GamePlayerRep *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GamePlayerRep * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *)arg1)->operator ==(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GamePlayer___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GamePlayerRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GamePlayer___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_GamePlayer___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GamePlayer___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer___ne__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePlayer___ne__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePlayer___ne__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *)arg1)->operator !=((Gambit::GameObjectPtr<Gambit::GamePlayerRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  Gambit::GamePlayerRep *arg2 = (Gambit::GamePlayerRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GamePlayer___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer___ne__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__GamePlayerRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePlayer___ne__" "', argument " "2"" of type '" "Gambit::GamePlayerRep *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GamePlayerRep * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *)arg1)->operator !=(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GamePlayer___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GamePlayerRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GamePlayer___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_GamePlayer_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayer_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_GetNumber" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayer_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_GetGame" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayer_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_GetLabel" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = (*arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GamePlayer_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_SetLabel" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePlayer_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePlayer_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_IsChance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayer_IsChance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_IsChance" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsChance();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_NumInfosets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayer_NumInfosets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_NumInfosets" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->NumInfosets();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_GetInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  int arg2 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GamePlayer_GetInfoset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_GetInfoset" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePlayer_GetInfoset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetInfoset(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_Infosets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  SwigValueWrapper<Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameObjectPtr<Gambit::GameInfosetRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayer_Infosets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_Infosets" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      result = (*arg1)->Infosets();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfosetIterator(static_cast< const Gambit::GameInfosetIterator& >(result))), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_NumStrategies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayer_NumStrategies",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_NumStrategies" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->NumStrategies();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_GetStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  int arg2 ;
  Gambit::GameStrategy result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GamePlayer_GetStrategy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_GetStrategy" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePlayer_GetStrategy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetStrategy(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameStrategy(static_cast< const Gambit::GameStrategy& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_Strategies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  SwigValueWrapper<Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameObjectPtr<Gambit::GameStrategyRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayer_Strategies",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_Strategies" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      result = (*arg1)->Strategies();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameStrategyIterator(static_cast< const Gambit::GameStrategyIterator& >(result))), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_NewStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  Gambit::GameStrategy result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayer_NewStrategy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_NewStrategy" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      result = (*arg1)->NewStrategy();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameStrategy(static_cast< const Gambit::GameStrategy& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayer_IsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_IsValid" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsValid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_Invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayer_Invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_Invalidate" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      (*arg1)->Invalidate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_IncRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayer_IncRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_IncRef" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      (*arg1)->IncRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_DecRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayer_DecRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_DecRef" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      (*arg1)->DecRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayer_RefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GamePlayerRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayer_RefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayer_RefCount" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GamePlayerRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GamePlayerRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->RefCount();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GamePlayer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GameActionIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::GameActionRep * > *arg1 = 0 ;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameActionIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__ArrayTGambit__GameActionRep_p_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GameActionIterator" "', argument " "1"" of type '" "Gambit::Array<Gambit::GameActionRep * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GameActionIterator" "', argument " "1"" of type '" "Gambit::Array<Gambit::GameActionRep * > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::GameActionRep * > * >(argp1);
  {
    try {
      result = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *)new Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction >((Gambit::Array<Gambit::GameActionRep * > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_plusplus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionIterator_plusplus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator_plusplus" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  {
    try {
      (arg1)->operator ++();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_plusplus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameActionIterator_plusplus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator_plusplus" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameActionIterator_plusplus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->operator ++(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_plusplus(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GameActionIterator_plusplus__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GameActionIterator_plusplus__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameActionIterator_plusplus'.\n  Possible C/C++ prototypes are:\n    operator ++()\n    operator ++(int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_AtEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionIterator_AtEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator_AtEnd" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  {
    try {
      result = (bool)((Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > const *)arg1)->AtEnd();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_GetIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionIterator_GetIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator_GetIndex" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  {
    try {
      result = (int)((Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > const *)arg1)->GetIndex();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameActionRep > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionIterator___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator___deref__" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  {
    try {
      result = ((Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > const *)arg1)->operator ->();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameObjectPtr<Gambit::GameActionRep >(static_cast< const Gambit::GameObjectPtr<Gambit::GameActionRep >& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GameActionIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GameActionIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GameActionIterator" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionIterator_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator_GetNumber" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_GetInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionIterator_GetInfoset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator_GetInfoset" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  {
    try {
      result = (*arg1)->GetInfoset();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionIterator_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator_GetLabel" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = (*arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameActionIterator_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator_SetLabel" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameActionIterator_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameActionIterator_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_Precedes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameActionIterator_Precedes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator_Precedes" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameActionIterator_Precedes" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameActionIterator_Precedes" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  {
    try {
      result = (bool)(*arg1)->Precedes((Gambit::GameNode const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_DeleteAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionIterator_DeleteAction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator_DeleteAction" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  {
    try {
      (*arg1)->DeleteAction();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionIterator_IsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator_IsValid" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsValid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_Invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionIterator_Invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator_Invalidate" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  {
    try {
      (*arg1)->Invalidate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_IncRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionIterator_IncRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator_IncRef" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  {
    try {
      (*arg1)->IncRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_DecRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionIterator_DecRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator_DecRef" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  {
    try {
      (*arg1)->DecRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameActionIterator_RefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *arg1 = (Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameActionIterator_RefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameActionIterator_RefCount" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameAction > * >(argp1);
  {
    try {
      result = (int)(*arg1)->RefCount();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameActionIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GameInfosetIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::GameInfosetRep * > *arg1 = 0 ;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameInfosetIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__ArrayTGambit__GameInfosetRep_p_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GameInfosetIterator" "', argument " "1"" of type '" "Gambit::Array<Gambit::GameInfosetRep * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GameInfosetIterator" "', argument " "1"" of type '" "Gambit::Array<Gambit::GameInfosetRep * > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::GameInfosetRep * > * >(argp1);
  {
    try {
      result = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *)new Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset >((Gambit::Array<Gambit::GameInfosetRep * > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_plusplus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_plusplus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_plusplus" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      (arg1)->operator ++();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_plusplus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfosetIterator_plusplus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_plusplus" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameInfosetIterator_plusplus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->operator ++(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_plusplus(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GameInfosetIterator_plusplus__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GameInfosetIterator_plusplus__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameInfosetIterator_plusplus'.\n  Possible C/C++ prototypes are:\n    operator ++()\n    operator ++(int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_AtEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_AtEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_AtEnd" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      result = (bool)((Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *)arg1)->AtEnd();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_GetIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_GetIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_GetIndex" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      result = (int)((Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *)arg1)->GetIndex();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameInfosetRep > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator___deref__" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      result = ((Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *)arg1)->operator ->();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameObjectPtr<Gambit::GameInfosetRep >(static_cast< const Gambit::GameObjectPtr<Gambit::GameInfosetRep >& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GameInfosetIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GameInfosetIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GameInfosetIterator" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_GetGame" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      result = (*arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_GetNumber" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_GetPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  Gambit::GamePlayer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_GetPlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_GetPlayer" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      result = (*arg1)->GetPlayer();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayer(static_cast< const Gambit::GamePlayer& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_SetPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  Gambit::GamePlayer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfosetIterator_SetPlayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_SetPlayer" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfosetIterator_SetPlayer" "', argument " "2"" of type '" "Gambit::GamePlayer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfosetIterator_SetPlayer" "', argument " "2"" of type '" "Gambit::GamePlayer""'");
    } else {
      Gambit::GamePlayer * temp = reinterpret_cast< Gambit::GamePlayer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->SetPlayer(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_IsChanceInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_IsChanceInfoset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_IsChanceInfoset" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsChanceInfoset();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfosetIterator_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_SetLabel" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfosetIterator_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfosetIterator_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_GetLabel" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = (*arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_InsertAction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  Gambit::GameAction arg2 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfosetIterator_InsertAction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_InsertAction" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfosetIterator_InsertAction" "', argument " "2"" of type '" "Gambit::GameAction""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfosetIterator_InsertAction" "', argument " "2"" of type '" "Gambit::GameAction""'");
    } else {
      Gambit::GameAction * temp = reinterpret_cast< Gambit::GameAction * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->InsertAction(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_InsertAction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_InsertAction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_InsertAction" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      result = (*arg1)->InsertAction();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_InsertAction(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GameInfosetIterator_InsertAction__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GameInfosetIterator_InsertAction__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameInfosetIterator_InsertAction'.\n  Possible C/C++ prototypes are:\n    InsertAction(Gambit::GameAction)\n    InsertAction()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_NumActions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_NumActions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_NumActions" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      result = (int)(*arg1)->NumActions();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_GetAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  int arg2 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfosetIterator_GetAction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_GetAction" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameInfosetIterator_GetAction" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetAction(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_Actions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  SwigValueWrapper<Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameObjectPtr<Gambit::GameActionRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_Actions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_Actions" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      result = (*arg1)->Actions();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameActionIterator(static_cast< const Gambit::GameActionIterator& >(result))), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_NumMembers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_NumMembers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_NumMembers" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      result = (int)(*arg1)->NumMembers();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_GetMember(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  int arg2 ;
  Gambit::GameNode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfosetIterator_GetMember",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_GetMember" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameInfosetIterator_GetMember" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetMember(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameNode(static_cast< const Gambit::GameNode& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_Precedes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  Gambit::GameNode arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfosetIterator_Precedes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_Precedes" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfosetIterator_Precedes" "', argument " "2"" of type '" "Gambit::GameNode""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfosetIterator_Precedes" "', argument " "2"" of type '" "Gambit::GameNode""'");
    } else {
      Gambit::GameNode * temp = reinterpret_cast< Gambit::GameNode * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)(*arg1)->Precedes(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_SetActionProb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GameInfosetIterator_SetActionProb",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_SetActionProb" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameInfosetIterator_SetActionProb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GameInfosetIterator_SetActionProb" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfosetIterator_SetActionProb" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (*arg1)->SetActionProb(arg2,(std::string const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_Reveal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  Gambit::GamePlayer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameInfosetIterator_Reveal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_Reveal" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameInfosetIterator_Reveal" "', argument " "2"" of type '" "Gambit::GamePlayer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameInfosetIterator_Reveal" "', argument " "2"" of type '" "Gambit::GamePlayer""'");
    } else {
      Gambit::GamePlayer * temp = reinterpret_cast< Gambit::GamePlayer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->Reveal(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_IsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_IsValid" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsValid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_Invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_Invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_Invalidate" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      (*arg1)->Invalidate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_IncRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_IncRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_IncRef" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      (*arg1)->IncRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_DecRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_DecRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_DecRef" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      (*arg1)->DecRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameInfosetIterator_RefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *arg1 = (Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameInfosetIterator_RefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameInfosetIterator_RefCount" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameInfoset > * >(argp1);
  {
    try {
      result = (int)(*arg1)->RefCount();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameInfosetIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GameStrategyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::GameStrategyRep * > *arg1 = 0 ;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GameStrategyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__ArrayTGambit__GameStrategyRep_p_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GameStrategyIterator" "', argument " "1"" of type '" "Gambit::Array<Gambit::GameStrategyRep * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GameStrategyIterator" "', argument " "1"" of type '" "Gambit::Array<Gambit::GameStrategyRep * > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::GameStrategyRep * > * >(argp1);
  {
    try {
      result = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *)new Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy >((Gambit::Array<Gambit::GameStrategyRep * > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_plusplus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyIterator_plusplus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator_plusplus" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    try {
      (arg1)->operator ++();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_plusplus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameStrategyIterator_plusplus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator_plusplus" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameStrategyIterator_plusplus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->operator ++(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_plusplus(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GameStrategyIterator_plusplus__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GameStrategyIterator_plusplus__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GameStrategyIterator_plusplus'.\n  Possible C/C++ prototypes are:\n    operator ++()\n    operator ++(int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_AtEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyIterator_AtEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator_AtEnd" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    try {
      result = (bool)((Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > const *)arg1)->AtEnd();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_GetIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyIterator_GetIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator_GetIndex" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    try {
      result = (int)((Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > const *)arg1)->GetIndex();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameStrategyRep > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyIterator___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator___deref__" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    try {
      result = ((Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > const *)arg1)->operator ->();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameObjectPtr<Gambit::GameStrategyRep >(static_cast< const Gambit::GameObjectPtr<Gambit::GameStrategyRep >& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GameStrategyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GameStrategyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GameStrategyIterator" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyIterator_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator_GetLabel" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = (*arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GameStrategyIterator_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator_SetLabel" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameStrategyIterator_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameStrategyIterator_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_GetPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  Gambit::GamePlayer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyIterator_GetPlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator_GetPlayer" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    try {
      result = (*arg1)->GetPlayer();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayer(static_cast< const Gambit::GamePlayer& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyIterator_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator_GetNumber" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_GetId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyIterator_GetId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator_GetId" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetId();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_DeleteStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyIterator_DeleteStrategy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator_DeleteStrategy" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    try {
      (*arg1)->DeleteStrategy();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyIterator_IsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator_IsValid" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsValid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_Invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyIterator_Invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator_Invalidate" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    try {
      (*arg1)->Invalidate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_IncRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyIterator_IncRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator_IncRef" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    try {
      (*arg1)->IncRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_DecRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyIterator_DecRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator_DecRef" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    try {
      (*arg1)->DecRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameStrategyIterator_RefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *arg1 = (Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GameStrategyIterator_RefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameStrategyIterator_RefCount" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameStrategy > * >(argp1);
  {
    try {
      result = (int)(*arg1)->RefCount();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameStrategyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GamePlayerIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::GamePlayerRep * > *arg1 = 0 ;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GamePlayerIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__ArrayTGambit__GamePlayerRep_p_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GamePlayerIterator" "', argument " "1"" of type '" "Gambit::Array<Gambit::GamePlayerRep * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GamePlayerIterator" "', argument " "1"" of type '" "Gambit::Array<Gambit::GamePlayerRep * > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::GamePlayerRep * > * >(argp1);
  {
    try {
      result = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *)new Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer >((Gambit::Array<Gambit::GamePlayerRep * > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_plusplus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_plusplus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_plusplus" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      (arg1)->operator ++();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_plusplus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GamePlayerIterator_plusplus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_plusplus" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePlayerIterator_plusplus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->operator ++(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_plusplus(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GamePlayerIterator_plusplus__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GamePlayerIterator_plusplus__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GamePlayerIterator_plusplus'.\n  Possible C/C++ prototypes are:\n    operator ++()\n    operator ++(int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_AtEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_AtEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_AtEnd" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      result = (bool)((Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *)arg1)->AtEnd();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_GetIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_GetIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_GetIndex" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      result = (int)((Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *)arg1)->GetIndex();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GamePlayerRep > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator___deref__" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      result = ((Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *)arg1)->operator ->();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameObjectPtr<Gambit::GamePlayerRep >(static_cast< const Gambit::GameObjectPtr<Gambit::GamePlayerRep >& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GamePlayerIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GamePlayerIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GamePlayerIterator" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_GetNumber" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_GetGame" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      result = (*arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_GetLabel" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = (*arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GamePlayerIterator_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_SetLabel" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GamePlayerIterator_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GamePlayerIterator_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_IsChance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_IsChance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_IsChance" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsChance();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_NumInfosets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_NumInfosets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_NumInfosets" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      result = (int)(*arg1)->NumInfosets();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_GetInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  int arg2 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GamePlayerIterator_GetInfoset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_GetInfoset" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePlayerIterator_GetInfoset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetInfoset(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_Infosets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  SwigValueWrapper<Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameObjectPtr<Gambit::GameInfosetRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_Infosets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_Infosets" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      result = (*arg1)->Infosets();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfosetIterator(static_cast< const Gambit::GameInfosetIterator& >(result))), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_NumStrategies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_NumStrategies",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_NumStrategies" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      result = (int)(*arg1)->NumStrategies();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_GetStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  int arg2 ;
  Gambit::GameStrategy result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GamePlayerIterator_GetStrategy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_GetStrategy" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GamePlayerIterator_GetStrategy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetStrategy(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameStrategy(static_cast< const Gambit::GameStrategy& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_Strategies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  SwigValueWrapper<Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameObjectPtr<Gambit::GameStrategyRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_Strategies",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_Strategies" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      result = (*arg1)->Strategies();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameStrategyIterator(static_cast< const Gambit::GameStrategyIterator& >(result))), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_NewStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  Gambit::GameStrategy result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_NewStrategy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_NewStrategy" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      result = (*arg1)->NewStrategy();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameStrategy(static_cast< const Gambit::GameStrategy& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_IsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_IsValid" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsValid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_Invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_Invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_Invalidate" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      (*arg1)->Invalidate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_IncRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_IncRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_IncRef" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      (*arg1)->IncRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_DecRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_DecRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_DecRef" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      (*arg1)->DecRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GamePlayerIterator_RefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *arg1 = (Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GamePlayerIterator_RefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GamePlayerIterator_RefCount" "', argument " "1"" of type '" "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GamePlayer > * >(argp1);
  {
    try {
      result = (int)(*arg1)->RefCount();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GamePlayerIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Game__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameRep *arg1 = (Gambit::GameRep *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameRep > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Game",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Game" "', argument " "1"" of type '" "Gambit::GameRep *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameRep * >(argp1);
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameRep > *)new Gambit::GameObjectPtr<Gambit::GameRep >(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Game__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Game")) SWIG_fail;
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameRep > *)new Gambit::GameObjectPtr<Gambit::GameRep >();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Game__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = 0 ;
  Gambit::GameObjectPtr<Gambit::GameRep > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Game",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Game" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Game" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (Gambit::GameObjectPtr<Gambit::GameRep > *)new Gambit::GameObjectPtr<Gambit::GameRep >((Gambit::GameObjectPtr<Gambit::GameRep > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Game(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Game__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameRep, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Game__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Game__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Game'.\n  Possible C/C++ prototypes are:\n    Gambit::GameObjectPtr<(Gambit::GameRep)>(Gambit::GameRep *)\n    Gambit::GameObjectPtr<(Gambit::GameRep)>()\n    Gambit::GameObjectPtr<(Gambit::GameRep)>(Gambit::GameObjectPtr<Gambit::GameRep > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Game(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Game",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Game" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  Gambit::GameRep *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game___deref__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (Gambit::GameRep *)((Gambit::GameObjectPtr<Gambit::GameRep > const *)arg1)->operator ->();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game___eq__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game___eq__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game___eq__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameRep > const *)arg1)->operator ==((Gambit::GameObjectPtr<Gambit::GameRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  Gambit::GameRep *arg2 = (Gambit::GameRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game___eq__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game___eq__" "', argument " "2"" of type '" "Gambit::GameRep *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameRep * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameRep > const *)arg1)->operator ==(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GameRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Game___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game___ne__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game___ne__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game___ne__" "', argument " "2"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameRep > const *)arg1)->operator !=((Gambit::GameObjectPtr<Gambit::GameRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  Gambit::GameRep *arg2 = (Gambit::GameRep *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game___ne__" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Gambit__GameRep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game___ne__" "', argument " "2"" of type '" "Gambit::GameRep *""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameRep * >(argp2);
  {
    try {
      result = (bool)((Gambit::GameObjectPtr<Gambit::GameRep > const *)arg1)->operator !=(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GameRep, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Game_Copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_Copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_Copy" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (*arg1)->Copy();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_IsTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_IsTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_IsTree" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsTree();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_GetTitle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_GetTitle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_GetTitle" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = (*arg1)->GetTitle();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_SetTitle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_SetTitle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_SetTitle" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_SetTitle" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_SetTitle" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetTitle((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_GetComment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_GetComment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_GetComment" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = (*arg1)->GetComment();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_SetComment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_SetComment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_SetComment" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_SetComment" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_SetComment" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetComment((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_IsConstSum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_IsConstSum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_IsConstSum" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsConstSum();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_GetMinPayoff__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  int arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_GetMinPayoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_GetMinPayoff" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_GetMinPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetMinPayoff(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_GetMinPayoff__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_GetMinPayoff",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_GetMinPayoff" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetMinPayoff();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_GetMinPayoff(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Game_GetMinPayoff__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Game_GetMinPayoff__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Game_GetMinPayoff'.\n  Possible C/C++ prototypes are:\n    GetMinPayoff(int)\n    GetMinPayoff()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_GetMaxPayoff__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  int arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_GetMaxPayoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_GetMaxPayoff" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_GetMaxPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetMaxPayoff(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_GetMaxPayoff__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_GetMaxPayoff",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_GetMaxPayoff" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetMaxPayoff();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_GetMaxPayoff(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Game_GetMaxPayoff__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Game_GetMaxPayoff__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Game_GetMaxPayoff'.\n  Possible C/C++ prototypes are:\n    GetMaxPayoff(int)\n    GetMaxPayoff()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_IsPerfectRecall__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  Gambit::GameInfoset *arg2 = 0 ;
  Gambit::GameInfoset *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_IsPerfectRecall",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_IsPerfectRecall" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_IsPerfectRecall" "', argument " "2"" of type '" "Gambit::GameInfoset &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_IsPerfectRecall" "', argument " "2"" of type '" "Gambit::GameInfoset &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfoset * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Game_IsPerfectRecall" "', argument " "3"" of type '" "Gambit::GameInfoset &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_IsPerfectRecall" "', argument " "3"" of type '" "Gambit::GameInfoset &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GameInfoset * >(argp3);
  {
    try {
      result = (bool)(*arg1)->IsPerfectRecall(*arg2,*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_IsPerfectRecall__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_IsPerfectRecall",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_IsPerfectRecall" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsPerfectRecall();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_IsPerfectRecall(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Game_IsPerfectRecall__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Game_IsPerfectRecall__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Game_IsPerfectRecall'.\n  Possible C/C++ prototypes are:\n    IsPerfectRecall(Gambit::GameInfoset &,Gambit::GameInfoset &)\n    IsPerfectRecall()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_Canonicalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_Canonicalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_Canonicalize" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      (*arg1)->Canonicalize();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_ClearComputedValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_ClearComputedValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_ClearComputedValues" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      (*arg1)->ClearComputedValues();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_BuildComputedValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_BuildComputedValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_BuildComputedValues" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      (*arg1)->BuildComputedValues();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_HasComputedValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_HasComputedValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_HasComputedValues" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->HasComputedValues();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_WriteEfgFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_WriteEfgFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_WriteEfgFile" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_WriteEfgFile" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_WriteEfgFile" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      (*arg1)->WriteEfgFile(*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_WriteEfgFile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  std::ostream *arg2 = 0 ;
  Gambit::GameNode *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Game_WriteEfgFile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_WriteEfgFile" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_WriteEfgFile" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_WriteEfgFile" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Game_WriteEfgFile" "', argument " "3"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_WriteEfgFile" "', argument " "3"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GameNode * >(argp3);
  {
    try {
      (*arg1)->WriteEfgFile(*arg2,(Gambit::GameNode const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_WriteEfgFile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Game_WriteEfgFile__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Game_WriteEfgFile__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Game_WriteEfgFile'.\n  Possible C/C++ prototypes are:\n    WriteEfgFile(std::ostream &)\n    WriteEfgFile(std::ostream &,Gambit::GameNode const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_WriteNfgFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_WriteNfgFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_WriteNfgFile" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_WriteNfgFile" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_WriteNfgFile" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    try {
      (*arg1)->WriteNfgFile(*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_NumActions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  SwigValueWrapper<Gambit::PVector<int > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_NumActions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_NumActions" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (*arg1)->NumActions();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::PVector<int >(static_cast< const Gambit::PVector<int >& >(result))), SWIGTYPE_p_Gambit__PVectorTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_NumMembers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  SwigValueWrapper<Gambit::PVector<int > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_NumMembers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_NumMembers" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (*arg1)->NumMembers();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::PVector<int >(static_cast< const Gambit::PVector<int >& >(result))), SWIGTYPE_p_Gambit__PVectorTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_NumStrategies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  SwigValueWrapper<Gambit::Array<int > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_NumStrategies",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_NumStrategies" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (*arg1)->NumStrategies();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Array<int >(static_cast< const Gambit::Array<int >& >(result))), SWIGTYPE_p_Gambit__ArrayTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_GetStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  int arg2 ;
  Gambit::GameStrategy result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_GetStrategy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_GetStrategy" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_GetStrategy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetStrategy(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameStrategy(static_cast< const Gambit::GameStrategy& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_BehavProfileLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_BehavProfileLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_BehavProfileLength" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->BehavProfileLength();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_MixedProfileLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_MixedProfileLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_MixedProfileLength" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->MixedProfileLength();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_NumPlayers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_NumPlayers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_NumPlayers" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->NumPlayers();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_GetPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  int arg2 ;
  Gambit::GamePlayer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_GetPlayer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_GetPlayer" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_GetPlayer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetPlayer(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayer(static_cast< const Gambit::GamePlayer& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_Players(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  SwigValueWrapper<Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GameObjectPtr<Gambit::GamePlayerRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_Players",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_Players" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (*arg1)->Players();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayerIterator(static_cast< const Gambit::GamePlayerIterator& >(result))), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_GetChance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  Gambit::GamePlayer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_GetChance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_GetChance" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetChance();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayer(static_cast< const Gambit::GamePlayer& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_NewPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  Gambit::GamePlayer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_NewPlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_NewPlayer" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (*arg1)->NewPlayer();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayer(static_cast< const Gambit::GamePlayer& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_GetInfoset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  int arg2 ;
  Gambit::GameInfoset result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_GetInfoset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_GetInfoset" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_GetInfoset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetInfoset(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameInfoset(static_cast< const Gambit::GameInfoset& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_NumInfosets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  SwigValueWrapper<Gambit::Array<int > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_NumInfosets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_NumInfosets" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (*arg1)->NumInfosets();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Array<int >(static_cast< const Gambit::Array<int >& >(result))), SWIGTYPE_p_Gambit__ArrayTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_GetAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  int arg2 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_GetAction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_GetAction" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_GetAction" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetAction(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_NumOutcomes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_NumOutcomes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_NumOutcomes" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->NumOutcomes();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_GetOutcome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  int arg2 ;
  Gambit::GameOutcome result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_GetOutcome",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_GetOutcome" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Game_GetOutcome" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->GetOutcome(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameOutcome(static_cast< const Gambit::GameOutcome& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_NewOutcome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  Gambit::GameOutcome result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_NewOutcome",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_NewOutcome" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (*arg1)->NewOutcome();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameOutcome(static_cast< const Gambit::GameOutcome& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_DeleteOutcome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  Gambit::GameOutcome *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Game_DeleteOutcome",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_DeleteOutcome" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Game_DeleteOutcome" "', argument " "2"" of type '" "Gambit::GameOutcome const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Game_DeleteOutcome" "', argument " "2"" of type '" "Gambit::GameOutcome const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameOutcome * >(argp2);
  {
    try {
      (*arg1)->DeleteOutcome((Gambit::GameOutcome const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_GetRoot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  Gambit::GameNode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_GetRoot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_GetRoot" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (*arg1)->GetRoot();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameNode(static_cast< const Gambit::GameNode& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_NumNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_NumNodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_NumNodes" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->NumNodes();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_efg_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_efg_file",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_efg_file" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = Gambit_GameRep_efg_file((Gambit::GameRep*)(arg1)->operator ->());
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_nfg_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_nfg_file",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_nfg_file" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = Gambit_GameRep_nfg_file((Gambit::GameRep*)(arg1)->operator ->());
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_NewMixedStrategyDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  SwigValueWrapper<Gambit::MixedStrategyProfile<double > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_NewMixedStrategyDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_NewMixedStrategyDouble" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = Gambit_GameRep_NewMixedStrategyDouble((Gambit::GameRep*)(arg1)->operator ->());
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::MixedStrategyProfile<double >(static_cast< const Gambit::MixedStrategyProfile<double >& >(result))), SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_NewMixedStrategyRational(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  SwigValueWrapper<Gambit::MixedStrategyProfile<Gambit::Rational > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_NewMixedStrategyRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_NewMixedStrategyRational" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = Gambit_GameRep_NewMixedStrategyRational((Gambit::GameRep*)(arg1)->operator ->());
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::MixedStrategyProfile<Gambit::Rational >(static_cast< const Gambit::MixedStrategyProfile<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_NewMixedBehavDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  SwigValueWrapper<Gambit::MixedBehavProfile<double > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_NewMixedBehavDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_NewMixedBehavDouble" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = Gambit_GameRep_NewMixedBehavDouble((Gambit::GameRep*)(arg1)->operator ->());
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::MixedBehavProfile<double >(static_cast< const Gambit::MixedBehavProfile<double >& >(result))), SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_NewMixedBehavRational(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  SwigValueWrapper<Gambit::MixedBehavProfile<Gambit::Rational > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_NewMixedBehavRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_NewMixedBehavRational" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = Gambit_GameRep_NewMixedBehavRational((Gambit::GameRep*)(arg1)->operator ->());
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::MixedBehavProfile<Gambit::Rational >(static_cast< const Gambit::MixedBehavProfile<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_IsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_IsValid" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsValid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_Invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_Invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_Invalidate" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      (*arg1)->Invalidate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_IncRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_IncRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_IncRef" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      (*arg1)->IncRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_DecRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_DecRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_DecRef" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      (*arg1)->DecRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Game_RefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::GameObjectPtr<Gambit::GameRep > *arg1 = (Gambit::GameObjectPtr<Gambit::GameRep > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Game_RefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Game_RefCount" "', argument " "1"" of type '" "Gambit::GameObjectPtr<Gambit::GameRep > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::GameObjectPtr<Gambit::GameRep > * >(argp1);
  {
    try {
      result = (int)(*arg1)->RefCount();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Game_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ReadGameString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Gambit::Game result;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ReadGameString",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReadGameString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReadGameString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = ReadGameString((std::string const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedStrategyDouble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StrategySupport *arg1 = 0 ;
  Gambit::MixedStrategyProfile<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MixedStrategyDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_StrategySupport,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MixedStrategyDouble" "', argument " "1"" of type '" "StrategySupport const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MixedStrategyDouble" "', argument " "1"" of type '" "StrategySupport const &""'"); 
  }
  arg1 = reinterpret_cast< StrategySupport * >(argp1);
  {
    try {
      result = (Gambit::MixedStrategyProfile<double > *)new Gambit::MixedStrategyProfile<double >((StrategySupport const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedStrategyDouble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = 0 ;
  Gambit::MixedStrategyProfile<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MixedStrategyDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MixedStrategyDouble" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MixedStrategyDouble" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  {
    try {
      result = (Gambit::MixedStrategyProfile<double > *)new Gambit::MixedStrategyProfile<double >((Gambit::MixedBehavProfile<double > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedStrategyDouble(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_StrategySupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MixedStrategyDouble__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MixedStrategyDouble__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_MixedStrategyDouble'.\n  Possible C/C++ prototypes are:\n    Gambit::MixedStrategyProfile<(double)>(StrategySupport const &)\n    Gambit::MixedStrategyProfile<(double)>(Gambit::MixedBehavProfile<double > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  Gambit::MixedStrategyProfile<double > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedStrategyDouble___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble___eq__" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedStrategyDouble___eq__" "', argument " "2"" of type '" "Gambit::MixedStrategyProfile<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyDouble___eq__" "', argument " "2"" of type '" "Gambit::MixedStrategyProfile<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp2);
  {
    try {
      result = (bool)((Gambit::MixedStrategyProfile<double > const *)arg1)->operator ==((Gambit::MixedStrategyProfile<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  Gambit::MixedStrategyProfile<double > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedStrategyDouble___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble___ne__" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedStrategyDouble___ne__" "', argument " "2"" of type '" "Gambit::MixedStrategyProfile<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyDouble___ne__" "', argument " "2"" of type '" "Gambit::MixedStrategyProfile<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp2);
  {
    try {
      result = (bool)((Gambit::MixedStrategyProfile<double > const *)arg1)->operator !=((Gambit::MixedStrategyProfile<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyDouble_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble_GetGame" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  {
    try {
      result = ((Gambit::MixedStrategyProfile<double > const *)arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble_GetSupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  StrategySupport *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyDouble_GetSupport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble_GetSupport" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  {
    try {
      {
        StrategySupport const &_result_ref = ((Gambit::MixedStrategyProfile<double > const *)arg1)->GetSupport();
        result = (StrategySupport *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StrategySupport, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble_SetCentroid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyDouble_SetCentroid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble_SetCentroid" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  {
    try {
      (arg1)->SetCentroid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble_MixedProfileLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyDouble_MixedProfileLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble_MixedProfileLength" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  {
    try {
      result = (int)((Gambit::MixedStrategyProfile<double > const *)arg1)->MixedProfileLength();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble_ToFullSupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  SwigValueWrapper<Gambit::MixedStrategyProfile<double > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyDouble_ToFullSupport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble_ToFullSupport" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  {
    try {
      result = ((Gambit::MixedStrategyProfile<double > const *)arg1)->ToFullSupport();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::MixedStrategyProfile<double >(static_cast< const Gambit::MixedStrategyProfile<double >& >(result))), SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble_GetPayoff__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  int arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedStrategyDouble_GetPayoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble_GetPayoff" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedStrategyDouble_GetPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((Gambit::MixedStrategyProfile<double > const *)arg1)->GetPayoff(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble_GetPayoff__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  Gambit::GamePlayer *arg2 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedStrategyDouble_GetPayoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble_GetPayoff" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedStrategyDouble_GetPayoff" "', argument " "2"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyDouble_GetPayoff" "', argument " "2"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GamePlayer * >(argp2);
  {
    try {
      result = (double)((Gambit::MixedStrategyProfile<double > const *)arg1)->GetPayoff((Gambit::GamePlayer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble_GetPayoff(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedStrategyDouble_GetPayoff__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MixedStrategyDouble_GetPayoff__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedStrategyDouble_GetPayoff'.\n  Possible C/C++ prototypes are:\n    GetPayoff(int)\n    GetPayoff(Gambit::GamePlayer const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble_GetPayoffDeriv__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  int arg2 ;
  Gambit::GameStrategy *arg3 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedStrategyDouble_GetPayoffDeriv",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble_GetPayoffDeriv" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedStrategyDouble_GetPayoffDeriv" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MixedStrategyDouble_GetPayoffDeriv" "', argument " "3"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyDouble_GetPayoffDeriv" "', argument " "3"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GameStrategy * >(argp3);
  {
    try {
      result = (double)((Gambit::MixedStrategyProfile<double > const *)arg1)->GetPayoffDeriv(arg2,(Gambit::GameStrategy const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble_GetPayoffDeriv__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  int arg2 ;
  Gambit::GameStrategy *arg3 = 0 ;
  Gambit::GameStrategy *arg4 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MixedStrategyDouble_GetPayoffDeriv",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble_GetPayoffDeriv" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedStrategyDouble_GetPayoffDeriv" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MixedStrategyDouble_GetPayoffDeriv" "', argument " "3"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyDouble_GetPayoffDeriv" "', argument " "3"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GameStrategy * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MixedStrategyDouble_GetPayoffDeriv" "', argument " "4"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyDouble_GetPayoffDeriv" "', argument " "4"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg4 = reinterpret_cast< Gambit::GameStrategy * >(argp4);
  {
    try {
      result = (double)((Gambit::MixedStrategyProfile<double > const *)arg1)->GetPayoffDeriv(arg2,(Gambit::GameStrategy const &)*arg3,(Gambit::GameStrategy const &)*arg4);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble_GetPayoffDeriv(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MixedStrategyDouble_GetPayoffDeriv__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MixedStrategyDouble_GetPayoffDeriv__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedStrategyDouble_GetPayoffDeriv'.\n  Possible C/C++ prototypes are:\n    GetPayoffDeriv(int,Gambit::GameStrategy const &)\n    GetPayoffDeriv(int,Gambit::GameStrategy const &,Gambit::GameStrategy const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble_GetStrategyValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedStrategyDouble_GetStrategyValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble_GetStrategyValue" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedStrategyDouble_GetStrategyValue" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyDouble_GetStrategyValue" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  {
    try {
      result = (double)((Gambit::MixedStrategyProfile<double > const *)arg1)->GetStrategyValue((Gambit::GameStrategy const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble_GetLiapValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyDouble_GetLiapValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble_GetLiapValue" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  {
    try {
      result = (double)((Gambit::MixedStrategyProfile<double > const *)arg1)->GetLiapValue();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble_behavior(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  SwigValueWrapper<Gambit::MixedBehavProfile<double > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyDouble_behavior",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble_behavior" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  {
    try {
      result = Gambit_MixedStrategyProfile_Sl_double_Sg__behavior((Gambit::MixedStrategyProfile<double > const *)arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::MixedBehavProfile<double >(static_cast< const Gambit::MixedBehavProfile<double >& >(result))), SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyDouble___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble___len__" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  {
    try {
      result = (int)Gambit_MixedStrategyProfile_Sl_double_Sg____len__((Gambit::MixedStrategyProfile<double > const *)arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  int arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedStrategyDouble___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble___getitem__" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedStrategyDouble___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)Gambit_MixedStrategyProfile_Sl_double_Sg____getitem____SWIG_0((Gambit::MixedStrategyProfile<double > const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedStrategyDouble___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble___getitem__" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedStrategyDouble___getitem__" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyDouble___getitem__" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  {
    try {
      result = (double)Gambit_MixedStrategyProfile_Sl_double_Sg____getitem____SWIG_1((Gambit::MixedStrategyProfile<double > const *)arg1,(Gambit::GameObjectPtr<Gambit::GameStrategyRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedStrategyDouble___getitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MixedStrategyDouble___getitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedStrategyDouble___getitem__'.\n  Possible C/C++ prototypes are:\n    __getitem__(int)\n    __getitem__(Gambit::GameStrategy const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedStrategyDouble___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble___setitem__" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedStrategyDouble___setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixedStrategyDouble___setitem__" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      Gambit_MixedStrategyProfile_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(double const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedStrategyDouble___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyDouble___setitem__" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedStrategyDouble___setitem__" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyDouble___setitem__" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixedStrategyDouble___setitem__" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      Gambit_MixedStrategyProfile_Sl_double_Sg____setitem____SWIG_1(arg1,(Gambit::GameObjectPtr<Gambit::GameStrategyRep > const &)*arg2,(double const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyDouble___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MixedStrategyDouble___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MixedStrategyDouble___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedStrategyDouble___setitem__'.\n  Possible C/C++ prototypes are:\n    __setitem__(int,double const &)\n    __setitem__(Gambit::GameStrategy const &,double const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MixedStrategyDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = (Gambit::MixedStrategyProfile<double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MixedStrategyDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MixedStrategyDouble" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MixedStrategyDouble_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MixedStrategyRational__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StrategySupport *arg1 = 0 ;
  Gambit::MixedStrategyProfile<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MixedStrategyRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_StrategySupport,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MixedStrategyRational" "', argument " "1"" of type '" "StrategySupport const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MixedStrategyRational" "', argument " "1"" of type '" "StrategySupport const &""'"); 
  }
  arg1 = reinterpret_cast< StrategySupport * >(argp1);
  {
    try {
      result = (Gambit::MixedStrategyProfile<Gambit::Rational > *)new Gambit::MixedStrategyProfile<Gambit::Rational >((StrategySupport const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedStrategyRational__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = 0 ;
  Gambit::MixedStrategyProfile<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MixedStrategyRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MixedStrategyRational" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MixedStrategyRational" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  {
    try {
      result = (Gambit::MixedStrategyProfile<Gambit::Rational > *)new Gambit::MixedStrategyProfile<Gambit::Rational >((Gambit::MixedBehavProfile<Gambit::Rational > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedStrategyRational(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_StrategySupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MixedStrategyRational__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MixedStrategyRational__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_MixedStrategyRational'.\n  Possible C/C++ prototypes are:\n    Gambit::MixedStrategyProfile<(Gambit::Rational)>(StrategySupport const &)\n    Gambit::MixedStrategyProfile<(Gambit::Rational)>(Gambit::MixedBehavProfile<Gambit::Rational > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedStrategyRational___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational___eq__" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedStrategyRational___eq__" "', argument " "2"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyRational___eq__" "', argument " "2"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp2);
  {
    try {
      result = (bool)((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1)->operator ==((Gambit::MixedStrategyProfile<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedStrategyRational___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational___ne__" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedStrategyRational___ne__" "', argument " "2"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyRational___ne__" "', argument " "2"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp2);
  {
    try {
      result = (bool)((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1)->operator !=((Gambit::MixedStrategyProfile<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyRational_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational_GetGame" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  {
    try {
      result = ((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational_GetSupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  StrategySupport *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyRational_GetSupport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational_GetSupport" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  {
    try {
      {
        StrategySupport const &_result_ref = ((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1)->GetSupport();
        result = (StrategySupport *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StrategySupport, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational_SetCentroid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyRational_SetCentroid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational_SetCentroid" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  {
    try {
      (arg1)->SetCentroid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational_MixedProfileLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyRational_MixedProfileLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational_MixedProfileLength" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  {
    try {
      result = (int)((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1)->MixedProfileLength();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational_ToFullSupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  SwigValueWrapper<Gambit::MixedStrategyProfile<Gambit::Rational > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyRational_ToFullSupport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational_ToFullSupport" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  {
    try {
      result = ((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1)->ToFullSupport();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::MixedStrategyProfile<Gambit::Rational >(static_cast< const Gambit::MixedStrategyProfile<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational_GetPayoff__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  int arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedStrategyRational_GetPayoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational_GetPayoff" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedStrategyRational_GetPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1)->GetPayoff(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational_GetPayoff__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  Gambit::GamePlayer *arg2 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedStrategyRational_GetPayoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational_GetPayoff" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedStrategyRational_GetPayoff" "', argument " "2"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyRational_GetPayoff" "', argument " "2"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GamePlayer * >(argp2);
  {
    try {
      result = ((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1)->GetPayoff((Gambit::GamePlayer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational_GetPayoff(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedStrategyRational_GetPayoff__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MixedStrategyRational_GetPayoff__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedStrategyRational_GetPayoff'.\n  Possible C/C++ prototypes are:\n    GetPayoff(int)\n    GetPayoff(Gambit::GamePlayer const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational_GetPayoffDeriv__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  int arg2 ;
  Gambit::GameStrategy *arg3 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedStrategyRational_GetPayoffDeriv",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational_GetPayoffDeriv" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedStrategyRational_GetPayoffDeriv" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MixedStrategyRational_GetPayoffDeriv" "', argument " "3"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyRational_GetPayoffDeriv" "', argument " "3"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GameStrategy * >(argp3);
  {
    try {
      result = ((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1)->GetPayoffDeriv(arg2,(Gambit::GameStrategy const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational_GetPayoffDeriv__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  int arg2 ;
  Gambit::GameStrategy *arg3 = 0 ;
  Gambit::GameStrategy *arg4 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MixedStrategyRational_GetPayoffDeriv",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational_GetPayoffDeriv" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedStrategyRational_GetPayoffDeriv" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MixedStrategyRational_GetPayoffDeriv" "', argument " "3"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyRational_GetPayoffDeriv" "', argument " "3"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GameStrategy * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MixedStrategyRational_GetPayoffDeriv" "', argument " "4"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyRational_GetPayoffDeriv" "', argument " "4"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg4 = reinterpret_cast< Gambit::GameStrategy * >(argp4);
  {
    try {
      result = ((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1)->GetPayoffDeriv(arg2,(Gambit::GameStrategy const &)*arg3,(Gambit::GameStrategy const &)*arg4);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational_GetPayoffDeriv(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MixedStrategyRational_GetPayoffDeriv__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MixedStrategyRational_GetPayoffDeriv__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedStrategyRational_GetPayoffDeriv'.\n  Possible C/C++ prototypes are:\n    GetPayoffDeriv(int,Gambit::GameStrategy const &)\n    GetPayoffDeriv(int,Gambit::GameStrategy const &,Gambit::GameStrategy const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational_GetStrategyValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedStrategyRational_GetStrategyValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational_GetStrategyValue" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedStrategyRational_GetStrategyValue" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyRational_GetStrategyValue" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  {
    try {
      result = ((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1)->GetStrategyValue((Gambit::GameStrategy const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational_GetLiapValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyRational_GetLiapValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational_GetLiapValue" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  {
    try {
      result = ((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1)->GetLiapValue();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational_behavior(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  SwigValueWrapper<Gambit::MixedBehavProfile<Gambit::Rational > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyRational_behavior",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational_behavior" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  {
    try {
      result = Gambit_MixedStrategyProfile_Sl_Gambit_Rational_Sg__behavior((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::MixedBehavProfile<Gambit::Rational >(static_cast< const Gambit::MixedBehavProfile<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedStrategyRational___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational___len__" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  {
    try {
      result = (int)Gambit_MixedStrategyProfile_Sl_Gambit_Rational_Sg____len__((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  int arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedStrategyRational___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational___getitem__" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedStrategyRational___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = Gambit_MixedStrategyProfile_Sl_Gambit_Rational_Sg____getitem____SWIG_0((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedStrategyRational___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational___getitem__" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedStrategyRational___getitem__" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyRational___getitem__" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  {
    try {
      result = Gambit_MixedStrategyProfile_Sl_Gambit_Rational_Sg____getitem____SWIG_1((Gambit::MixedStrategyProfile<Gambit::Rational > const *)arg1,(Gambit::GameObjectPtr<Gambit::GameStrategyRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedStrategyRational___getitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MixedStrategyRational___getitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedStrategyRational___getitem__'.\n  Possible C/C++ prototypes are:\n    __getitem__(int)\n    __getitem__(Gambit::GameStrategy const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  int arg2 ;
  Gambit::Rational *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedStrategyRational___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational___setitem__" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedStrategyRational___setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MixedStrategyRational___setitem__" "', argument " "3"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyRational___setitem__" "', argument " "3"" of type '" "Gambit::Rational const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::Rational * >(argp3);
  {
    try {
      Gambit_MixedStrategyProfile_Sl_Gambit_Rational_Sg____setitem____SWIG_0(arg1,arg2,(Gambit::Rational const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  Gambit::Rational *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedStrategyRational___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedStrategyRational___setitem__" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedStrategyRational___setitem__" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyRational___setitem__" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MixedStrategyRational___setitem__" "', argument " "3"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedStrategyRational___setitem__" "', argument " "3"" of type '" "Gambit::Rational const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::Rational * >(argp3);
  {
    try {
      Gambit_MixedStrategyProfile_Sl_Gambit_Rational_Sg____setitem____SWIG_1(arg1,(Gambit::GameObjectPtr<Gambit::GameStrategyRep > const &)*arg2,(Gambit::Rational const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedStrategyRational___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gambit__Rational, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MixedStrategyRational___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gambit__Rational, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MixedStrategyRational___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedStrategyRational___setitem__'.\n  Possible C/C++ prototypes are:\n    __setitem__(int,Gambit::Rational const &)\n    __setitem__(Gambit::GameStrategy const &,Gambit::Rational const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MixedStrategyRational(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = (Gambit::MixedStrategyProfile<Gambit::Rational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MixedStrategyRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MixedStrategyRational" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MixedStrategyRational_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SupportStrategyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Array<Gambit::GameStrategy > *arg1 = 0 ;
  Gambit::SupportStrategyIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SupportStrategyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__ArrayTGambit__GameObjectPtrTGambit__GameStrategyRep_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SupportStrategyIterator" "', argument " "1"" of type '" "Gambit::Array<Gambit::GameStrategy > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SupportStrategyIterator" "', argument " "1"" of type '" "Gambit::Array<Gambit::GameStrategy > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Array<Gambit::GameStrategy > * >(argp1);
  {
    try {
      result = (Gambit::SupportStrategyIterator *)new Gambit::SupportStrategyIterator((Gambit::Array<Gambit::GameStrategy > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__SupportStrategyIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_plusplus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SupportStrategyIterator_plusplus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator_plusplus" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      (arg1)->operator ++();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_plusplus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SupportStrategyIterator_plusplus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator_plusplus" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SupportStrategyIterator_plusplus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->operator ++(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_plusplus(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__SupportStrategyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SupportStrategyIterator_plusplus__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__SupportStrategyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SupportStrategyIterator_plusplus__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SupportStrategyIterator_plusplus'.\n  Possible C/C++ prototypes are:\n    operator ++()\n    operator ++(int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_AtEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SupportStrategyIterator_AtEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator_AtEnd" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      result = (bool)((Gambit::SupportStrategyIterator const *)arg1)->AtEnd();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_GetIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SupportStrategyIterator_GetIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator_GetIndex" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      result = (int)((Gambit::SupportStrategyIterator const *)arg1)->GetIndex();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  Gambit::GameStrategy *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SupportStrategyIterator___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator___ref__" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      {
        Gambit::GameStrategy const &_result_ref = ((Gambit::SupportStrategyIterator const *)arg1)->operator *();
        result = (Gambit::GameStrategy *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  Gambit::GameStrategy *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SupportStrategyIterator___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator___deref__" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      {
        Gambit::GameStrategy const &_result_ref = ((Gambit::SupportStrategyIterator const *)arg1)->operator ->();
        result = (Gambit::GameStrategy *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SupportStrategyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SupportStrategyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SupportStrategyIterator" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_GetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SupportStrategyIterator_GetLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator_GetLabel" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = (*arg1)->GetLabel();
        result = (std::string *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_SetLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SupportStrategyIterator_SetLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator_SetLabel" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SupportStrategyIterator_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SupportStrategyIterator_SetLabel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->SetLabel((std::string const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_GetPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  Gambit::GamePlayer result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SupportStrategyIterator_GetPlayer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator_GetPlayer" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      result = (*arg1)->GetPlayer();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayer(static_cast< const Gambit::GamePlayer& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_GetNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SupportStrategyIterator_GetNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator_GetNumber" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetNumber();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_GetId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SupportStrategyIterator_GetId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator_GetId" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      result = (int)(*arg1)->GetId();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_DeleteStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SupportStrategyIterator_DeleteStrategy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator_DeleteStrategy" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      (*arg1)->DeleteStrategy();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SupportStrategyIterator_IsValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator_IsValid" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      result = (bool)(*arg1)->IsValid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_Invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SupportStrategyIterator_Invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator_Invalidate" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      (*arg1)->Invalidate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_IncRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SupportStrategyIterator_IncRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator_IncRef" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      (*arg1)->IncRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_DecRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SupportStrategyIterator_DecRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator_DecRef" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      (*arg1)->DecRef();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SupportStrategyIterator_RefCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::SupportStrategyIterator *arg1 = (Gambit::SupportStrategyIterator *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SupportStrategyIterator_RefCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__SupportStrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SupportStrategyIterator_RefCount" "', argument " "1"" of type '" "Gambit::SupportStrategyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::SupportStrategyIterator * >(argp1);
  {
    try {
      result = (int)(*arg1)->RefCount();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SupportStrategyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__SupportStrategyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_StrategySupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Game *arg1 = 0 ;
  Gambit::StrategySupport *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StrategySupport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StrategySupport" "', argument " "1"" of type '" "Gambit::Game const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StrategySupport" "', argument " "1"" of type '" "Gambit::Game const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Game * >(argp1);
  {
    try {
      result = (Gambit::StrategySupport *)new Gambit::StrategySupport((Gambit::Game const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__StrategySupport, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  Gambit::StrategySupport *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrategySupport___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport___eq__" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__StrategySupport,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrategySupport___eq__" "', argument " "2"" of type '" "Gambit::StrategySupport const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategySupport___eq__" "', argument " "2"" of type '" "Gambit::StrategySupport const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::StrategySupport * >(argp2);
  {
    try {
      result = (bool)((Gambit::StrategySupport const *)arg1)->operator ==((Gambit::StrategySupport const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  Gambit::StrategySupport *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrategySupport___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport___ne__" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__StrategySupport,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrategySupport___ne__" "', argument " "2"" of type '" "Gambit::StrategySupport const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategySupport___ne__" "', argument " "2"" of type '" "Gambit::StrategySupport const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::StrategySupport * >(argp2);
  {
    try {
      result = (bool)((Gambit::StrategySupport const *)arg1)->operator !=((Gambit::StrategySupport const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrategySupport_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_GetGame" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  {
    try {
      result = ((Gambit::StrategySupport const *)arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_NumStrategies__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrategySupport_NumStrategies",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_NumStrategies" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrategySupport_NumStrategies" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)((Gambit::StrategySupport const *)arg1)->NumStrategies(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_NumStrategies__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  SwigValueWrapper<Gambit::Array<int > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrategySupport_NumStrategies",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_NumStrategies" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  {
    try {
      result = ((Gambit::StrategySupport const *)arg1)->NumStrategies();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Array<int >(static_cast< const Gambit::Array<int >& >(result))), SWIGTYPE_p_Gambit__ArrayTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_NumStrategies(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__StrategySupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_StrategySupport_NumStrategies__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__StrategySupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StrategySupport_NumStrategies__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'StrategySupport_NumStrategies'.\n  Possible C/C++ prototypes are:\n    NumStrategies(int)\n    NumStrategies()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_MixedProfileLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrategySupport_MixedProfileLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_MixedProfileLength" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  {
    try {
      result = (int)((Gambit::StrategySupport const *)arg1)->MixedProfileLength();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_GetStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  int arg2 ;
  int arg3 ;
  Gambit::GameStrategy result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StrategySupport_GetStrategy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_GetStrategy" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrategySupport_GetStrategy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StrategySupport_GetStrategy" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = ((Gambit::StrategySupport const *)arg1)->GetStrategy(arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameStrategy(static_cast< const Gambit::GameStrategy& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_Players(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  SwigValueWrapper<Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GameObjectPtr<Gambit::GamePlayerRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrategySupport_Players",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_Players" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  {
    try {
      result = ((Gambit::StrategySupport const *)arg1)->Players();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GamePlayerIterator(static_cast< const Gambit::GamePlayerIterator& >(result))), SWIGTYPE_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_Strategies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  Gambit::GamePlayer *arg2 = 0 ;
  SwigValueWrapper<Gambit::SupportStrategyIterator > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrategySupport_Strategies",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_Strategies" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrategySupport_Strategies" "', argument " "2"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategySupport_Strategies" "', argument " "2"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GamePlayer * >(argp2);
  {
    try {
      result = ((Gambit::StrategySupport const *)arg1)->Strategies((Gambit::GamePlayer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::SupportStrategyIterator(static_cast< const Gambit::SupportStrategyIterator& >(result))), SWIGTYPE_p_Gambit__SupportStrategyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_GetIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrategySupport_GetIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_GetIndex" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrategySupport_GetIndex" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategySupport_GetIndex" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  {
    try {
      result = (int)((Gambit::StrategySupport const *)arg1)->GetIndex((Gambit::GameStrategy const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_Contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrategySupport_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_Contains" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrategySupport_Contains" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategySupport_Contains" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  {
    try {
      result = (bool)((Gambit::StrategySupport const *)arg1)->Contains((Gambit::GameStrategy const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_IsSubsetOf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  Gambit::StrategySupport *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrategySupport_IsSubsetOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_IsSubsetOf" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__StrategySupport,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrategySupport_IsSubsetOf" "', argument " "2"" of type '" "Gambit::StrategySupport const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategySupport_IsSubsetOf" "', argument " "2"" of type '" "Gambit::StrategySupport const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::StrategySupport * >(argp2);
  {
    try {
      result = (bool)((Gambit::StrategySupport const *)arg1)->IsSubsetOf((Gambit::StrategySupport const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_AddStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrategySupport_AddStrategy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_AddStrategy" "', argument " "1"" of type '" "Gambit::StrategySupport *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrategySupport_AddStrategy" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategySupport_AddStrategy" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  {
    try {
      (arg1)->AddStrategy((Gambit::GameStrategy const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_RemoveStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrategySupport_RemoveStrategy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_RemoveStrategy" "', argument " "1"" of type '" "Gambit::StrategySupport *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrategySupport_RemoveStrategy" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategySupport_RemoveStrategy" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  {
    try {
      result = (bool)(arg1)->RemoveStrategy((Gambit::GameStrategy const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_Dominates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  Gambit::GameStrategy *arg3 = 0 ;
  bool arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StrategySupport_Dominates",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_Dominates" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrategySupport_Dominates" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategySupport_Dominates" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StrategySupport_Dominates" "', argument " "3"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategySupport_Dominates" "', argument " "3"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GameStrategy * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "StrategySupport_Dominates" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (bool)((Gambit::StrategySupport const *)arg1)->Dominates((Gambit::GameStrategy const &)*arg2,(Gambit::GameStrategy const &)*arg3,arg4);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_IsDominated__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StrategySupport_IsDominated",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_IsDominated" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrategySupport_IsDominated" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategySupport_IsDominated" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StrategySupport_IsDominated" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "StrategySupport_IsDominated" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (bool)((Gambit::StrategySupport const *)arg1)->IsDominated((Gambit::GameStrategy const &)*arg2,arg3,arg4);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_IsDominated__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  bool arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StrategySupport_IsDominated",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_IsDominated" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrategySupport_IsDominated" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategySupport_IsDominated" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StrategySupport_IsDominated" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (bool)((Gambit::StrategySupport const *)arg1)->IsDominated((Gambit::GameStrategy const &)*arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_IsDominated(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__StrategySupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StrategySupport_IsDominated__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__StrategySupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_StrategySupport_IsDominated__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'StrategySupport_IsDominated'.\n  Possible C/C++ prototypes are:\n    IsDominated(Gambit::GameStrategy const &,bool,bool)\n    IsDominated(Gambit::GameStrategy const &,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_Undominated__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  bool arg2 ;
  bool arg3 ;
  SwigValueWrapper<Gambit::StrategySupport > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StrategySupport_Undominated",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_Undominated" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrategySupport_Undominated" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StrategySupport_Undominated" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = ((Gambit::StrategySupport const *)arg1)->Undominated(arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::StrategySupport(static_cast< const Gambit::StrategySupport& >(result))), SWIGTYPE_p_Gambit__StrategySupport, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_Undominated__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  bool arg2 ;
  SwigValueWrapper<Gambit::StrategySupport > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrategySupport_Undominated",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_Undominated" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrategySupport_Undominated" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = ((Gambit::StrategySupport const *)arg1)->Undominated(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::StrategySupport(static_cast< const Gambit::StrategySupport& >(result))), SWIGTYPE_p_Gambit__StrategySupport, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_Undominated__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  bool arg2 ;
  Gambit::Array<int > *arg3 = 0 ;
  SwigValueWrapper<Gambit::StrategySupport > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StrategySupport_Undominated",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_Undominated" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrategySupport_Undominated" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    int i;
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      return NULL;
    }
    arg3 = new Array<int>(PySequence_Length(obj2));
    for (i = 0; i < PySequence_Length(obj2); i++) {
      PyObject *o = PySequence_GetItem(obj2, i);
      if (PyNumber_Check(o)) {
        (*arg3)[i+1] = (int) PyInt_AsLong(o);
      }
      else {
        PyErr_SetString(PyExc_ValueError, "Sequence elements must be numbers");
        return NULL;
      }
    }
  }
  {
    try {
      result = ((Gambit::StrategySupport const *)arg1)->Undominated(arg2,(Gambit::Array<int > const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::StrategySupport(static_cast< const Gambit::StrategySupport& >(result))), SWIGTYPE_p_Gambit__StrategySupport, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_Undominated(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__StrategySupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StrategySupport_Undominated__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__StrategySupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gambit__ArrayTint_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StrategySupport_Undominated__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__StrategySupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StrategySupport_Undominated__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'StrategySupport_Undominated'.\n  Possible C/C++ prototypes are:\n    Undominated(bool,bool)\n    Undominated(bool)\n    Undominated(bool,Gambit::Array<int > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_Overwhelms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  Gambit::GameStrategy *arg3 = 0 ;
  bool arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StrategySupport_Overwhelms",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_Overwhelms" "', argument " "1"" of type '" "Gambit::StrategySupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrategySupport_Overwhelms" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategySupport_Overwhelms" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StrategySupport_Overwhelms" "', argument " "3"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrategySupport_Overwhelms" "', argument " "3"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GameStrategy * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "StrategySupport_Overwhelms" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (bool)((Gambit::StrategySupport const *)arg1)->Overwhelms((Gambit::GameStrategy const &)*arg2,(Gambit::GameStrategy const &)*arg3,arg4);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategySupport_NewMixedStrategyDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  SwigValueWrapper<Gambit::MixedStrategyProfile<double > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrategySupport_NewMixedStrategyDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategySupport_NewMixedStrategyDouble" "', argument " "1"" of type '" "Gambit::StrategySupport *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  {
    try {
      result = Gambit_StrategySupport_NewMixedStrategyDouble(arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::MixedStrategyProfile<double >(static_cast< const Gambit::MixedStrategyProfile<double >& >(result))), SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StrategySupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = (Gambit::StrategySupport *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StrategySupport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategySupport, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StrategySupport" "', argument " "1"" of type '" "Gambit::StrategySupport *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StrategySupport_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__StrategySupport, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MixedBehavDouble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BehavSupport *arg1 = 0 ;
  Gambit::MixedBehavProfile<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MixedBehavDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BehavSupport,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MixedBehavDouble" "', argument " "1"" of type '" "BehavSupport const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MixedBehavDouble" "', argument " "1"" of type '" "BehavSupport const &""'"); 
  }
  arg1 = reinterpret_cast< BehavSupport * >(argp1);
  {
    try {
      result = (Gambit::MixedBehavProfile<double > *)new Gambit::MixedBehavProfile<double >((BehavSupport const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedBehavDouble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = 0 ;
  Gambit::MixedBehavProfile<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MixedBehavDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MixedBehavDouble" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MixedBehavDouble" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  {
    try {
      result = (Gambit::MixedBehavProfile<double > *)new Gambit::MixedBehavProfile<double >((Gambit::MixedBehavProfile<double > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedBehavDouble__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<double > *arg1 = 0 ;
  Gambit::MixedBehavProfile<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MixedBehavDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MixedBehavDouble" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MixedBehavDouble" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<double > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<double > * >(argp1);
  {
    try {
      result = (Gambit::MixedBehavProfile<double > *)new Gambit::MixedBehavProfile<double >((Gambit::MixedStrategyProfile<double > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedBehavDouble(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MixedBehavDouble__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MixedBehavDouble__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__MixedStrategyProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MixedBehavDouble__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_MixedBehavDouble'.\n  Possible C/C++ prototypes are:\n    Gambit::MixedBehavProfile<(double)>(BehavSupport const &)\n    Gambit::MixedBehavProfile<(double)>(Gambit::MixedBehavProfile<double > const &)\n    Gambit::MixedBehavProfile<(double)>(Gambit::MixedStrategyProfile<double > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MixedBehavDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MixedBehavDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MixedBehavDouble" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::MixedBehavProfile<double > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___eq__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble___eq__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble___eq__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp2);
  {
    try {
      result = (bool)((Gambit::MixedBehavProfile<double > const *)arg1)->operator ==((Gambit::MixedBehavProfile<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::MixedBehavProfile<double > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___ne__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble___ne__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble___ne__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp2);
  {
    try {
      result = (bool)((Gambit::MixedBehavProfile<double > const *)arg1)->operator !=((Gambit::MixedBehavProfile<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::DVector<double > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___eq__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble___eq__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble___eq__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<double > * >(argp2);
  {
    try {
      result = (bool)((Gambit::MixedBehavProfile<double > const *)arg1)->operator ==((Gambit::DVector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavDouble___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__DVectorTdouble_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavDouble___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::DVector<double > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___ne__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble___ne__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble___ne__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<double > * >(argp2);
  {
    try {
      result = (bool)((Gambit::MixedBehavProfile<double > const *)arg1)->operator !=((Gambit::DVector<double > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavDouble___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__DVectorTdouble_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavDouble___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  double *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___call__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble___call__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble___call__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      {
        double const &_result_ref = ((Gambit::MixedBehavProfile<double > const *)arg1)->operator ()((Gambit::GameAction const &)*arg2);
        result = (double *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  double *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___call__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble___call__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble___call__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      {
        double &_result_ref = (arg1)->operator ()((Gambit::GameAction const &)*arg2);
        result = (double *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___call____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MixedBehavDouble___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___call__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedBehavDouble___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixedBehavDouble___call__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MixedBehavDouble___call__" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      {
        double const &_result_ref = ((Gambit::MixedBehavProfile<double > const *)arg1)->operator ()(arg2,arg3,arg4);
        result = (double *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___call____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MixedBehavDouble___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___call__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedBehavDouble___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixedBehavDouble___call__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MixedBehavDouble___call__" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      {
        double &_result_ref = (arg1)->operator ()(arg2,arg3,arg4);
        result = (double *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___call__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavDouble___call____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavDouble___call____SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MixedBehavDouble___call____SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MixedBehavDouble___call____SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedBehavDouble___call__'.\n  Possible C/C++ prototypes are:\n    operator ()(Gambit::GameAction const &)\n    operator ()(Gambit::GameAction const &)\n    operator ()(int,int,int)\n    operator ()(int,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___iadd____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::MixedBehavProfile<double > *arg2 = 0 ;
  Gambit::MixedBehavProfile<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___iadd__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble___iadd__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble___iadd__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp2);
  {
    try {
      {
        Gambit::MixedBehavProfile<double > &_result_ref = (arg1)->operator +=((Gambit::MixedBehavProfile<double > const &)*arg2);
        result = (Gambit::MixedBehavProfile<double > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___iadd____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::DVector<double > *arg2 = 0 ;
  Gambit::MixedBehavProfile<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___iadd__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble___iadd__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble___iadd__" "', argument " "2"" of type '" "Gambit::DVector<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<double > * >(argp2);
  {
    try {
      {
        Gambit::MixedBehavProfile<double > &_result_ref = (arg1)->operator +=((Gambit::DVector<double > const &)*arg2);
        result = (Gambit::MixedBehavProfile<double > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___iadd__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavDouble___iadd____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__DVectorTdouble_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavDouble___iadd____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedBehavDouble___iadd__'.\n  Possible C/C++ prototypes are:\n    operator +=(Gambit::MixedBehavProfile<double > const &)\n    operator +=(Gambit::DVector<double > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::MixedBehavProfile<double > *arg2 = 0 ;
  Gambit::MixedBehavProfile<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___isub__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble___isub__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble___isub__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<double > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp2);
  {
    try {
      {
        Gambit::MixedBehavProfile<double > &_result_ref = (arg1)->operator -=((Gambit::MixedBehavProfile<double > const &)*arg2);
        result = (Gambit::MixedBehavProfile<double > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  double *arg2 = 0 ;
  Gambit::MixedBehavProfile<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___imul__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedBehavDouble___imul__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      {
        Gambit::MixedBehavProfile<double > &_result_ref = (arg1)->operator *=((double const &)*arg2);
        result = (Gambit::MixedBehavProfile<double > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_Invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedBehavDouble_Invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_Invalidate" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  {
    try {
      ((Gambit::MixedBehavProfile<double > const *)arg1)->Invalidate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_Centroid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedBehavDouble_Centroid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_Centroid" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  {
    try {
      (arg1)->Centroid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_Length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedBehavDouble_Length",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_Length" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  {
    try {
      result = (int)((Gambit::MixedBehavProfile<double > const *)arg1)->Length();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedBehavDouble_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_GetGame" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  {
    try {
      result = ((Gambit::MixedBehavProfile<double > const *)arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_GetSupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  BehavSupport *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedBehavDouble_GetSupport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_GetSupport" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  {
    try {
      {
        BehavSupport const &_result_ref = ((Gambit::MixedBehavProfile<double > const *)arg1)->GetSupport();
        result = (BehavSupport *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BehavSupport, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_IsDefinedAt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameInfoset arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble_IsDefinedAt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_IsDefinedAt" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble_IsDefinedAt" "', argument " "2"" of type '" "Gambit::GameInfoset""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_IsDefinedAt" "', argument " "2"" of type '" "Gambit::GameInfoset""'");
    } else {
      Gambit::GameInfoset * temp = reinterpret_cast< Gambit::GameInfoset * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)((Gambit::MixedBehavProfile<double > const *)arg1)->IsDefinedAt(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_GetPayoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  int arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble_GetPayoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_GetPayoff" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedBehavDouble_GetPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((Gambit::MixedBehavProfile<double > const *)arg1)->GetPayoff(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_GetLiapValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  bool arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble_GetLiapValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_GetLiapValue" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedBehavDouble_GetLiapValue" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (double)((Gambit::MixedBehavProfile<double > const *)arg1)->GetLiapValue(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_GetLiapValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedBehavDouble_GetLiapValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_GetLiapValue" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  {
    try {
      result = (double)((Gambit::MixedBehavProfile<double > const *)arg1)->GetLiapValue();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_GetLiapValue(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MixedBehavDouble_GetLiapValue__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MixedBehavDouble_GetLiapValue__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedBehavDouble_GetLiapValue'.\n  Possible C/C++ prototypes are:\n    GetLiapValue(bool)\n    GetLiapValue()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_GetRealizProb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  double *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble_GetRealizProb",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_GetRealizProb" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble_GetRealizProb" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_GetRealizProb" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  {
    try {
      {
        double const &_result_ref = ((Gambit::MixedBehavProfile<double > const *)arg1)->GetRealizProb((Gambit::GameNode const &)*arg2);
        result = (double *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_GetBeliefProb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  double *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble_GetBeliefProb",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_GetBeliefProb" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble_GetBeliefProb" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_GetBeliefProb" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  {
    try {
      {
        double const &_result_ref = ((Gambit::MixedBehavProfile<double > const *)arg1)->GetBeliefProb((Gambit::GameNode const &)*arg2);
        result = (double *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_GetNodeValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  Gambit::Vector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble_GetNodeValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_GetNodeValue" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble_GetNodeValue" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_GetNodeValue" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  {
    try {
      result = ((Gambit::MixedBehavProfile<double > const *)arg1)->GetNodeValue((Gambit::GameNode const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Vector<double >(static_cast< const Gambit::Vector<double >& >(result))), SWIGTYPE_p_Gambit__VectorTdouble_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_GetInfosetProb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameInfoset *arg2 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble_GetInfosetProb",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_GetInfosetProb" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble_GetInfosetProb" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_GetInfosetProb" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfoset * >(argp2);
  {
    try {
      result = (double)((Gambit::MixedBehavProfile<double > const *)arg1)->GetInfosetProb((Gambit::GameInfoset const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_GetInfosetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameInfoset *arg2 = 0 ;
  double *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble_GetInfosetValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_GetInfosetValue" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble_GetInfosetValue" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_GetInfosetValue" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfoset * >(argp2);
  {
    try {
      {
        double const &_result_ref = ((Gambit::MixedBehavProfile<double > const *)arg1)->GetInfosetValue((Gambit::GameInfoset const &)*arg2);
        result = (double *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_GetActionProb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble_GetActionProb",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_GetActionProb" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble_GetActionProb" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_GetActionProb" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      result = (double)((Gambit::MixedBehavProfile<double > const *)arg1)->GetActionProb((Gambit::GameAction const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_GetActionValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  double *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble_GetActionValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_GetActionValue" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble_GetActionValue" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_GetActionValue" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      {
        double const &_result_ref = ((Gambit::MixedBehavProfile<double > const *)arg1)->GetActionValue((Gambit::GameAction const &)*arg2);
        result = (double *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_GetRegret(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  double *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble_GetRegret",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_GetRegret" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble_GetRegret" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_GetRegret" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      {
        double const &_result_ref = ((Gambit::MixedBehavProfile<double > const *)arg1)->GetRegret((Gambit::GameAction const &)*arg2);
        result = (double *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_DiffActionValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  Gambit::GameAction *arg3 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedBehavDouble_DiffActionValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_DiffActionValue" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble_DiffActionValue" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_DiffActionValue" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MixedBehavDouble_DiffActionValue" "', argument " "3"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_DiffActionValue" "', argument " "3"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GameAction * >(argp3);
  {
    try {
      result = (double)((Gambit::MixedBehavProfile<double > const *)arg1)->DiffActionValue((Gambit::GameAction const &)*arg2,(Gambit::GameAction const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_DiffRealizProb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  Gambit::GameAction *arg3 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedBehavDouble_DiffRealizProb",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_DiffRealizProb" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble_DiffRealizProb" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_DiffRealizProb" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MixedBehavDouble_DiffRealizProb" "', argument " "3"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_DiffRealizProb" "', argument " "3"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GameAction * >(argp3);
  {
    try {
      result = (double)((Gambit::MixedBehavProfile<double > const *)arg1)->DiffRealizProb((Gambit::GameNode const &)*arg2,(Gambit::GameAction const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble_DiffNodeValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  Gambit::GamePlayer *arg3 = 0 ;
  Gambit::GameAction *arg4 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MixedBehavDouble_DiffNodeValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble_DiffNodeValue" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble_DiffNodeValue" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_DiffNodeValue" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MixedBehavDouble_DiffNodeValue" "', argument " "3"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_DiffNodeValue" "', argument " "3"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GamePlayer * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MixedBehavDouble_DiffNodeValue" "', argument " "4"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble_DiffNodeValue" "', argument " "4"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg4 = reinterpret_cast< Gambit::GameAction * >(argp4);
  {
    try {
      result = (double)((Gambit::MixedBehavProfile<double > const *)arg1)->DiffNodeValue((Gambit::GameNode const &)*arg2,(Gambit::GamePlayer const &)*arg3,(Gambit::GameAction const &)*arg4);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedBehavDouble___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___len__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  {
    try {
      result = (int)Gambit_MixedBehavProfile_Sl_double_Sg____len__((Gambit::MixedBehavProfile<double > const *)arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  int arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___getitem__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedBehavDouble___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)Gambit_MixedBehavProfile_Sl_double_Sg____getitem____SWIG_0((Gambit::MixedBehavProfile<double > const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavDouble___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___getitem__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble___getitem__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble___getitem__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      result = (double)Gambit_MixedBehavProfile_Sl_double_Sg____getitem____SWIG_1((Gambit::MixedBehavProfile<double > const *)arg1,(Gambit::GameObjectPtr<Gambit::GameActionRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavDouble___getitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MixedBehavDouble___getitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedBehavDouble___getitem__'.\n  Possible C/C++ prototypes are:\n    __getitem__(int)\n    __getitem__(Gambit::GameAction const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedBehavDouble___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___setitem__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedBehavDouble___setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixedBehavDouble___setitem__" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      Gambit_MixedBehavProfile_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(double const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<double > *arg1 = (Gambit::MixedBehavProfile<double > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedBehavDouble___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavDouble___setitem__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<double > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavDouble___setitem__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavDouble___setitem__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixedBehavDouble___setitem__" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      Gambit_MixedBehavProfile_Sl_double_Sg____setitem____SWIG_1(arg1,(Gambit::GameObjectPtr<Gambit::GameActionRep > const &)*arg2,(double const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavDouble___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MixedBehavDouble___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MixedBehavDouble___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedBehavDouble___setitem__'.\n  Possible C/C++ prototypes are:\n    __setitem__(int,double const &)\n    __setitem__(Gambit::GameAction const &,double const &)\n");
  return NULL;
}


SWIGINTERN PyObject *MixedBehavDouble_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__MixedBehavProfileTdouble_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MixedBehavRational__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BehavSupport *arg1 = 0 ;
  Gambit::MixedBehavProfile<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MixedBehavRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BehavSupport,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MixedBehavRational" "', argument " "1"" of type '" "BehavSupport const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MixedBehavRational" "', argument " "1"" of type '" "BehavSupport const &""'"); 
  }
  arg1 = reinterpret_cast< BehavSupport * >(argp1);
  {
    try {
      result = (Gambit::MixedBehavProfile<Gambit::Rational > *)new Gambit::MixedBehavProfile<Gambit::Rational >((BehavSupport const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedBehavRational__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = 0 ;
  Gambit::MixedBehavProfile<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MixedBehavRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MixedBehavRational" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MixedBehavRational" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  {
    try {
      result = (Gambit::MixedBehavProfile<Gambit::Rational > *)new Gambit::MixedBehavProfile<Gambit::Rational >((Gambit::MixedBehavProfile<Gambit::Rational > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedBehavRational__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedStrategyProfile<Gambit::Rational > *arg1 = 0 ;
  Gambit::MixedBehavProfile<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MixedBehavRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MixedBehavRational" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MixedBehavRational" "', argument " "1"" of type '" "Gambit::MixedStrategyProfile<Gambit::Rational > const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedStrategyProfile<Gambit::Rational > * >(argp1);
  {
    try {
      result = (Gambit::MixedBehavProfile<Gambit::Rational > *)new Gambit::MixedBehavProfile<Gambit::Rational >((Gambit::MixedStrategyProfile<Gambit::Rational > const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MixedBehavRational(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MixedBehavRational__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MixedBehavRational__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MixedBehavRational__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_MixedBehavRational'.\n  Possible C/C++ prototypes are:\n    Gambit::MixedBehavProfile<(Gambit::Rational)>(BehavSupport const &)\n    Gambit::MixedBehavProfile<(Gambit::Rational)>(Gambit::MixedBehavProfile<Gambit::Rational > const &)\n    Gambit::MixedBehavProfile<(Gambit::Rational)>(Gambit::MixedStrategyProfile<Gambit::Rational > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MixedBehavRational(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MixedBehavRational",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MixedBehavRational" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___eq__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational___eq__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational___eq__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp2);
  {
    try {
      result = (bool)((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->operator ==((Gambit::MixedBehavProfile<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___ne__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational___ne__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational___ne__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp2);
  {
    try {
      result = (bool)((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->operator !=((Gambit::MixedBehavProfile<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::DVector<Gambit::Rational > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___eq__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational___eq__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational___eq__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp2);
  {
    try {
      result = (bool)((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->operator ==((Gambit::DVector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavRational___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavRational___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::DVector<Gambit::Rational > *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___ne__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational___ne__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational___ne__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp2);
  {
    try {
      result = (bool)((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->operator !=((Gambit::DVector<Gambit::Rational > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavRational___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavRational___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___call__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational___call__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational___call__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      {
        Gambit::Rational const &_result_ref = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->operator ()((Gambit::GameAction const &)*arg2);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___call__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational___call__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational___call__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      {
        Gambit::Rational &_result_ref = (arg1)->operator ()((Gambit::GameAction const &)*arg2);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___call____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MixedBehavRational___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___call__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedBehavRational___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixedBehavRational___call__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MixedBehavRational___call__" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      {
        Gambit::Rational const &_result_ref = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->operator ()(arg2,arg3,arg4);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___call____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MixedBehavRational___call__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___call__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedBehavRational___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixedBehavRational___call__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MixedBehavRational___call__" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      {
        Gambit::Rational &_result_ref = (arg1)->operator ()(arg2,arg3,arg4);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___call__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavRational___call____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavRational___call____SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MixedBehavRational___call____SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MixedBehavRational___call____SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedBehavRational___call__'.\n  Possible C/C++ prototypes are:\n    operator ()(Gambit::GameAction const &)\n    operator ()(Gambit::GameAction const &)\n    operator ()(int,int,int)\n    operator ()(int,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___iadd____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg2 = 0 ;
  Gambit::MixedBehavProfile<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___iadd__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational___iadd__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational___iadd__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp2);
  {
    try {
      {
        Gambit::MixedBehavProfile<Gambit::Rational > &_result_ref = (arg1)->operator +=((Gambit::MixedBehavProfile<Gambit::Rational > const &)*arg2);
        result = (Gambit::MixedBehavProfile<Gambit::Rational > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___iadd____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::DVector<Gambit::Rational > *arg2 = 0 ;
  Gambit::MixedBehavProfile<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___iadd__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational___iadd__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational___iadd__" "', argument " "2"" of type '" "Gambit::DVector<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::DVector<Gambit::Rational > * >(argp2);
  {
    try {
      {
        Gambit::MixedBehavProfile<Gambit::Rational > &_result_ref = (arg1)->operator +=((Gambit::DVector<Gambit::Rational > const &)*arg2);
        result = (Gambit::MixedBehavProfile<Gambit::Rational > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___iadd__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavRational___iadd____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__DVectorTGambit__Rational_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavRational___iadd____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedBehavRational___iadd__'.\n  Possible C/C++ prototypes are:\n    operator +=(Gambit::MixedBehavProfile<Gambit::Rational > const &)\n    operator +=(Gambit::DVector<Gambit::Rational > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg2 = 0 ;
  Gambit::MixedBehavProfile<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___isub__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational___isub__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational___isub__" "', argument " "2"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp2);
  {
    try {
      {
        Gambit::MixedBehavProfile<Gambit::Rational > &_result_ref = (arg1)->operator -=((Gambit::MixedBehavProfile<Gambit::Rational > const &)*arg2);
        result = (Gambit::MixedBehavProfile<Gambit::Rational > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::Rational *arg2 = 0 ;
  Gambit::MixedBehavProfile<Gambit::Rational > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___imul__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational___imul__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational___imul__" "', argument " "2"" of type '" "Gambit::Rational const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::Rational * >(argp2);
  {
    try {
      {
        Gambit::MixedBehavProfile<Gambit::Rational > &_result_ref = (arg1)->operator *=((Gambit::Rational const &)*arg2);
        result = (Gambit::MixedBehavProfile<Gambit::Rational > *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_Invalidate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedBehavRational_Invalidate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_Invalidate" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  {
    try {
      ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->Invalidate();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_Centroid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedBehavRational_Centroid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_Centroid" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  {
    try {
      (arg1)->Centroid();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_Length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedBehavRational_Length",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_Length" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  {
    try {
      result = (int)((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->Length();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedBehavRational_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_GetGame" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  {
    try {
      result = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_GetSupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  BehavSupport *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedBehavRational_GetSupport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_GetSupport" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  {
    try {
      {
        BehavSupport const &_result_ref = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->GetSupport();
        result = (BehavSupport *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BehavSupport, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_IsDefinedAt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameInfoset arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational_IsDefinedAt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_IsDefinedAt" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational_IsDefinedAt" "', argument " "2"" of type '" "Gambit::GameInfoset""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_IsDefinedAt" "', argument " "2"" of type '" "Gambit::GameInfoset""'");
    } else {
      Gambit::GameInfoset * temp = reinterpret_cast< Gambit::GameInfoset * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->IsDefinedAt(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_GetPayoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  int arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational_GetPayoff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_GetPayoff" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedBehavRational_GetPayoff" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->GetPayoff(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_GetLiapValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  bool arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational_GetLiapValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_GetLiapValue" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedBehavRational_GetLiapValue" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->GetLiapValue(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_GetLiapValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedBehavRational_GetLiapValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_GetLiapValue" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  {
    try {
      result = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->GetLiapValue();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_GetLiapValue(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MixedBehavRational_GetLiapValue__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MixedBehavRational_GetLiapValue__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedBehavRational_GetLiapValue'.\n  Possible C/C++ prototypes are:\n    GetLiapValue(bool)\n    GetLiapValue()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_GetRealizProb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational_GetRealizProb",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_GetRealizProb" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational_GetRealizProb" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_GetRealizProb" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  {
    try {
      {
        Gambit::Rational const &_result_ref = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->GetRealizProb((Gambit::GameNode const &)*arg2);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_GetBeliefProb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational_GetBeliefProb",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_GetBeliefProb" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational_GetBeliefProb" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_GetBeliefProb" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  {
    try {
      {
        Gambit::Rational const &_result_ref = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->GetBeliefProb((Gambit::GameNode const &)*arg2);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_GetNodeValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  Gambit::Vector<Gambit::Rational > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational_GetNodeValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_GetNodeValue" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational_GetNodeValue" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_GetNodeValue" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  {
    try {
      result = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->GetNodeValue((Gambit::GameNode const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Vector<Gambit::Rational >(static_cast< const Gambit::Vector<Gambit::Rational >& >(result))), SWIGTYPE_p_Gambit__VectorTGambit__Rational_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_GetInfosetProb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameInfoset *arg2 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational_GetInfosetProb",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_GetInfosetProb" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational_GetInfosetProb" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_GetInfosetProb" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfoset * >(argp2);
  {
    try {
      result = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->GetInfosetProb((Gambit::GameInfoset const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_GetInfosetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameInfoset *arg2 = 0 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational_GetInfosetValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_GetInfosetValue" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational_GetInfosetValue" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_GetInfosetValue" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfoset * >(argp2);
  {
    try {
      {
        Gambit::Rational const &_result_ref = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->GetInfosetValue((Gambit::GameInfoset const &)*arg2);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_GetActionProb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational_GetActionProb",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_GetActionProb" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational_GetActionProb" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_GetActionProb" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      result = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->GetActionProb((Gambit::GameAction const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_GetActionValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational_GetActionValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_GetActionValue" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational_GetActionValue" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_GetActionValue" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      {
        Gambit::Rational const &_result_ref = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->GetActionValue((Gambit::GameAction const &)*arg2);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_GetRegret(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  Gambit::Rational *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational_GetRegret",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_GetRegret" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational_GetRegret" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_GetRegret" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      {
        Gambit::Rational const &_result_ref = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->GetRegret((Gambit::GameAction const &)*arg2);
        result = (Gambit::Rational *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__Rational, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_DiffActionValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  Gambit::GameAction *arg3 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedBehavRational_DiffActionValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_DiffActionValue" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational_DiffActionValue" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_DiffActionValue" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MixedBehavRational_DiffActionValue" "', argument " "3"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_DiffActionValue" "', argument " "3"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GameAction * >(argp3);
  {
    try {
      result = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->DiffActionValue((Gambit::GameAction const &)*arg2,(Gambit::GameAction const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_DiffRealizProb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  Gambit::GameAction *arg3 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedBehavRational_DiffRealizProb",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_DiffRealizProb" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational_DiffRealizProb" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_DiffRealizProb" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MixedBehavRational_DiffRealizProb" "', argument " "3"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_DiffRealizProb" "', argument " "3"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GameAction * >(argp3);
  {
    try {
      result = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->DiffRealizProb((Gambit::GameNode const &)*arg2,(Gambit::GameAction const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational_DiffNodeValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  Gambit::GamePlayer *arg3 = 0 ;
  Gambit::GameAction *arg4 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MixedBehavRational_DiffNodeValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational_DiffNodeValue" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational_DiffNodeValue" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_DiffNodeValue" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MixedBehavRational_DiffNodeValue" "', argument " "3"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_DiffNodeValue" "', argument " "3"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GamePlayer * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MixedBehavRational_DiffNodeValue" "', argument " "4"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational_DiffNodeValue" "', argument " "4"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg4 = reinterpret_cast< Gambit::GameAction * >(argp4);
  {
    try {
      result = ((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1)->DiffNodeValue((Gambit::GameNode const &)*arg2,(Gambit::GamePlayer const &)*arg3,(Gambit::GameAction const &)*arg4);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixedBehavRational___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___len__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  {
    try {
      result = (int)Gambit_MixedBehavProfile_Sl_Gambit_Rational_Sg____len__((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  int arg2 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___getitem__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedBehavRational___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = Gambit_MixedBehavProfile_Sl_Gambit_Rational_Sg____getitem____SWIG_0((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1,arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  Gambit::Rational result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixedBehavRational___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___getitem__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational___getitem__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational___getitem__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      result = Gambit_MixedBehavProfile_Sl_Gambit_Rational_Sg____getitem____SWIG_1((Gambit::MixedBehavProfile<Gambit::Rational > const *)arg1,(Gambit::GameObjectPtr<Gambit::GameActionRep > const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Rational(static_cast< const Gambit::Rational& >(result))), SWIGTYPE_p_Gambit__Rational, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MixedBehavRational___getitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MixedBehavRational___getitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedBehavRational___getitem__'.\n  Possible C/C++ prototypes are:\n    __getitem__(int)\n    __getitem__(Gambit::GameAction const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  int arg2 ;
  Gambit::Rational *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedBehavRational___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___setitem__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixedBehavRational___setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MixedBehavRational___setitem__" "', argument " "3"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational___setitem__" "', argument " "3"" of type '" "Gambit::Rational const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::Rational * >(argp3);
  {
    try {
      Gambit_MixedBehavProfile_Sl_Gambit_Rational_Sg____setitem____SWIG_0(arg1,arg2,(Gambit::Rational const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::MixedBehavProfile<Gambit::Rational > *arg1 = (Gambit::MixedBehavProfile<Gambit::Rational > *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  Gambit::Rational *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixedBehavRational___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixedBehavRational___setitem__" "', argument " "1"" of type '" "Gambit::MixedBehavProfile<Gambit::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::MixedBehavProfile<Gambit::Rational > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixedBehavRational___setitem__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational___setitem__" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__Rational,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MixedBehavRational___setitem__" "', argument " "3"" of type '" "Gambit::Rational const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixedBehavRational___setitem__" "', argument " "3"" of type '" "Gambit::Rational const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::Rational * >(argp3);
  {
    try {
      Gambit_MixedBehavProfile_Sl_Gambit_Rational_Sg____setitem____SWIG_1(arg1,(Gambit::GameObjectPtr<Gambit::GameActionRep > const &)*arg2,(Gambit::Rational const &)*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixedBehavRational___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gambit__Rational, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MixedBehavRational___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Gambit__Rational, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MixedBehavRational___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MixedBehavRational___setitem__'.\n  Possible C/C++ prototypes are:\n    __setitem__(int,Gambit::Rational const &)\n    __setitem__(Gambit::GameAction const &,Gambit::Rational const &)\n");
  return NULL;
}


SWIGINTERN PyObject *MixedBehavRational_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__MixedBehavProfileTGambit__Rational_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BehavSupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::Game *arg1 = 0 ;
  Gambit::BehavSupport *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BehavSupport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BehavSupport" "', argument " "1"" of type '" "Gambit::Game const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BehavSupport" "', argument " "1"" of type '" "Gambit::Game const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::Game * >(argp1);
  {
    try {
      result = (Gambit::BehavSupport *)new Gambit::BehavSupport((Gambit::Game const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__BehavSupport, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BehavSupport(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BehavSupport",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BehavSupport" "', argument " "1"" of type '" "Gambit::BehavSupport *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::BehavSupport *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport___eq__" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__BehavSupport,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport___eq__" "', argument " "2"" of type '" "Gambit::BehavSupport const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport___eq__" "', argument " "2"" of type '" "Gambit::BehavSupport const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::BehavSupport * >(argp2);
  {
    try {
      result = (bool)((Gambit::BehavSupport const *)arg1)->operator ==((Gambit::BehavSupport const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::BehavSupport *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport___ne__" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__BehavSupport,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport___ne__" "', argument " "2"" of type '" "Gambit::BehavSupport const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport___ne__" "', argument " "2"" of type '" "Gambit::BehavSupport const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::BehavSupport * >(argp2);
  {
    try {
      result = (bool)((Gambit::BehavSupport const *)arg1)->operator !=((Gambit::BehavSupport const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_GetGame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::Game result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BehavSupport_GetGame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_GetGame" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  {
    try {
      result = ((Gambit::BehavSupport const *)arg1)->GetGame();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::Game(static_cast< const Gambit::Game& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_NumActions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameInfoset *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport_NumActions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_NumActions" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_NumActions" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_NumActions" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfoset * >(argp2);
  {
    try {
      result = (int)((Gambit::BehavSupport const *)arg1)->NumActions((Gambit::GameInfoset const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_NumActions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BehavSupport_NumActions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_NumActions" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BehavSupport_NumActions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BehavSupport_NumActions" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)((Gambit::BehavSupport const *)arg1)->NumActions(arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_NumActions__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  SwigValueWrapper<Gambit::PVector<int > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BehavSupport_NumActions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_NumActions" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  {
    try {
      result = ((Gambit::BehavSupport const *)arg1)->NumActions();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::PVector<int >(static_cast< const Gambit::PVector<int >& >(result))), SWIGTYPE_p_Gambit__PVectorTint_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_NumActions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BehavSupport_NumActions__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BehavSupport_NumActions__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BehavSupport_NumActions__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'BehavSupport_NumActions'.\n  Possible C/C++ prototypes are:\n    NumActions(Gambit::GameInfoset const &)\n    NumActions(int,int)\n    NumActions()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_GetAction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameInfoset *arg2 = 0 ;
  int arg3 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BehavSupport_GetAction",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_GetAction" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_GetAction" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_GetAction" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfoset * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BehavSupport_GetAction" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = ((Gambit::BehavSupport const *)arg1)->GetAction((Gambit::GameInfoset const &)*arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_GetAction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Gambit::GameAction result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BehavSupport_GetAction",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_GetAction" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BehavSupport_GetAction" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BehavSupport_GetAction" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BehavSupport_GetAction" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = ((Gambit::BehavSupport const *)arg1)->GetAction(arg2,arg3,arg4);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::GameAction(static_cast< const Gambit::GameAction& >(result))), SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_GetAction(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BehavSupport_GetAction__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BehavSupport_GetAction__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'BehavSupport_GetAction'.\n  Possible C/C++ prototypes are:\n    GetAction(Gambit::GameInfoset const &,int)\n    GetAction(int,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_GetIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport_GetIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_GetIndex" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_GetIndex" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_GetIndex" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      result = (int)((Gambit::BehavSupport const *)arg1)->GetIndex((Gambit::GameAction const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_Contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_Contains" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_Contains" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_Contains" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      result = (bool)((Gambit::BehavSupport const *)arg1)->Contains((Gambit::GameAction const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_NumDegreesOfFreedom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BehavSupport_NumDegreesOfFreedom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_NumDegreesOfFreedom" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  {
    try {
      result = (int)((Gambit::BehavSupport const *)arg1)->NumDegreesOfFreedom();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_HasActiveActionAt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameInfoset *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport_HasActiveActionAt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_HasActiveActionAt" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_HasActiveActionAt" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_HasActiveActionAt" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfoset * >(argp2);
  {
    try {
      result = (bool)((Gambit::BehavSupport const *)arg1)->HasActiveActionAt((Gambit::GameInfoset const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_HasActiveActionsAtAllInfosets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BehavSupport_HasActiveActionsAtAllInfosets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_HasActiveActionsAtAllInfosets" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  {
    try {
      result = (bool)((Gambit::BehavSupport const *)arg1)->HasActiveActionsAtAllInfosets();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_NumSequences__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BehavSupport_NumSequences",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_NumSequences" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  {
    try {
      result = (int)((Gambit::BehavSupport const *)arg1)->NumSequences();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_NumSequences__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport_NumSequences",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_NumSequences" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BehavSupport_NumSequences" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)((Gambit::BehavSupport const *)arg1)->NumSequences(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_NumSequences(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BehavSupport_NumSequences__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BehavSupport_NumSequences__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'BehavSupport_NumSequences'.\n  Possible C/C++ prototypes are:\n    NumSequences()\n    NumSequences(int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_IsActive__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameInfoset *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport_IsActive",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_IsActive" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_IsActive" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_IsActive" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfoset * >(argp2);
  {
    try {
      result = (bool)((Gambit::BehavSupport const *)arg1)->IsActive((Gambit::GameInfoset const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_NumActiveMembers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameInfoset *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport_NumActiveMembers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_NumActiveMembers" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_NumActiveMembers" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_NumActiveMembers" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfoset * >(argp2);
  {
    try {
      result = (int)((Gambit::BehavSupport const *)arg1)->NumActiveMembers((Gambit::GameInfoset const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_IsActive__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport_IsActive",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_IsActive" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_IsActive" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_IsActive" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  {
    try {
      result = (bool)((Gambit::BehavSupport const *)arg1)->IsActive((Gambit::GameNode const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_IsActive(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BehavSupport_IsActive__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BehavSupport_IsActive__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'BehavSupport_IsActive'.\n  Possible C/C++ prototypes are:\n    IsActive(Gambit::GameInfoset const &)\n    IsActive(Gambit::GameNode const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_HasActiveActionsAtActiveInfosets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BehavSupport_HasActiveActionsAtActiveInfosets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_HasActiveActionsAtActiveInfosets" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  {
    try {
      result = (bool)((Gambit::BehavSupport const *)arg1)->HasActiveActionsAtActiveInfosets();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_HasActiveActionsAtActiveInfosetsAndNoOthers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BehavSupport_HasActiveActionsAtActiveInfosetsAndNoOthers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_HasActiveActionsAtActiveInfosetsAndNoOthers" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  {
    try {
      result = (bool)((Gambit::BehavSupport const *)arg1)->HasActiveActionsAtActiveInfosetsAndNoOthers();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_AddAction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport_AddAction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_AddAction" "', argument " "1"" of type '" "Gambit::BehavSupport *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_AddAction" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_AddAction" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      (arg1)->AddAction((Gambit::GameAction const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_RemoveAction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport_RemoveAction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_RemoveAction" "', argument " "1"" of type '" "Gambit::BehavSupport *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_RemoveAction" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_RemoveAction" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      result = (bool)(arg1)->RemoveAction((Gambit::GameAction const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_RemoveAction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  List<Gambit::GameInfoset > *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BehavSupport_RemoveAction",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_RemoveAction" "', argument " "1"" of type '" "Gambit::BehavSupport *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_RemoveAction" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_RemoveAction" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ListTGambit__GameObjectPtrTGambit__GameInfosetRep_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BehavSupport_RemoveAction" "', argument " "3"" of type '" "List<Gambit::GameInfoset > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_RemoveAction" "', argument " "3"" of type '" "List<Gambit::GameInfoset > &""'"); 
  }
  arg3 = reinterpret_cast< List<Gambit::GameInfoset > * >(argp3);
  {
    try {
      result = (bool)(arg1)->RemoveAction((Gambit::GameAction const &)*arg2,*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_RemoveAction(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BehavSupport_RemoveAction__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ListTGambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BehavSupport_RemoveAction__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'BehavSupport_RemoveAction'.\n  Possible C/C++ prototypes are:\n    RemoveAction(Gambit::GameAction const &)\n    RemoveAction(Gambit::GameAction const &,List<Gambit::GameInfoset > &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_ReachableNonterminalNodes__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  SwigValueWrapper<List<Gambit::GameObjectPtr<Gambit::GameNodeRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BehavSupport_ReachableNonterminalNodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_ReachableNonterminalNodes" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  {
    try {
      result = ((Gambit::BehavSupport const *)arg1)->ReachableNonterminalNodes();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new List<Gambit::GameNode >(static_cast< const List<Gambit::GameNode >& >(result))), SWIGTYPE_p_ListTGambit__GameObjectPtrTGambit__GameNodeRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_ReachableNonterminalNodes__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  SwigValueWrapper<List<Gambit::GameObjectPtr<Gambit::GameNodeRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport_ReachableNonterminalNodes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_ReachableNonterminalNodes" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_ReachableNonterminalNodes" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_ReachableNonterminalNodes" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  {
    try {
      result = ((Gambit::BehavSupport const *)arg1)->ReachableNonterminalNodes((Gambit::GameNode const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new List<Gambit::GameNode >(static_cast< const List<Gambit::GameNode >& >(result))), SWIGTYPE_p_ListTGambit__GameObjectPtrTGambit__GameNodeRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_ReachableNonterminalNodes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BehavSupport_ReachableNonterminalNodes__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BehavSupport_ReachableNonterminalNodes__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'BehavSupport_ReachableNonterminalNodes'.\n  Possible C/C++ prototypes are:\n    ReachableNonterminalNodes()\n    ReachableNonterminalNodes(Gambit::GameNode const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_ReachableInfosets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  Gambit::PVector<int > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BehavSupport_ReachableInfosets",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_ReachableInfosets" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_ReachableInfosets" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_ReachableInfosets" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__PVectorTint_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BehavSupport_ReachableInfosets" "', argument " "3"" of type '" "Gambit::PVector<int > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_ReachableInfosets" "', argument " "3"" of type '" "Gambit::PVector<int > &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::PVector<int > * >(argp3);
  {
    try {
      ((Gambit::BehavSupport const *)arg1)->ReachableInfosets((Gambit::GameNode const &)*arg2,*arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_ReachableInfosets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GamePlayer *arg2 = 0 ;
  SwigValueWrapper<List<Gambit::GameObjectPtr<Gambit::GameInfosetRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport_ReachableInfosets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_ReachableInfosets" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_ReachableInfosets" "', argument " "2"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_ReachableInfosets" "', argument " "2"" of type '" "Gambit::GamePlayer const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GamePlayer * >(argp2);
  {
    try {
      result = ((Gambit::BehavSupport const *)arg1)->ReachableInfosets((Gambit::GamePlayer const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new List<Gambit::GameInfoset >(static_cast< const List<Gambit::GameInfoset >& >(result))), SWIGTYPE_p_ListTGambit__GameObjectPtrTGambit__GameInfosetRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_ReachableInfosets(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BehavSupport_ReachableInfosets__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Gambit__PVectorTint_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BehavSupport_ReachableInfosets__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'BehavSupport_ReachableInfosets'.\n  Possible C/C++ prototypes are:\n    ReachableInfosets(Gambit::GameNode const &,Gambit::PVector<int > &)\n    ReachableInfosets(Gambit::GamePlayer const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_MayReach__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameNode *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport_MayReach",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_MayReach" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_MayReach" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_MayReach" "', argument " "2"" of type '" "Gambit::GameNode const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameNode * >(argp2);
  {
    try {
      result = (bool)((Gambit::BehavSupport const *)arg1)->MayReach((Gambit::GameNode const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_MayReach__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameInfoset *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport_MayReach",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_MayReach" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_MayReach" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_MayReach" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfoset * >(argp2);
  {
    try {
      result = (bool)((Gambit::BehavSupport const *)arg1)->MayReach((Gambit::GameInfoset const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_MayReach(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BehavSupport_MayReach__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BehavSupport_MayReach__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'BehavSupport_MayReach'.\n  Possible C/C++ prototypes are:\n    MayReach(Gambit::GameNode const &)\n    MayReach(Gambit::GameInfoset const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_ReachableMembers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameInfoset *arg2 = 0 ;
  SwigValueWrapper<List<Gambit::GameObjectPtr<Gambit::GameNodeRep > > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavSupport_ReachableMembers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_ReachableMembers" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_ReachableMembers" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_ReachableMembers" "', argument " "2"" of type '" "Gambit::GameInfoset const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameInfoset * >(argp2);
  {
    try {
      result = ((Gambit::BehavSupport const *)arg1)->ReachableMembers((Gambit::GameInfoset const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new List<Gambit::GameNode >(static_cast< const List<Gambit::GameNode >& >(result))), SWIGTYPE_p_ListTGambit__GameObjectPtrTGambit__GameNodeRep_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_Dominates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  Gambit::GameAction *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:BehavSupport_Dominates",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_Dominates" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_Dominates" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_Dominates" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BehavSupport_Dominates" "', argument " "3"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_Dominates" "', argument " "3"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg3 = reinterpret_cast< Gambit::GameAction * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BehavSupport_Dominates" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "BehavSupport_Dominates" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      result = (bool)((Gambit::BehavSupport const *)arg1)->Dominates((Gambit::GameAction const &)*arg2,(Gambit::GameAction const &)*arg3,arg4,arg5);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_IsDominated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  Gambit::GameAction *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BehavSupport_IsDominated",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_IsDominated" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BehavSupport_IsDominated" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_IsDominated" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BehavSupport_IsDominated" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BehavSupport_IsDominated" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (bool)((Gambit::BehavSupport const *)arg1)->IsDominated((Gambit::GameAction const &)*arg2,arg3,arg4);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavSupport_Undominated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = (Gambit::BehavSupport *) 0 ;
  bool arg2 ;
  bool arg3 ;
  Gambit::Array<int > *arg4 = 0 ;
  std::ostream *arg5 = 0 ;
  SwigValueWrapper<Gambit::BehavSupport > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:BehavSupport_Undominated",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavSupport, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavSupport_Undominated" "', argument " "1"" of type '" "Gambit::BehavSupport const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BehavSupport_Undominated" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BehavSupport_Undominated" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    int i;
    if (!PySequence_Check(obj3)) {
      PyErr_SetString(PyExc_ValueError, "Expected a sequence");
      return NULL;
    }
    arg4 = new Array<int>(PySequence_Length(obj3));
    for (i = 0; i < PySequence_Length(obj3); i++) {
      PyObject *o = PySequence_GetItem(obj3, i);
      if (PyNumber_Check(o)) {
        (*arg4)[i+1] = (int) PyInt_AsLong(o);
      }
      else {
        PyErr_SetString(PyExc_ValueError, "Sequence elements must be numbers");
        return NULL;
      }
    }
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BehavSupport_Undominated" "', argument " "5"" of type '" "std::ostream &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BehavSupport_Undominated" "', argument " "5"" of type '" "std::ostream &""'"); 
  }
  arg5 = reinterpret_cast< std::ostream * >(argp5);
  {
    try {
      result = ((Gambit::BehavSupport const *)arg1)->Undominated(arg2,arg3,(Gambit::Array<int > const &)*arg4,*arg5);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj((new Gambit::BehavSupport(static_cast< const Gambit::BehavSupport& >(result))), SWIGTYPE_p_Gambit__BehavSupport, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BehavSupport_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__BehavSupport, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BehavIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = 0 ;
  Gambit::BehavIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BehavIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__BehavSupport,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BehavIterator" "', argument " "1"" of type '" "Gambit::BehavSupport const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BehavIterator" "', argument " "1"" of type '" "Gambit::BehavSupport const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  {
    try {
      result = (Gambit::BehavIterator *)new Gambit::BehavIterator((Gambit::BehavSupport const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__BehavIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BehavIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavSupport *arg1 = 0 ;
  Gambit::GameAction *arg2 = 0 ;
  Gambit::BehavIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BehavIterator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__BehavSupport,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BehavIterator" "', argument " "1"" of type '" "Gambit::BehavSupport const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BehavIterator" "', argument " "1"" of type '" "Gambit::BehavSupport const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavSupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BehavIterator" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BehavIterator" "', argument " "2"" of type '" "Gambit::GameAction const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameAction * >(argp2);
  {
    try {
      result = (Gambit::BehavIterator *)new Gambit::BehavIterator((Gambit::BehavSupport const &)*arg1,(Gambit::GameAction const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__BehavIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BehavIterator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BehavIterator__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__BehavSupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BehavIterator__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_BehavIterator'.\n  Possible C/C++ prototypes are:\n    Gambit::BehavIterator(Gambit::BehavSupport const &)\n    Gambit::BehavIterator(Gambit::BehavSupport const &,Gambit::GameAction const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavIterator_plusplus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavIterator *arg1 = (Gambit::BehavIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BehavIterator_plusplus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavIterator_plusplus" "', argument " "1"" of type '" "Gambit::BehavIterator *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavIterator * >(argp1);
  {
    try {
      (arg1)->operator ++();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavIterator_plusplus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavIterator *arg1 = (Gambit::BehavIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BehavIterator_plusplus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavIterator_plusplus" "', argument " "1"" of type '" "Gambit::BehavIterator *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BehavIterator_plusplus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->operator ++(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavIterator_plusplus(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BehavIterator_plusplus__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__BehavIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BehavIterator_plusplus__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'BehavIterator_plusplus'.\n  Possible C/C++ prototypes are:\n    operator ++()\n    operator ++(int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavIterator_AtEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavIterator *arg1 = (Gambit::BehavIterator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BehavIterator_AtEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavIterator_AtEnd" "', argument " "1"" of type '" "Gambit::BehavIterator const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavIterator * >(argp1);
  {
    try {
      result = (bool)((Gambit::BehavIterator const *)arg1)->AtEnd();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BehavIterator___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavIterator *arg1 = (Gambit::BehavIterator *) 0 ;
  Gambit::PureBehavProfile *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BehavIterator___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BehavIterator___ref__" "', argument " "1"" of type '" "Gambit::BehavIterator const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavIterator * >(argp1);
  {
    try {
      {
        Gambit::PureBehavProfile const &_result_ref = ((Gambit::BehavIterator const *)arg1)->operator *();
        result = (Gambit::PureBehavProfile *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PureBehavProfile, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BehavIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::BehavIterator *arg1 = (Gambit::BehavIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BehavIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__BehavIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BehavIterator" "', argument " "1"" of type '" "Gambit::BehavIterator *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::BehavIterator * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BehavIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__BehavIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_StrategyIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = 0 ;
  Gambit::StrategyIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StrategyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__StrategySupport,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StrategyIterator" "', argument " "1"" of type '" "Gambit::StrategySupport const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StrategyIterator" "', argument " "1"" of type '" "Gambit::StrategySupport const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  {
    try {
      result = (Gambit::StrategyIterator *)new Gambit::StrategyIterator((Gambit::StrategySupport const &)*arg1);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__StrategyIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StrategyIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  Gambit::StrategyIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_StrategyIterator",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__StrategySupport,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StrategyIterator" "', argument " "1"" of type '" "Gambit::StrategySupport const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StrategyIterator" "', argument " "1"" of type '" "Gambit::StrategySupport const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_StrategyIterator" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_StrategyIterator" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (Gambit::StrategyIterator *)new Gambit::StrategyIterator((Gambit::StrategySupport const &)*arg1,arg2,arg3);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__StrategyIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StrategyIterator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = 0 ;
  Gambit::GameStrategy *arg2 = 0 ;
  Gambit::StrategyIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StrategyIterator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__StrategySupport,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StrategyIterator" "', argument " "1"" of type '" "Gambit::StrategySupport const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StrategyIterator" "', argument " "1"" of type '" "Gambit::StrategySupport const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StrategyIterator" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StrategyIterator" "', argument " "2"" of type '" "Gambit::GameStrategy const &""'"); 
  }
  arg2 = reinterpret_cast< Gambit::GameStrategy * >(argp2);
  {
    try {
      result = (Gambit::StrategyIterator *)new Gambit::StrategyIterator((Gambit::StrategySupport const &)*arg1,(Gambit::GameStrategy const &)*arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__StrategyIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StrategyIterator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategySupport *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  Gambit::StrategyIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_StrategyIterator",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Gambit__StrategySupport,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StrategyIterator" "', argument " "1"" of type '" "Gambit::StrategySupport const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StrategyIterator" "', argument " "1"" of type '" "Gambit::StrategySupport const &""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategySupport * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_StrategyIterator" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_StrategyIterator" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_StrategyIterator" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_StrategyIterator" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (Gambit::StrategyIterator *)new Gambit::StrategyIterator((Gambit::StrategySupport const &)*arg1,arg2,arg3,arg4,arg5);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__StrategyIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StrategyIterator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__StrategySupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StrategyIterator__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__StrategySupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StrategyIterator__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__StrategySupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_StrategyIterator__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Gambit__StrategySupport, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_StrategyIterator__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_StrategyIterator'.\n  Possible C/C++ prototypes are:\n    Gambit::StrategyIterator(Gambit::StrategySupport const &)\n    Gambit::StrategyIterator(Gambit::StrategySupport const &,int,int)\n    Gambit::StrategyIterator(Gambit::StrategySupport const &,Gambit::GameStrategy const &)\n    Gambit::StrategyIterator(Gambit::StrategySupport const &,int,int,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyIterator_plusplus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategyIterator *arg1 = (Gambit::StrategyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrategyIterator_plusplus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyIterator_plusplus" "', argument " "1"" of type '" "Gambit::StrategyIterator *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategyIterator * >(argp1);
  {
    try {
      (arg1)->operator ++();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyIterator_plusplus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategyIterator *arg1 = (Gambit::StrategyIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrategyIterator_plusplus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyIterator_plusplus" "', argument " "1"" of type '" "Gambit::StrategyIterator *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategyIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrategyIterator_plusplus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->operator ++(arg2);
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyIterator_plusplus(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__StrategyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_StrategyIterator_plusplus__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__StrategyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StrategyIterator_plusplus__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'StrategyIterator_plusplus'.\n  Possible C/C++ prototypes are:\n    operator ++()\n    operator ++(int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyIterator_AtEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategyIterator *arg1 = (Gambit::StrategyIterator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrategyIterator_AtEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyIterator_AtEnd" "', argument " "1"" of type '" "Gambit::StrategyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategyIterator * >(argp1);
  {
    try {
      result = (bool)((Gambit::StrategyIterator const *)arg1)->AtEnd();
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyIterator___ref____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategyIterator *arg1 = (Gambit::StrategyIterator *) 0 ;
  Gambit::PureStrategyProfile *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrategyIterator___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyIterator___ref__" "', argument " "1"" of type '" "Gambit::StrategyIterator *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategyIterator * >(argp1);
  {
    try {
      {
        Gambit::PureStrategyProfile &_result_ref = (arg1)->operator *();
        result = (Gambit::PureStrategyProfile *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PureStrategyProfile, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyIterator___ref____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategyIterator *arg1 = (Gambit::StrategyIterator *) 0 ;
  Gambit::PureStrategyProfile *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrategyIterator___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrategyIterator___ref__" "', argument " "1"" of type '" "Gambit::StrategyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategyIterator * >(argp1);
  {
    try {
      {
        Gambit::PureStrategyProfile const &_result_ref = ((Gambit::StrategyIterator const *)arg1)->operator *();
        result = (Gambit::PureStrategyProfile *) &_result_ref;
      }
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gambit__PureStrategyProfile, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrategyIterator___ref__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__StrategyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_StrategyIterator___ref____SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Gambit__StrategyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_StrategyIterator___ref____SWIG_1(self, args);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_delete_StrategyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gambit::StrategyIterator *arg1 = (Gambit::StrategyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StrategyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gambit__StrategyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StrategyIterator" "', argument " "1"" of type '" "Gambit::StrategyIterator *""'"); 
  }
  arg1 = reinterpret_cast< Gambit::StrategyIterator * >(argp1);
  {
    try {
      delete arg1;
      
    }
    catch (Gambit::IndexException &) {
      SWIG_exception(SWIG_IndexError, "index out of range");
    }
    catch (Gambit::NullException &) {
      SWIG_exception(SWIG_RuntimeError, "operating on null object");
    }
    catch (...) {
      SWIG_exception(SWIG_RuntimeError, "uncaught runtime error");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StrategyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gambit__StrategyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"ios_base_register_callback", _wrap_ios_base_register_callback, METH_VARARGS, NULL},
	 { (char *)"ios_base_flags", _wrap_ios_base_flags, METH_VARARGS, NULL},
	 { (char *)"ios_base_setf", _wrap_ios_base_setf, METH_VARARGS, NULL},
	 { (char *)"ios_base_unsetf", _wrap_ios_base_unsetf, METH_VARARGS, NULL},
	 { (char *)"ios_base_precision", _wrap_ios_base_precision, METH_VARARGS, NULL},
	 { (char *)"ios_base_width", _wrap_ios_base_width, METH_VARARGS, NULL},
	 { (char *)"ios_base_sync_with_stdio", _wrap_ios_base_sync_with_stdio, METH_VARARGS, NULL},
	 { (char *)"ios_base_imbue", _wrap_ios_base_imbue, METH_VARARGS, NULL},
	 { (char *)"ios_base_getloc", _wrap_ios_base_getloc, METH_VARARGS, NULL},
	 { (char *)"ios_base_xalloc", _wrap_ios_base_xalloc, METH_VARARGS, NULL},
	 { (char *)"ios_base_iword", _wrap_ios_base_iword, METH_VARARGS, NULL},
	 { (char *)"ios_base_pword", _wrap_ios_base_pword, METH_VARARGS, NULL},
	 { (char *)"delete_ios_base", _wrap_delete_ios_base, METH_VARARGS, NULL},
	 { (char *)"ios_base_swigregister", ios_base_swigregister, METH_VARARGS, NULL},
	 { (char *)"ios_rdstate", _wrap_ios_rdstate, METH_VARARGS, NULL},
	 { (char *)"ios_clear", _wrap_ios_clear, METH_VARARGS, NULL},
	 { (char *)"ios_setstate", _wrap_ios_setstate, METH_VARARGS, NULL},
	 { (char *)"ios_good", _wrap_ios_good, METH_VARARGS, NULL},
	 { (char *)"ios_eof", _wrap_ios_eof, METH_VARARGS, NULL},
	 { (char *)"ios_fail", _wrap_ios_fail, METH_VARARGS, NULL},
	 { (char *)"ios_bad", _wrap_ios_bad, METH_VARARGS, NULL},
	 { (char *)"ios_exceptions", _wrap_ios_exceptions, METH_VARARGS, NULL},
	 { (char *)"new_ios", _wrap_new_ios, METH_VARARGS, NULL},
	 { (char *)"delete_ios", _wrap_delete_ios, METH_VARARGS, NULL},
	 { (char *)"ios_tie", _wrap_ios_tie, METH_VARARGS, NULL},
	 { (char *)"ios_rdbuf", _wrap_ios_rdbuf, METH_VARARGS, NULL},
	 { (char *)"ios_copyfmt", _wrap_ios_copyfmt, METH_VARARGS, NULL},
	 { (char *)"ios_fill", _wrap_ios_fill, METH_VARARGS, NULL},
	 { (char *)"ios_imbue", _wrap_ios_imbue, METH_VARARGS, NULL},
	 { (char *)"ios_narrow", _wrap_ios_narrow, METH_VARARGS, NULL},
	 { (char *)"ios_widen", _wrap_ios_widen, METH_VARARGS, NULL},
	 { (char *)"ios_swigregister", ios_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ostream", _wrap_new_ostream, METH_VARARGS, NULL},
	 { (char *)"delete_ostream", _wrap_delete_ostream, METH_VARARGS, NULL},
	 { (char *)"ostream___lshift__", _wrap_ostream___lshift__, METH_VARARGS, NULL},
	 { (char *)"ostream_put", _wrap_ostream_put, METH_VARARGS, NULL},
	 { (char *)"ostream_write", _wrap_ostream_write, METH_VARARGS, NULL},
	 { (char *)"ostream_flush", _wrap_ostream_flush, METH_VARARGS, NULL},
	 { (char *)"ostream_tellp", _wrap_ostream_tellp, METH_VARARGS, NULL},
	 { (char *)"ostream_seekp", _wrap_ostream_seekp, METH_VARARGS, NULL},
	 { (char *)"ostream_swigregister", ostream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_istream", _wrap_new_istream, METH_VARARGS, NULL},
	 { (char *)"delete_istream", _wrap_delete_istream, METH_VARARGS, NULL},
	 { (char *)"istream___rshift__", _wrap_istream___rshift__, METH_VARARGS, NULL},
	 { (char *)"istream_gcount", _wrap_istream_gcount, METH_VARARGS, NULL},
	 { (char *)"istream_get", _wrap_istream_get, METH_VARARGS, NULL},
	 { (char *)"istream_getline", _wrap_istream_getline, METH_VARARGS, NULL},
	 { (char *)"istream_ignore", _wrap_istream_ignore, METH_VARARGS, NULL},
	 { (char *)"istream_peek", _wrap_istream_peek, METH_VARARGS, NULL},
	 { (char *)"istream_read", _wrap_istream_read, METH_VARARGS, NULL},
	 { (char *)"istream_readsome", _wrap_istream_readsome, METH_VARARGS, NULL},
	 { (char *)"istream_putback", _wrap_istream_putback, METH_VARARGS, NULL},
	 { (char *)"istream_unget", _wrap_istream_unget, METH_VARARGS, NULL},
	 { (char *)"istream_sync", _wrap_istream_sync, METH_VARARGS, NULL},
	 { (char *)"istream_tellg", _wrap_istream_tellg, METH_VARARGS, NULL},
	 { (char *)"istream_seekg", _wrap_istream_seekg, METH_VARARGS, NULL},
	 { (char *)"istream_swigregister", istream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_iostream", _wrap_new_iostream, METH_VARARGS, NULL},
	 { (char *)"delete_iostream", _wrap_delete_iostream, METH_VARARGS, NULL},
	 { (char *)"iostream_swigregister", iostream_swigregister, METH_VARARGS, NULL},
	 { (char *)"endl", _wrap_endl, METH_VARARGS, (char *)"endl(ostream ?) -> ostream\nswig_ptr: endl_cb_ptr"},
	 { (char *)"ends", _wrap_ends, METH_VARARGS, (char *)"ends(ostream ?) -> ostream\nswig_ptr: ends_cb_ptr"},
	 { (char *)"flush", _wrap_flush, METH_VARARGS, (char *)"flush(ostream ?) -> ostream\nswig_ptr: flush_cb_ptr"},
	 { (char *)"delete_IndexException", _wrap_delete_IndexException, METH_VARARGS, NULL},
	 { (char *)"IndexException_GetDescription", _wrap_IndexException_GetDescription, METH_VARARGS, NULL},
	 { (char *)"new_IndexException", _wrap_new_IndexException, METH_VARARGS, NULL},
	 { (char *)"IndexException_swigregister", IndexException_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_RangeException", _wrap_delete_RangeException, METH_VARARGS, NULL},
	 { (char *)"RangeException_GetDescription", _wrap_RangeException_GetDescription, METH_VARARGS, NULL},
	 { (char *)"new_RangeException", _wrap_new_RangeException, METH_VARARGS, NULL},
	 { (char *)"RangeException_swigregister", RangeException_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_DimensionException", _wrap_delete_DimensionException, METH_VARARGS, NULL},
	 { (char *)"DimensionException_GetDescription", _wrap_DimensionException_GetDescription, METH_VARARGS, NULL},
	 { (char *)"new_DimensionException", _wrap_new_DimensionException, METH_VARARGS, NULL},
	 { (char *)"DimensionException_swigregister", DimensionException_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ValueException", _wrap_delete_ValueException, METH_VARARGS, NULL},
	 { (char *)"ValueException_GetDescription", _wrap_ValueException_GetDescription, METH_VARARGS, NULL},
	 { (char *)"new_ValueException", _wrap_new_ValueException, METH_VARARGS, NULL},
	 { (char *)"ValueException_swigregister", ValueException_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ZeroDivideException", _wrap_delete_ZeroDivideException, METH_VARARGS, NULL},
	 { (char *)"ZeroDivideException_GetDescription", _wrap_ZeroDivideException_GetDescription, METH_VARARGS, NULL},
	 { (char *)"new_ZeroDivideException", _wrap_new_ZeroDivideException, METH_VARARGS, NULL},
	 { (char *)"ZeroDivideException_swigregister", ZeroDivideException_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ArrayDouble", _wrap_new_ArrayDouble, METH_VARARGS, NULL},
	 { (char *)"delete_ArrayDouble", _wrap_delete_ArrayDouble, METH_VARARGS, NULL},
	 { (char *)"ArrayDouble___eq__", _wrap_ArrayDouble___eq__, METH_VARARGS, NULL},
	 { (char *)"ArrayDouble___ne__", _wrap_ArrayDouble___ne__, METH_VARARGS, NULL},
	 { (char *)"ArrayDouble_Length", _wrap_ArrayDouble_Length, METH_VARARGS, NULL},
	 { (char *)"ArrayDouble_First", _wrap_ArrayDouble_First, METH_VARARGS, NULL},
	 { (char *)"ArrayDouble_Last", _wrap_ArrayDouble_Last, METH_VARARGS, NULL},
	 { (char *)"ArrayDouble_Find", _wrap_ArrayDouble_Find, METH_VARARGS, NULL},
	 { (char *)"ArrayDouble_Contains", _wrap_ArrayDouble_Contains, METH_VARARGS, NULL},
	 { (char *)"ArrayDouble_Append", _wrap_ArrayDouble_Append, METH_VARARGS, NULL},
	 { (char *)"ArrayDouble_Insert", _wrap_ArrayDouble_Insert, METH_VARARGS, NULL},
	 { (char *)"ArrayDouble_Remove", _wrap_ArrayDouble_Remove, METH_VARARGS, NULL},
	 { (char *)"ArrayDouble_swigregister", ArrayDouble_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ArrayRational", _wrap_new_ArrayRational, METH_VARARGS, NULL},
	 { (char *)"delete_ArrayRational", _wrap_delete_ArrayRational, METH_VARARGS, NULL},
	 { (char *)"ArrayRational___eq__", _wrap_ArrayRational___eq__, METH_VARARGS, NULL},
	 { (char *)"ArrayRational___ne__", _wrap_ArrayRational___ne__, METH_VARARGS, NULL},
	 { (char *)"ArrayRational_Length", _wrap_ArrayRational_Length, METH_VARARGS, NULL},
	 { (char *)"ArrayRational_First", _wrap_ArrayRational_First, METH_VARARGS, NULL},
	 { (char *)"ArrayRational_Last", _wrap_ArrayRational_Last, METH_VARARGS, NULL},
	 { (char *)"ArrayRational_Find", _wrap_ArrayRational_Find, METH_VARARGS, NULL},
	 { (char *)"ArrayRational_Contains", _wrap_ArrayRational_Contains, METH_VARARGS, NULL},
	 { (char *)"ArrayRational_Append", _wrap_ArrayRational_Append, METH_VARARGS, NULL},
	 { (char *)"ArrayRational_Insert", _wrap_ArrayRational_Insert, METH_VARARGS, NULL},
	 { (char *)"ArrayRational_Remove", _wrap_ArrayRational_Remove, METH_VARARGS, NULL},
	 { (char *)"ArrayRational_swigregister", ArrayRational_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VectorDouble", _wrap_new_VectorDouble, METH_VARARGS, NULL},
	 { (char *)"delete_VectorDouble", _wrap_delete_VectorDouble, METH_VARARGS, NULL},
	 { (char *)"VectorDouble___add__", _wrap_VectorDouble___add__, METH_VARARGS, NULL},
	 { (char *)"VectorDouble___iadd__", _wrap_VectorDouble___iadd__, METH_VARARGS, NULL},
	 { (char *)"VectorDouble___neg__", _wrap_VectorDouble___neg__, METH_VARARGS, NULL},
	 { (char *)"VectorDouble___sub__", _wrap_VectorDouble___sub__, METH_VARARGS, NULL},
	 { (char *)"VectorDouble___isub__", _wrap_VectorDouble___isub__, METH_VARARGS, NULL},
	 { (char *)"VectorDouble___imul__", _wrap_VectorDouble___imul__, METH_VARARGS, NULL},
	 { (char *)"VectorDouble___mul__", _wrap_VectorDouble___mul__, METH_VARARGS, NULL},
	 { (char *)"VectorDouble___div__", _wrap_VectorDouble___div__, METH_VARARGS, NULL},
	 { (char *)"VectorDouble___eq__", _wrap_VectorDouble___eq__, METH_VARARGS, NULL},
	 { (char *)"VectorDouble___ne__", _wrap_VectorDouble___ne__, METH_VARARGS, NULL},
	 { (char *)"VectorDouble_NormSquared", _wrap_VectorDouble_NormSquared, METH_VARARGS, NULL},
	 { (char *)"VectorDouble_Check", _wrap_VectorDouble_Check, METH_VARARGS, NULL},
	 { (char *)"VectorDouble_swigregister", VectorDouble_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VectorRational", _wrap_new_VectorRational, METH_VARARGS, NULL},
	 { (char *)"delete_VectorRational", _wrap_delete_VectorRational, METH_VARARGS, NULL},
	 { (char *)"VectorRational___add__", _wrap_VectorRational___add__, METH_VARARGS, NULL},
	 { (char *)"VectorRational___iadd__", _wrap_VectorRational___iadd__, METH_VARARGS, NULL},
	 { (char *)"VectorRational___neg__", _wrap_VectorRational___neg__, METH_VARARGS, NULL},
	 { (char *)"VectorRational___sub__", _wrap_VectorRational___sub__, METH_VARARGS, NULL},
	 { (char *)"VectorRational___isub__", _wrap_VectorRational___isub__, METH_VARARGS, NULL},
	 { (char *)"VectorRational___imul__", _wrap_VectorRational___imul__, METH_VARARGS, NULL},
	 { (char *)"VectorRational___mul__", _wrap_VectorRational___mul__, METH_VARARGS, NULL},
	 { (char *)"VectorRational___div__", _wrap_VectorRational___div__, METH_VARARGS, NULL},
	 { (char *)"VectorRational___eq__", _wrap_VectorRational___eq__, METH_VARARGS, NULL},
	 { (char *)"VectorRational___ne__", _wrap_VectorRational___ne__, METH_VARARGS, NULL},
	 { (char *)"VectorRational_NormSquared", _wrap_VectorRational_NormSquared, METH_VARARGS, NULL},
	 { (char *)"VectorRational_Check", _wrap_VectorRational_Check, METH_VARARGS, NULL},
	 { (char *)"VectorRational_swigregister", VectorRational_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PVectorDouble", _wrap_new_PVectorDouble, METH_VARARGS, NULL},
	 { (char *)"delete_PVectorDouble", _wrap_delete_PVectorDouble, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble___call__", _wrap_PVectorDouble___call__, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble_GetRow", _wrap_PVectorDouble_GetRow, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble_SetRow", _wrap_PVectorDouble_SetRow, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble_CopyRow", _wrap_PVectorDouble_CopyRow, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble___add__", _wrap_PVectorDouble___add__, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble___iadd__", _wrap_PVectorDouble___iadd__, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble___neg__", _wrap_PVectorDouble___neg__, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble___sub__", _wrap_PVectorDouble___sub__, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble___isub__", _wrap_PVectorDouble___isub__, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble___mul__", _wrap_PVectorDouble___mul__, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble___imul__", _wrap_PVectorDouble___imul__, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble___div__", _wrap_PVectorDouble___div__, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble___eq__", _wrap_PVectorDouble___eq__, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble___ne__", _wrap_PVectorDouble___ne__, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble_Lengths", _wrap_PVectorDouble_Lengths, METH_VARARGS, NULL},
	 { (char *)"PVectorDouble_swigregister", PVectorDouble_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PVectorRational", _wrap_new_PVectorRational, METH_VARARGS, NULL},
	 { (char *)"delete_PVectorRational", _wrap_delete_PVectorRational, METH_VARARGS, NULL},
	 { (char *)"PVectorRational___call__", _wrap_PVectorRational___call__, METH_VARARGS, NULL},
	 { (char *)"PVectorRational_GetRow", _wrap_PVectorRational_GetRow, METH_VARARGS, NULL},
	 { (char *)"PVectorRational_SetRow", _wrap_PVectorRational_SetRow, METH_VARARGS, NULL},
	 { (char *)"PVectorRational_CopyRow", _wrap_PVectorRational_CopyRow, METH_VARARGS, NULL},
	 { (char *)"PVectorRational___add__", _wrap_PVectorRational___add__, METH_VARARGS, NULL},
	 { (char *)"PVectorRational___iadd__", _wrap_PVectorRational___iadd__, METH_VARARGS, NULL},
	 { (char *)"PVectorRational___neg__", _wrap_PVectorRational___neg__, METH_VARARGS, NULL},
	 { (char *)"PVectorRational___sub__", _wrap_PVectorRational___sub__, METH_VARARGS, NULL},
	 { (char *)"PVectorRational___isub__", _wrap_PVectorRational___isub__, METH_VARARGS, NULL},
	 { (char *)"PVectorRational___mul__", _wrap_PVectorRational___mul__, METH_VARARGS, NULL},
	 { (char *)"PVectorRational___imul__", _wrap_PVectorRational___imul__, METH_VARARGS, NULL},
	 { (char *)"PVectorRational___div__", _wrap_PVectorRational___div__, METH_VARARGS, NULL},
	 { (char *)"PVectorRational___eq__", _wrap_PVectorRational___eq__, METH_VARARGS, NULL},
	 { (char *)"PVectorRational___ne__", _wrap_PVectorRational___ne__, METH_VARARGS, NULL},
	 { (char *)"PVectorRational_Lengths", _wrap_PVectorRational_Lengths, METH_VARARGS, NULL},
	 { (char *)"PVectorRational_swigregister", PVectorRational_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DVectorDouble", _wrap_new_DVectorDouble, METH_VARARGS, NULL},
	 { (char *)"delete_DVectorDouble", _wrap_delete_DVectorDouble, METH_VARARGS, NULL},
	 { (char *)"DVectorDouble___call__", _wrap_DVectorDouble___call__, METH_VARARGS, NULL},
	 { (char *)"DVectorDouble_CopySubRow", _wrap_DVectorDouble_CopySubRow, METH_VARARGS, NULL},
	 { (char *)"DVectorDouble___add__", _wrap_DVectorDouble___add__, METH_VARARGS, NULL},
	 { (char *)"DVectorDouble___iadd__", _wrap_DVectorDouble___iadd__, METH_VARARGS, NULL},
	 { (char *)"DVectorDouble___neg__", _wrap_DVectorDouble___neg__, METH_VARARGS, NULL},
	 { (char *)"DVectorDouble___sub__", _wrap_DVectorDouble___sub__, METH_VARARGS, NULL},
	 { (char *)"DVectorDouble___isub__", _wrap_DVectorDouble___isub__, METH_VARARGS, NULL},
	 { (char *)"DVectorDouble___mul__", _wrap_DVectorDouble___mul__, METH_VARARGS, NULL},
	 { (char *)"DVectorDouble___imul__", _wrap_DVectorDouble___imul__, METH_VARARGS, NULL},
	 { (char *)"DVectorDouble___div__", _wrap_DVectorDouble___div__, METH_VARARGS, NULL},
	 { (char *)"DVectorDouble___eq__", _wrap_DVectorDouble___eq__, METH_VARARGS, NULL},
	 { (char *)"DVectorDouble___ne__", _wrap_DVectorDouble___ne__, METH_VARARGS, NULL},
	 { (char *)"DVectorDouble_DPLengths", _wrap_DVectorDouble_DPLengths, METH_VARARGS, NULL},
	 { (char *)"DVectorDouble_swigregister", DVectorDouble_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DVectorRational", _wrap_new_DVectorRational, METH_VARARGS, NULL},
	 { (char *)"delete_DVectorRational", _wrap_delete_DVectorRational, METH_VARARGS, NULL},
	 { (char *)"DVectorRational___call__", _wrap_DVectorRational___call__, METH_VARARGS, NULL},
	 { (char *)"DVectorRational_CopySubRow", _wrap_DVectorRational_CopySubRow, METH_VARARGS, NULL},
	 { (char *)"DVectorRational___add__", _wrap_DVectorRational___add__, METH_VARARGS, NULL},
	 { (char *)"DVectorRational___iadd__", _wrap_DVectorRational___iadd__, METH_VARARGS, NULL},
	 { (char *)"DVectorRational___neg__", _wrap_DVectorRational___neg__, METH_VARARGS, NULL},
	 { (char *)"DVectorRational___sub__", _wrap_DVectorRational___sub__, METH_VARARGS, NULL},
	 { (char *)"DVectorRational___isub__", _wrap_DVectorRational___isub__, METH_VARARGS, NULL},
	 { (char *)"DVectorRational___mul__", _wrap_DVectorRational___mul__, METH_VARARGS, NULL},
	 { (char *)"DVectorRational___imul__", _wrap_DVectorRational___imul__, METH_VARARGS, NULL},
	 { (char *)"DVectorRational___div__", _wrap_DVectorRational___div__, METH_VARARGS, NULL},
	 { (char *)"DVectorRational___eq__", _wrap_DVectorRational___eq__, METH_VARARGS, NULL},
	 { (char *)"DVectorRational___ne__", _wrap_DVectorRational___ne__, METH_VARARGS, NULL},
	 { (char *)"DVectorRational_DPLengths", _wrap_DVectorRational_DPLengths, METH_VARARGS, NULL},
	 { (char *)"DVectorRational_swigregister", DVectorRational_swigregister, METH_VARARGS, NULL},
	 { (char *)"IntegerRep_len_set", _wrap_IntegerRep_len_set, METH_VARARGS, NULL},
	 { (char *)"IntegerRep_len_get", _wrap_IntegerRep_len_get, METH_VARARGS, NULL},
	 { (char *)"IntegerRep_sz_set", _wrap_IntegerRep_sz_set, METH_VARARGS, NULL},
	 { (char *)"IntegerRep_sz_get", _wrap_IntegerRep_sz_get, METH_VARARGS, NULL},
	 { (char *)"IntegerRep_sgn_set", _wrap_IntegerRep_sgn_set, METH_VARARGS, NULL},
	 { (char *)"IntegerRep_sgn_get", _wrap_IntegerRep_sgn_get, METH_VARARGS, NULL},
	 { (char *)"IntegerRep_s_set", _wrap_IntegerRep_s_set, METH_VARARGS, NULL},
	 { (char *)"IntegerRep_s_get", _wrap_IntegerRep_s_get, METH_VARARGS, NULL},
	 { (char *)"new_IntegerRep", _wrap_new_IntegerRep, METH_VARARGS, NULL},
	 { (char *)"delete_IntegerRep", _wrap_delete_IntegerRep, METH_VARARGS, NULL},
	 { (char *)"IntegerRep_swigregister", IntegerRep_swigregister, METH_VARARGS, NULL},
	 { (char *)"Ialloc", _wrap_Ialloc, METH_VARARGS, NULL},
	 { (char *)"Icalloc", _wrap_Icalloc, METH_VARARGS, NULL},
	 { (char *)"Icopy_ulong", _wrap_Icopy_ulong, METH_VARARGS, NULL},
	 { (char *)"Icopy_long", _wrap_Icopy_long, METH_VARARGS, NULL},
	 { (char *)"Icopy", _wrap_Icopy, METH_VARARGS, NULL},
	 { (char *)"Iresize", _wrap_Iresize, METH_VARARGS, NULL},
	 { (char *)"multiply", _wrap_multiply, METH_VARARGS, NULL},
	 { (char *)"bitop", _wrap_bitop, METH_VARARGS, NULL},
	 { (char *)"power", _wrap_power, METH_VARARGS, NULL},
	 { (char *)"Compl", _wrap_Compl, METH_VARARGS, NULL},
	 { (char *)"cvtItoa", _wrap_cvtItoa, METH_VARARGS, NULL},
	 { (char *)"Itolong", _wrap_Itolong, METH_VARARGS, NULL},
	 { (char *)"Itodouble", _wrap_Itodouble, METH_VARARGS, NULL},
	 { (char *)"Iislong", _wrap_Iislong, METH_VARARGS, NULL},
	 { (char *)"Iisdouble", _wrap_Iisdouble, METH_VARARGS, NULL},
	 { (char *)"new_Integer", _wrap_new_Integer, METH_VARARGS, NULL},
	 { (char *)"delete_Integer", _wrap_delete_Integer, METH_VARARGS, NULL},
	 { (char *)"Integer_plusplus", _wrap_Integer_plusplus, METH_VARARGS, NULL},
	 { (char *)"Integer_negate", _wrap_Integer_negate, METH_VARARGS, NULL},
	 { (char *)"Integer_abs", _wrap_Integer_abs, METH_VARARGS, NULL},
	 { (char *)"Integer___eq__", _wrap_Integer___eq__, METH_VARARGS, NULL},
	 { (char *)"Integer___ne__", _wrap_Integer___ne__, METH_VARARGS, NULL},
	 { (char *)"Integer___lt__", _wrap_Integer___lt__, METH_VARARGS, NULL},
	 { (char *)"Integer___le__", _wrap_Integer___le__, METH_VARARGS, NULL},
	 { (char *)"Integer___gt__", _wrap_Integer___gt__, METH_VARARGS, NULL},
	 { (char *)"Integer___ge__", _wrap_Integer___ge__, METH_VARARGS, NULL},
	 { (char *)"Integer___iadd__", _wrap_Integer___iadd__, METH_VARARGS, NULL},
	 { (char *)"Integer___isub__", _wrap_Integer___isub__, METH_VARARGS, NULL},
	 { (char *)"Integer___imul__", _wrap_Integer___imul__, METH_VARARGS, NULL},
	 { (char *)"Integer___idiv__", _wrap_Integer___idiv__, METH_VARARGS, NULL},
	 { (char *)"Integer___imod__", _wrap_Integer___imod__, METH_VARARGS, NULL},
	 { (char *)"Integer___ilshift__", _wrap_Integer___ilshift__, METH_VARARGS, NULL},
	 { (char *)"Integer___irshift__", _wrap_Integer___irshift__, METH_VARARGS, NULL},
	 { (char *)"Integer___neg__", _wrap_Integer___neg__, METH_VARARGS, NULL},
	 { (char *)"Integer___add__", _wrap_Integer___add__, METH_VARARGS, NULL},
	 { (char *)"Integer___sub__", _wrap_Integer___sub__, METH_VARARGS, NULL},
	 { (char *)"Integer___mul__", _wrap_Integer___mul__, METH_VARARGS, NULL},
	 { (char *)"Integer___div__", _wrap_Integer___div__, METH_VARARGS, NULL},
	 { (char *)"Integer___mod__", _wrap_Integer___mod__, METH_VARARGS, NULL},
	 { (char *)"Integer___lshift__", _wrap_Integer___lshift__, METH_VARARGS, NULL},
	 { (char *)"Integer___rshift__", _wrap_Integer___rshift__, METH_VARARGS, NULL},
	 { (char *)"Integer_fits_in_long", _wrap_Integer_fits_in_long, METH_VARARGS, NULL},
	 { (char *)"Integer_fits_in_double", _wrap_Integer_fits_in_double, METH_VARARGS, NULL},
	 { (char *)"Integer_as_long", _wrap_Integer_as_long, METH_VARARGS, NULL},
	 { (char *)"Integer_as_double", _wrap_Integer_as_double, METH_VARARGS, NULL},
	 { (char *)"Integer_initialized", _wrap_Integer_initialized, METH_VARARGS, NULL},
	 { (char *)"Integer_error", _wrap_Integer_error, METH_VARARGS, NULL},
	 { (char *)"Integer_OK", _wrap_Integer_OK, METH_VARARGS, NULL},
	 { (char *)"Integer___str__", _wrap_Integer___str__, METH_VARARGS, NULL},
	 { (char *)"Integer___repr__", _wrap_Integer___repr__, METH_VARARGS, NULL},
	 { (char *)"Integer___radd__", _wrap_Integer___radd__, METH_VARARGS, NULL},
	 { (char *)"Integer___rsub__", _wrap_Integer___rsub__, METH_VARARGS, NULL},
	 { (char *)"Integer___rmul__", _wrap_Integer___rmul__, METH_VARARGS, NULL},
	 { (char *)"Integer___rdiv__", _wrap_Integer___rdiv__, METH_VARARGS, NULL},
	 { (char *)"Integer___int__", _wrap_Integer___int__, METH_VARARGS, NULL},
	 { (char *)"Integer_swigregister", Integer_swigregister, METH_VARARGS, NULL},
	 { (char *)"Ipow", _wrap_Ipow, METH_VARARGS, NULL},
	 { (char *)"sqrt", _wrap_sqrt, METH_VARARGS, NULL},
	 { (char *)"lcm", _wrap_lcm, METH_VARARGS, NULL},
	 { (char *)"new_Rational", _wrap_new_Rational, METH_VARARGS, NULL},
	 { (char *)"delete_Rational", _wrap_delete_Rational, METH_VARARGS, NULL},
	 { (char *)"Rational___eq__", _wrap_Rational___eq__, METH_VARARGS, NULL},
	 { (char *)"Rational___ne__", _wrap_Rational___ne__, METH_VARARGS, NULL},
	 { (char *)"Rational___lt__", _wrap_Rational___lt__, METH_VARARGS, NULL},
	 { (char *)"Rational___le__", _wrap_Rational___le__, METH_VARARGS, NULL},
	 { (char *)"Rational___gt__", _wrap_Rational___gt__, METH_VARARGS, NULL},
	 { (char *)"Rational___ge__", _wrap_Rational___ge__, METH_VARARGS, NULL},
	 { (char *)"Rational___neg__", _wrap_Rational___neg__, METH_VARARGS, NULL},
	 { (char *)"Rational_negate", _wrap_Rational_negate, METH_VARARGS, NULL},
	 { (char *)"Rational_invert", _wrap_Rational_invert, METH_VARARGS, NULL},
	 { (char *)"Rational_numerator", _wrap_Rational_numerator, METH_VARARGS, NULL},
	 { (char *)"Rational_denominator", _wrap_Rational_denominator, METH_VARARGS, NULL},
	 { (char *)"Rational_fits_in_float", _wrap_Rational_fits_in_float, METH_VARARGS, NULL},
	 { (char *)"Rational_fits_in_double", _wrap_Rational_fits_in_double, METH_VARARGS, NULL},
	 { (char *)"Rational_error", _wrap_Rational_error, METH_VARARGS, NULL},
	 { (char *)"Rational_OK", _wrap_Rational_OK, METH_VARARGS, NULL},
	 { (char *)"Rational___str__", _wrap_Rational___str__, METH_VARARGS, NULL},
	 { (char *)"Rational___repr__", _wrap_Rational___repr__, METH_VARARGS, NULL},
	 { (char *)"Rational___add__", _wrap_Rational___add__, METH_VARARGS, NULL},
	 { (char *)"Rational___sub__", _wrap_Rational___sub__, METH_VARARGS, NULL},
	 { (char *)"Rational___mul__", _wrap_Rational___mul__, METH_VARARGS, NULL},
	 { (char *)"Rational___div__", _wrap_Rational___div__, METH_VARARGS, NULL},
	 { (char *)"Rational___iadd__", _wrap_Rational___iadd__, METH_VARARGS, NULL},
	 { (char *)"Rational___isub__", _wrap_Rational___isub__, METH_VARARGS, NULL},
	 { (char *)"Rational___imul__", _wrap_Rational___imul__, METH_VARARGS, NULL},
	 { (char *)"Rational___idiv__", _wrap_Rational___idiv__, METH_VARARGS, NULL},
	 { (char *)"Rational___pos__", _wrap_Rational___pos__, METH_VARARGS, NULL},
	 { (char *)"Rational___radd__", _wrap_Rational___radd__, METH_VARARGS, NULL},
	 { (char *)"Rational___rsub__", _wrap_Rational___rsub__, METH_VARARGS, NULL},
	 { (char *)"Rational___rmul__", _wrap_Rational___rmul__, METH_VARARGS, NULL},
	 { (char *)"Rational___rdiv__", _wrap_Rational___rdiv__, METH_VARARGS, NULL},
	 { (char *)"Rational___float__", _wrap_Rational___float__, METH_VARARGS, NULL},
	 { (char *)"Rational___abs__", _wrap_Rational___abs__, METH_VARARGS, NULL},
	 { (char *)"Rational_swigregister", Rational_swigregister, METH_VARARGS, NULL},
	 { (char *)"ToText", _wrap_ToText, METH_VARARGS, NULL},
	 { (char *)"ToRational", _wrap_ToRational, METH_VARARGS, NULL},
	 { (char *)"Epsilon", _wrap_Epsilon, METH_VARARGS, NULL},
	 { (char *)"ToDouble", _wrap_ToDouble, METH_VARARGS, NULL},
	 { (char *)"ToNumber", _wrap_ToNumber, METH_VARARGS, NULL},
	 { (char *)"new_GameObject", _wrap_new_GameObject, METH_VARARGS, NULL},
	 { (char *)"GameObject_IsValid", _wrap_GameObject_IsValid, METH_VARARGS, NULL},
	 { (char *)"GameObject_Invalidate", _wrap_GameObject_Invalidate, METH_VARARGS, NULL},
	 { (char *)"GameObject_IncRef", _wrap_GameObject_IncRef, METH_VARARGS, NULL},
	 { (char *)"GameObject_DecRef", _wrap_GameObject_DecRef, METH_VARARGS, NULL},
	 { (char *)"GameObject_RefCount", _wrap_GameObject_RefCount, METH_VARARGS, NULL},
	 { (char *)"delete_GameObject", _wrap_delete_GameObject, METH_VARARGS, NULL},
	 { (char *)"GameObject_swigregister", GameObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_NullException", _wrap_delete_NullException, METH_VARARGS, NULL},
	 { (char *)"NullException_GetDescription", _wrap_NullException_GetDescription, METH_VARARGS, NULL},
	 { (char *)"new_NullException", _wrap_new_NullException, METH_VARARGS, NULL},
	 { (char *)"NullException_swigregister", NullException_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_UndefinedException", _wrap_delete_UndefinedException, METH_VARARGS, NULL},
	 { (char *)"UndefinedException_GetDescription", _wrap_UndefinedException_GetDescription, METH_VARARGS, NULL},
	 { (char *)"new_UndefinedException", _wrap_new_UndefinedException, METH_VARARGS, NULL},
	 { (char *)"UndefinedException_swigregister", UndefinedException_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_MismatchException", _wrap_delete_MismatchException, METH_VARARGS, NULL},
	 { (char *)"MismatchException_GetDescription", _wrap_MismatchException_GetDescription, METH_VARARGS, NULL},
	 { (char *)"new_MismatchException", _wrap_new_MismatchException, METH_VARARGS, NULL},
	 { (char *)"MismatchException_swigregister", MismatchException_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_InvalidFileException", _wrap_delete_InvalidFileException, METH_VARARGS, NULL},
	 { (char *)"InvalidFileException_GetDescription", _wrap_InvalidFileException_GetDescription, METH_VARARGS, NULL},
	 { (char *)"new_InvalidFileException", _wrap_new_InvalidFileException, METH_VARARGS, NULL},
	 { (char *)"InvalidFileException_swigregister", InvalidFileException_swigregister, METH_VARARGS, NULL},
	 { (char *)"GameOutcomeRep_GetGame", _wrap_GameOutcomeRep_GetGame, METH_VARARGS, NULL},
	 { (char *)"GameOutcomeRep_GetNumber", _wrap_GameOutcomeRep_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GameOutcomeRep_GetLabel", _wrap_GameOutcomeRep_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GameOutcomeRep_SetLabel", _wrap_GameOutcomeRep_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GameOutcomeRep_GetPayoff", _wrap_GameOutcomeRep_GetPayoff, METH_VARARGS, NULL},
	 { (char *)"GameOutcomeRep_SetPayoff", _wrap_GameOutcomeRep_SetPayoff, METH_VARARGS, NULL},
	 { (char *)"GameOutcomeRep_swigregister", GameOutcomeRep_swigregister, METH_VARARGS, NULL},
	 { (char *)"GameActionRep_GetNumber", _wrap_GameActionRep_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GameActionRep_GetInfoset", _wrap_GameActionRep_GetInfoset, METH_VARARGS, NULL},
	 { (char *)"GameActionRep_GetLabel", _wrap_GameActionRep_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GameActionRep_SetLabel", _wrap_GameActionRep_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GameActionRep_Precedes", _wrap_GameActionRep_Precedes, METH_VARARGS, NULL},
	 { (char *)"GameActionRep_DeleteAction", _wrap_GameActionRep_DeleteAction, METH_VARARGS, NULL},
	 { (char *)"GameActionRep_swigregister", GameActionRep_swigregister, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_GetGame", _wrap_GameInfosetRep_GetGame, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_GetNumber", _wrap_GameInfosetRep_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_GetPlayer", _wrap_GameInfosetRep_GetPlayer, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_SetPlayer", _wrap_GameInfosetRep_SetPlayer, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_IsChanceInfoset", _wrap_GameInfosetRep_IsChanceInfoset, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_SetLabel", _wrap_GameInfosetRep_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_GetLabel", _wrap_GameInfosetRep_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_InsertAction", _wrap_GameInfosetRep_InsertAction, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_NumActions", _wrap_GameInfosetRep_NumActions, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_GetAction", _wrap_GameInfosetRep_GetAction, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_Actions", _wrap_GameInfosetRep_Actions, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_NumMembers", _wrap_GameInfosetRep_NumMembers, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_GetMember", _wrap_GameInfosetRep_GetMember, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_Precedes", _wrap_GameInfosetRep_Precedes, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_SetActionProb", _wrap_GameInfosetRep_SetActionProb, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_Reveal", _wrap_GameInfosetRep_Reveal, METH_VARARGS, NULL},
	 { (char *)"GameInfosetRep_swigregister", GameInfosetRep_swigregister, METH_VARARGS, NULL},
	 { (char *)"GameStrategyRep_GetLabel", _wrap_GameStrategyRep_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GameStrategyRep_SetLabel", _wrap_GameStrategyRep_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GameStrategyRep_GetPlayer", _wrap_GameStrategyRep_GetPlayer, METH_VARARGS, NULL},
	 { (char *)"GameStrategyRep_GetNumber", _wrap_GameStrategyRep_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GameStrategyRep_GetId", _wrap_GameStrategyRep_GetId, METH_VARARGS, NULL},
	 { (char *)"GameStrategyRep_DeleteStrategy", _wrap_GameStrategyRep_DeleteStrategy, METH_VARARGS, NULL},
	 { (char *)"delete_GameStrategyRep", _wrap_delete_GameStrategyRep, METH_VARARGS, NULL},
	 { (char *)"GameStrategyRep_swigregister", GameStrategyRep_swigregister, METH_VARARGS, NULL},
	 { (char *)"GamePlayerRep_GetNumber", _wrap_GamePlayerRep_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GamePlayerRep_GetGame", _wrap_GamePlayerRep_GetGame, METH_VARARGS, NULL},
	 { (char *)"GamePlayerRep_GetLabel", _wrap_GamePlayerRep_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GamePlayerRep_SetLabel", _wrap_GamePlayerRep_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GamePlayerRep_IsChance", _wrap_GamePlayerRep_IsChance, METH_VARARGS, NULL},
	 { (char *)"GamePlayerRep_NumInfosets", _wrap_GamePlayerRep_NumInfosets, METH_VARARGS, NULL},
	 { (char *)"GamePlayerRep_GetInfoset", _wrap_GamePlayerRep_GetInfoset, METH_VARARGS, NULL},
	 { (char *)"GamePlayerRep_Infosets", _wrap_GamePlayerRep_Infosets, METH_VARARGS, NULL},
	 { (char *)"GamePlayerRep_NumStrategies", _wrap_GamePlayerRep_NumStrategies, METH_VARARGS, NULL},
	 { (char *)"GamePlayerRep_GetStrategy", _wrap_GamePlayerRep_GetStrategy, METH_VARARGS, NULL},
	 { (char *)"GamePlayerRep_Strategies", _wrap_GamePlayerRep_Strategies, METH_VARARGS, NULL},
	 { (char *)"GamePlayerRep_NewStrategy", _wrap_GamePlayerRep_NewStrategy, METH_VARARGS, NULL},
	 { (char *)"GamePlayerRep_swigregister", GamePlayerRep_swigregister, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_GetGame", _wrap_GameNodeRep_GetGame, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_GetLabel", _wrap_GameNodeRep_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_SetLabel", _wrap_GameNodeRep_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_GetNumber", _wrap_GameNodeRep_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_NumberInInfoset", _wrap_GameNodeRep_NumberInInfoset, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_NumChildren", _wrap_GameNodeRep_NumChildren, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_GetInfoset", _wrap_GameNodeRep_GetInfoset, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_SetInfoset", _wrap_GameNodeRep_SetInfoset, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_LeaveInfoset", _wrap_GameNodeRep_LeaveInfoset, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_IsTerminal", _wrap_GameNodeRep_IsTerminal, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_GetPlayer", _wrap_GameNodeRep_GetPlayer, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_GetPriorAction", _wrap_GameNodeRep_GetPriorAction, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_GetChild", _wrap_GameNodeRep_GetChild, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_GetParent", _wrap_GameNodeRep_GetParent, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_GetNextSibling", _wrap_GameNodeRep_GetNextSibling, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_GetPriorSibling", _wrap_GameNodeRep_GetPriorSibling, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_GetOutcome", _wrap_GameNodeRep_GetOutcome, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_SetOutcome", _wrap_GameNodeRep_SetOutcome, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_IsSuccessorOf", _wrap_GameNodeRep_IsSuccessorOf, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_IsSubgameRoot", _wrap_GameNodeRep_IsSubgameRoot, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_DeleteParent", _wrap_GameNodeRep_DeleteParent, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_DeleteTree", _wrap_GameNodeRep_DeleteTree, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_CopyTree", _wrap_GameNodeRep_CopyTree, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_MoveTree", _wrap_GameNodeRep_MoveTree, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_AppendMove", _wrap_GameNodeRep_AppendMove, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_InsertMove", _wrap_GameNodeRep_InsertMove, METH_VARARGS, NULL},
	 { (char *)"GameNodeRep_swigregister", GameNodeRep_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PureStrategyProfile", _wrap_new_PureStrategyProfile, METH_VARARGS, NULL},
	 { (char *)"PureStrategyProfile_GetStrategy", _wrap_PureStrategyProfile_GetStrategy, METH_VARARGS, NULL},
	 { (char *)"PureStrategyProfile_SetStrategy", _wrap_PureStrategyProfile_SetStrategy, METH_VARARGS, NULL},
	 { (char *)"PureStrategyProfile_GetOutcome", _wrap_PureStrategyProfile_GetOutcome, METH_VARARGS, NULL},
	 { (char *)"PureStrategyProfile_SetOutcome", _wrap_PureStrategyProfile_SetOutcome, METH_VARARGS, NULL},
	 { (char *)"PureStrategyProfile_GetPayoff", _wrap_PureStrategyProfile_GetPayoff, METH_VARARGS, NULL},
	 { (char *)"PureStrategyProfile_GetStrategyValue", _wrap_PureStrategyProfile_GetStrategyValue, METH_VARARGS, NULL},
	 { (char *)"delete_PureStrategyProfile", _wrap_delete_PureStrategyProfile, METH_VARARGS, NULL},
	 { (char *)"PureStrategyProfile_swigregister", PureStrategyProfile_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PureBehavProfile", _wrap_new_PureBehavProfile, METH_VARARGS, NULL},
	 { (char *)"PureBehavProfile_GetAction", _wrap_PureBehavProfile_GetAction, METH_VARARGS, NULL},
	 { (char *)"PureBehavProfile_SetAction", _wrap_PureBehavProfile_SetAction, METH_VARARGS, NULL},
	 { (char *)"delete_PureBehavProfile", _wrap_delete_PureBehavProfile, METH_VARARGS, NULL},
	 { (char *)"PureBehavProfile_swigregister", PureBehavProfile_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GameRep", _wrap_new_GameRep, METH_VARARGS, NULL},
	 { (char *)"delete_GameRep", _wrap_delete_GameRep, METH_VARARGS, NULL},
	 { (char *)"GameRep_Copy", _wrap_GameRep_Copy, METH_VARARGS, NULL},
	 { (char *)"GameRep_IsTree", _wrap_GameRep_IsTree, METH_VARARGS, NULL},
	 { (char *)"GameRep_GetTitle", _wrap_GameRep_GetTitle, METH_VARARGS, NULL},
	 { (char *)"GameRep_SetTitle", _wrap_GameRep_SetTitle, METH_VARARGS, NULL},
	 { (char *)"GameRep_GetComment", _wrap_GameRep_GetComment, METH_VARARGS, NULL},
	 { (char *)"GameRep_SetComment", _wrap_GameRep_SetComment, METH_VARARGS, NULL},
	 { (char *)"GameRep_IsConstSum", _wrap_GameRep_IsConstSum, METH_VARARGS, NULL},
	 { (char *)"GameRep_GetMinPayoff", _wrap_GameRep_GetMinPayoff, METH_VARARGS, NULL},
	 { (char *)"GameRep_GetMaxPayoff", _wrap_GameRep_GetMaxPayoff, METH_VARARGS, NULL},
	 { (char *)"GameRep_IsPerfectRecall", _wrap_GameRep_IsPerfectRecall, METH_VARARGS, NULL},
	 { (char *)"GameRep_Canonicalize", _wrap_GameRep_Canonicalize, METH_VARARGS, NULL},
	 { (char *)"GameRep_ClearComputedValues", _wrap_GameRep_ClearComputedValues, METH_VARARGS, NULL},
	 { (char *)"GameRep_BuildComputedValues", _wrap_GameRep_BuildComputedValues, METH_VARARGS, NULL},
	 { (char *)"GameRep_HasComputedValues", _wrap_GameRep_HasComputedValues, METH_VARARGS, NULL},
	 { (char *)"GameRep_WriteEfgFile", _wrap_GameRep_WriteEfgFile, METH_VARARGS, NULL},
	 { (char *)"GameRep_WriteNfgFile", _wrap_GameRep_WriteNfgFile, METH_VARARGS, NULL},
	 { (char *)"GameRep_NumActions", _wrap_GameRep_NumActions, METH_VARARGS, NULL},
	 { (char *)"GameRep_NumMembers", _wrap_GameRep_NumMembers, METH_VARARGS, NULL},
	 { (char *)"GameRep_NumStrategies", _wrap_GameRep_NumStrategies, METH_VARARGS, NULL},
	 { (char *)"GameRep_GetStrategy", _wrap_GameRep_GetStrategy, METH_VARARGS, NULL},
	 { (char *)"GameRep_BehavProfileLength", _wrap_GameRep_BehavProfileLength, METH_VARARGS, NULL},
	 { (char *)"GameRep_MixedProfileLength", _wrap_GameRep_MixedProfileLength, METH_VARARGS, NULL},
	 { (char *)"GameRep_NumPlayers", _wrap_GameRep_NumPlayers, METH_VARARGS, NULL},
	 { (char *)"GameRep_GetPlayer", _wrap_GameRep_GetPlayer, METH_VARARGS, NULL},
	 { (char *)"GameRep_Players", _wrap_GameRep_Players, METH_VARARGS, NULL},
	 { (char *)"GameRep_GetChance", _wrap_GameRep_GetChance, METH_VARARGS, NULL},
	 { (char *)"GameRep_NewPlayer", _wrap_GameRep_NewPlayer, METH_VARARGS, NULL},
	 { (char *)"GameRep_GetInfoset", _wrap_GameRep_GetInfoset, METH_VARARGS, NULL},
	 { (char *)"GameRep_NumInfosets", _wrap_GameRep_NumInfosets, METH_VARARGS, NULL},
	 { (char *)"GameRep_GetAction", _wrap_GameRep_GetAction, METH_VARARGS, NULL},
	 { (char *)"GameRep_NumOutcomes", _wrap_GameRep_NumOutcomes, METH_VARARGS, NULL},
	 { (char *)"GameRep_GetOutcome", _wrap_GameRep_GetOutcome, METH_VARARGS, NULL},
	 { (char *)"GameRep_NewOutcome", _wrap_GameRep_NewOutcome, METH_VARARGS, NULL},
	 { (char *)"GameRep_DeleteOutcome", _wrap_GameRep_DeleteOutcome, METH_VARARGS, NULL},
	 { (char *)"GameRep_GetRoot", _wrap_GameRep_GetRoot, METH_VARARGS, NULL},
	 { (char *)"GameRep_NumNodes", _wrap_GameRep_NumNodes, METH_VARARGS, NULL},
	 { (char *)"GameRep_efg_file", _wrap_GameRep_efg_file, METH_VARARGS, NULL},
	 { (char *)"GameRep_nfg_file", _wrap_GameRep_nfg_file, METH_VARARGS, NULL},
	 { (char *)"GameRep_NewMixedStrategyDouble", _wrap_GameRep_NewMixedStrategyDouble, METH_VARARGS, NULL},
	 { (char *)"GameRep_NewMixedStrategyRational", _wrap_GameRep_NewMixedStrategyRational, METH_VARARGS, NULL},
	 { (char *)"GameRep_NewMixedBehavDouble", _wrap_GameRep_NewMixedBehavDouble, METH_VARARGS, NULL},
	 { (char *)"GameRep_NewMixedBehavRational", _wrap_GameRep_NewMixedBehavRational, METH_VARARGS, NULL},
	 { (char *)"GameRep_swigregister", GameRep_swigregister, METH_VARARGS, NULL},
	 { (char *)"NewTree", _wrap_NewTree, METH_VARARGS, NULL},
	 { (char *)"NewTable", _wrap_NewTable, METH_VARARGS, NULL},
	 { (char *)"ReadGame", _wrap_ReadGame, METH_VARARGS, NULL},
	 { (char *)"new_GameOutcome", _wrap_new_GameOutcome, METH_VARARGS, NULL},
	 { (char *)"delete_GameOutcome", _wrap_delete_GameOutcome, METH_VARARGS, NULL},
	 { (char *)"GameOutcome___deref__", _wrap_GameOutcome___deref__, METH_VARARGS, NULL},
	 { (char *)"GameOutcome___eq__", _wrap_GameOutcome___eq__, METH_VARARGS, NULL},
	 { (char *)"GameOutcome___ne__", _wrap_GameOutcome___ne__, METH_VARARGS, NULL},
	 { (char *)"GameOutcome_GetGame", _wrap_GameOutcome_GetGame, METH_VARARGS, NULL},
	 { (char *)"GameOutcome_GetNumber", _wrap_GameOutcome_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GameOutcome_GetLabel", _wrap_GameOutcome_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GameOutcome_SetLabel", _wrap_GameOutcome_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GameOutcome_SetPayoff", _wrap_GameOutcome_SetPayoff, METH_VARARGS, NULL},
	 { (char *)"GameOutcome_GetPayoff", _wrap_GameOutcome_GetPayoff, METH_VARARGS, NULL},
	 { (char *)"GameOutcome_IsValid", _wrap_GameOutcome_IsValid, METH_VARARGS, NULL},
	 { (char *)"GameOutcome_Invalidate", _wrap_GameOutcome_Invalidate, METH_VARARGS, NULL},
	 { (char *)"GameOutcome_IncRef", _wrap_GameOutcome_IncRef, METH_VARARGS, NULL},
	 { (char *)"GameOutcome_DecRef", _wrap_GameOutcome_DecRef, METH_VARARGS, NULL},
	 { (char *)"GameOutcome_RefCount", _wrap_GameOutcome_RefCount, METH_VARARGS, NULL},
	 { (char *)"GameOutcome_swigregister", GameOutcome_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GameStrategy", _wrap_new_GameStrategy, METH_VARARGS, NULL},
	 { (char *)"delete_GameStrategy", _wrap_delete_GameStrategy, METH_VARARGS, NULL},
	 { (char *)"GameStrategy___deref__", _wrap_GameStrategy___deref__, METH_VARARGS, NULL},
	 { (char *)"GameStrategy___eq__", _wrap_GameStrategy___eq__, METH_VARARGS, NULL},
	 { (char *)"GameStrategy___ne__", _wrap_GameStrategy___ne__, METH_VARARGS, NULL},
	 { (char *)"GameStrategy_GetLabel", _wrap_GameStrategy_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GameStrategy_SetLabel", _wrap_GameStrategy_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GameStrategy_GetPlayer", _wrap_GameStrategy_GetPlayer, METH_VARARGS, NULL},
	 { (char *)"GameStrategy_GetNumber", _wrap_GameStrategy_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GameStrategy_GetId", _wrap_GameStrategy_GetId, METH_VARARGS, NULL},
	 { (char *)"GameStrategy_DeleteStrategy", _wrap_GameStrategy_DeleteStrategy, METH_VARARGS, NULL},
	 { (char *)"GameStrategy_IsValid", _wrap_GameStrategy_IsValid, METH_VARARGS, NULL},
	 { (char *)"GameStrategy_Invalidate", _wrap_GameStrategy_Invalidate, METH_VARARGS, NULL},
	 { (char *)"GameStrategy_IncRef", _wrap_GameStrategy_IncRef, METH_VARARGS, NULL},
	 { (char *)"GameStrategy_DecRef", _wrap_GameStrategy_DecRef, METH_VARARGS, NULL},
	 { (char *)"GameStrategy_RefCount", _wrap_GameStrategy_RefCount, METH_VARARGS, NULL},
	 { (char *)"GameStrategy_swigregister", GameStrategy_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GameAction", _wrap_new_GameAction, METH_VARARGS, NULL},
	 { (char *)"delete_GameAction", _wrap_delete_GameAction, METH_VARARGS, NULL},
	 { (char *)"GameAction___deref__", _wrap_GameAction___deref__, METH_VARARGS, NULL},
	 { (char *)"GameAction___eq__", _wrap_GameAction___eq__, METH_VARARGS, NULL},
	 { (char *)"GameAction___ne__", _wrap_GameAction___ne__, METH_VARARGS, NULL},
	 { (char *)"GameAction_GetNumber", _wrap_GameAction_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GameAction_GetInfoset", _wrap_GameAction_GetInfoset, METH_VARARGS, NULL},
	 { (char *)"GameAction_GetLabel", _wrap_GameAction_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GameAction_SetLabel", _wrap_GameAction_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GameAction_Precedes", _wrap_GameAction_Precedes, METH_VARARGS, NULL},
	 { (char *)"GameAction_DeleteAction", _wrap_GameAction_DeleteAction, METH_VARARGS, NULL},
	 { (char *)"GameAction_IsValid", _wrap_GameAction_IsValid, METH_VARARGS, NULL},
	 { (char *)"GameAction_Invalidate", _wrap_GameAction_Invalidate, METH_VARARGS, NULL},
	 { (char *)"GameAction_IncRef", _wrap_GameAction_IncRef, METH_VARARGS, NULL},
	 { (char *)"GameAction_DecRef", _wrap_GameAction_DecRef, METH_VARARGS, NULL},
	 { (char *)"GameAction_RefCount", _wrap_GameAction_RefCount, METH_VARARGS, NULL},
	 { (char *)"GameAction_swigregister", GameAction_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GameInfoset", _wrap_new_GameInfoset, METH_VARARGS, NULL},
	 { (char *)"delete_GameInfoset", _wrap_delete_GameInfoset, METH_VARARGS, NULL},
	 { (char *)"GameInfoset___deref__", _wrap_GameInfoset___deref__, METH_VARARGS, NULL},
	 { (char *)"GameInfoset___eq__", _wrap_GameInfoset___eq__, METH_VARARGS, NULL},
	 { (char *)"GameInfoset___ne__", _wrap_GameInfoset___ne__, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_GetGame", _wrap_GameInfoset_GetGame, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_GetNumber", _wrap_GameInfoset_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_GetPlayer", _wrap_GameInfoset_GetPlayer, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_SetPlayer", _wrap_GameInfoset_SetPlayer, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_IsChanceInfoset", _wrap_GameInfoset_IsChanceInfoset, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_SetLabel", _wrap_GameInfoset_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_GetLabel", _wrap_GameInfoset_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_InsertAction", _wrap_GameInfoset_InsertAction, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_NumActions", _wrap_GameInfoset_NumActions, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_GetAction", _wrap_GameInfoset_GetAction, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_Actions", _wrap_GameInfoset_Actions, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_NumMembers", _wrap_GameInfoset_NumMembers, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_GetMember", _wrap_GameInfoset_GetMember, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_Precedes", _wrap_GameInfoset_Precedes, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_SetActionProb", _wrap_GameInfoset_SetActionProb, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_Reveal", _wrap_GameInfoset_Reveal, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_IsValid", _wrap_GameInfoset_IsValid, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_Invalidate", _wrap_GameInfoset_Invalidate, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_IncRef", _wrap_GameInfoset_IncRef, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_DecRef", _wrap_GameInfoset_DecRef, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_RefCount", _wrap_GameInfoset_RefCount, METH_VARARGS, NULL},
	 { (char *)"GameInfoset_swigregister", GameInfoset_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GameNode", _wrap_new_GameNode, METH_VARARGS, NULL},
	 { (char *)"delete_GameNode", _wrap_delete_GameNode, METH_VARARGS, NULL},
	 { (char *)"GameNode___deref__", _wrap_GameNode___deref__, METH_VARARGS, NULL},
	 { (char *)"GameNode___eq__", _wrap_GameNode___eq__, METH_VARARGS, NULL},
	 { (char *)"GameNode___ne__", _wrap_GameNode___ne__, METH_VARARGS, NULL},
	 { (char *)"GameNode_GetGame", _wrap_GameNode_GetGame, METH_VARARGS, NULL},
	 { (char *)"GameNode_GetLabel", _wrap_GameNode_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GameNode_SetLabel", _wrap_GameNode_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GameNode_GetNumber", _wrap_GameNode_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GameNode_NumberInInfoset", _wrap_GameNode_NumberInInfoset, METH_VARARGS, NULL},
	 { (char *)"GameNode_NumChildren", _wrap_GameNode_NumChildren, METH_VARARGS, NULL},
	 { (char *)"GameNode_GetInfoset", _wrap_GameNode_GetInfoset, METH_VARARGS, NULL},
	 { (char *)"GameNode_SetInfoset", _wrap_GameNode_SetInfoset, METH_VARARGS, NULL},
	 { (char *)"GameNode_LeaveInfoset", _wrap_GameNode_LeaveInfoset, METH_VARARGS, NULL},
	 { (char *)"GameNode_IsTerminal", _wrap_GameNode_IsTerminal, METH_VARARGS, NULL},
	 { (char *)"GameNode_GetPlayer", _wrap_GameNode_GetPlayer, METH_VARARGS, NULL},
	 { (char *)"GameNode_GetPriorAction", _wrap_GameNode_GetPriorAction, METH_VARARGS, NULL},
	 { (char *)"GameNode_GetChild", _wrap_GameNode_GetChild, METH_VARARGS, NULL},
	 { (char *)"GameNode_GetParent", _wrap_GameNode_GetParent, METH_VARARGS, NULL},
	 { (char *)"GameNode_GetNextSibling", _wrap_GameNode_GetNextSibling, METH_VARARGS, NULL},
	 { (char *)"GameNode_GetPriorSibling", _wrap_GameNode_GetPriorSibling, METH_VARARGS, NULL},
	 { (char *)"GameNode_GetOutcome", _wrap_GameNode_GetOutcome, METH_VARARGS, NULL},
	 { (char *)"GameNode_SetOutcome", _wrap_GameNode_SetOutcome, METH_VARARGS, NULL},
	 { (char *)"GameNode_IsSuccessorOf", _wrap_GameNode_IsSuccessorOf, METH_VARARGS, NULL},
	 { (char *)"GameNode_IsSubgameRoot", _wrap_GameNode_IsSubgameRoot, METH_VARARGS, NULL},
	 { (char *)"GameNode_DeleteParent", _wrap_GameNode_DeleteParent, METH_VARARGS, NULL},
	 { (char *)"GameNode_DeleteTree", _wrap_GameNode_DeleteTree, METH_VARARGS, NULL},
	 { (char *)"GameNode_CopyTree", _wrap_GameNode_CopyTree, METH_VARARGS, NULL},
	 { (char *)"GameNode_MoveTree", _wrap_GameNode_MoveTree, METH_VARARGS, NULL},
	 { (char *)"GameNode_AppendMove", _wrap_GameNode_AppendMove, METH_VARARGS, NULL},
	 { (char *)"GameNode_InsertMove", _wrap_GameNode_InsertMove, METH_VARARGS, NULL},
	 { (char *)"GameNode_IsValid", _wrap_GameNode_IsValid, METH_VARARGS, NULL},
	 { (char *)"GameNode_Invalidate", _wrap_GameNode_Invalidate, METH_VARARGS, NULL},
	 { (char *)"GameNode_IncRef", _wrap_GameNode_IncRef, METH_VARARGS, NULL},
	 { (char *)"GameNode_DecRef", _wrap_GameNode_DecRef, METH_VARARGS, NULL},
	 { (char *)"GameNode_RefCount", _wrap_GameNode_RefCount, METH_VARARGS, NULL},
	 { (char *)"GameNode_swigregister", GameNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GamePlayer", _wrap_new_GamePlayer, METH_VARARGS, NULL},
	 { (char *)"delete_GamePlayer", _wrap_delete_GamePlayer, METH_VARARGS, NULL},
	 { (char *)"GamePlayer___deref__", _wrap_GamePlayer___deref__, METH_VARARGS, NULL},
	 { (char *)"GamePlayer___eq__", _wrap_GamePlayer___eq__, METH_VARARGS, NULL},
	 { (char *)"GamePlayer___ne__", _wrap_GamePlayer___ne__, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_GetNumber", _wrap_GamePlayer_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_GetGame", _wrap_GamePlayer_GetGame, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_GetLabel", _wrap_GamePlayer_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_SetLabel", _wrap_GamePlayer_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_IsChance", _wrap_GamePlayer_IsChance, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_NumInfosets", _wrap_GamePlayer_NumInfosets, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_GetInfoset", _wrap_GamePlayer_GetInfoset, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_Infosets", _wrap_GamePlayer_Infosets, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_NumStrategies", _wrap_GamePlayer_NumStrategies, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_GetStrategy", _wrap_GamePlayer_GetStrategy, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_Strategies", _wrap_GamePlayer_Strategies, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_NewStrategy", _wrap_GamePlayer_NewStrategy, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_IsValid", _wrap_GamePlayer_IsValid, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_Invalidate", _wrap_GamePlayer_Invalidate, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_IncRef", _wrap_GamePlayer_IncRef, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_DecRef", _wrap_GamePlayer_DecRef, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_RefCount", _wrap_GamePlayer_RefCount, METH_VARARGS, NULL},
	 { (char *)"GamePlayer_swigregister", GamePlayer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GameActionIterator", _wrap_new_GameActionIterator, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator_plusplus", _wrap_GameActionIterator_plusplus, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator_AtEnd", _wrap_GameActionIterator_AtEnd, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator_GetIndex", _wrap_GameActionIterator_GetIndex, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator___deref__", _wrap_GameActionIterator___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_GameActionIterator", _wrap_delete_GameActionIterator, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator_GetNumber", _wrap_GameActionIterator_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator_GetInfoset", _wrap_GameActionIterator_GetInfoset, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator_GetLabel", _wrap_GameActionIterator_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator_SetLabel", _wrap_GameActionIterator_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator_Precedes", _wrap_GameActionIterator_Precedes, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator_DeleteAction", _wrap_GameActionIterator_DeleteAction, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator_IsValid", _wrap_GameActionIterator_IsValid, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator_Invalidate", _wrap_GameActionIterator_Invalidate, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator_IncRef", _wrap_GameActionIterator_IncRef, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator_DecRef", _wrap_GameActionIterator_DecRef, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator_RefCount", _wrap_GameActionIterator_RefCount, METH_VARARGS, NULL},
	 { (char *)"GameActionIterator_swigregister", GameActionIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GameInfosetIterator", _wrap_new_GameInfosetIterator, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_plusplus", _wrap_GameInfosetIterator_plusplus, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_AtEnd", _wrap_GameInfosetIterator_AtEnd, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_GetIndex", _wrap_GameInfosetIterator_GetIndex, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator___deref__", _wrap_GameInfosetIterator___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_GameInfosetIterator", _wrap_delete_GameInfosetIterator, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_GetGame", _wrap_GameInfosetIterator_GetGame, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_GetNumber", _wrap_GameInfosetIterator_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_GetPlayer", _wrap_GameInfosetIterator_GetPlayer, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_SetPlayer", _wrap_GameInfosetIterator_SetPlayer, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_IsChanceInfoset", _wrap_GameInfosetIterator_IsChanceInfoset, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_SetLabel", _wrap_GameInfosetIterator_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_GetLabel", _wrap_GameInfosetIterator_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_InsertAction", _wrap_GameInfosetIterator_InsertAction, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_NumActions", _wrap_GameInfosetIterator_NumActions, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_GetAction", _wrap_GameInfosetIterator_GetAction, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_Actions", _wrap_GameInfosetIterator_Actions, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_NumMembers", _wrap_GameInfosetIterator_NumMembers, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_GetMember", _wrap_GameInfosetIterator_GetMember, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_Precedes", _wrap_GameInfosetIterator_Precedes, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_SetActionProb", _wrap_GameInfosetIterator_SetActionProb, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_Reveal", _wrap_GameInfosetIterator_Reveal, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_IsValid", _wrap_GameInfosetIterator_IsValid, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_Invalidate", _wrap_GameInfosetIterator_Invalidate, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_IncRef", _wrap_GameInfosetIterator_IncRef, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_DecRef", _wrap_GameInfosetIterator_DecRef, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_RefCount", _wrap_GameInfosetIterator_RefCount, METH_VARARGS, NULL},
	 { (char *)"GameInfosetIterator_swigregister", GameInfosetIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GameStrategyIterator", _wrap_new_GameStrategyIterator, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator_plusplus", _wrap_GameStrategyIterator_plusplus, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator_AtEnd", _wrap_GameStrategyIterator_AtEnd, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator_GetIndex", _wrap_GameStrategyIterator_GetIndex, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator___deref__", _wrap_GameStrategyIterator___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_GameStrategyIterator", _wrap_delete_GameStrategyIterator, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator_GetLabel", _wrap_GameStrategyIterator_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator_SetLabel", _wrap_GameStrategyIterator_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator_GetPlayer", _wrap_GameStrategyIterator_GetPlayer, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator_GetNumber", _wrap_GameStrategyIterator_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator_GetId", _wrap_GameStrategyIterator_GetId, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator_DeleteStrategy", _wrap_GameStrategyIterator_DeleteStrategy, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator_IsValid", _wrap_GameStrategyIterator_IsValid, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator_Invalidate", _wrap_GameStrategyIterator_Invalidate, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator_IncRef", _wrap_GameStrategyIterator_IncRef, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator_DecRef", _wrap_GameStrategyIterator_DecRef, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator_RefCount", _wrap_GameStrategyIterator_RefCount, METH_VARARGS, NULL},
	 { (char *)"GameStrategyIterator_swigregister", GameStrategyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GamePlayerIterator", _wrap_new_GamePlayerIterator, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_plusplus", _wrap_GamePlayerIterator_plusplus, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_AtEnd", _wrap_GamePlayerIterator_AtEnd, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_GetIndex", _wrap_GamePlayerIterator_GetIndex, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator___deref__", _wrap_GamePlayerIterator___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_GamePlayerIterator", _wrap_delete_GamePlayerIterator, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_GetNumber", _wrap_GamePlayerIterator_GetNumber, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_GetGame", _wrap_GamePlayerIterator_GetGame, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_GetLabel", _wrap_GamePlayerIterator_GetLabel, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_SetLabel", _wrap_GamePlayerIterator_SetLabel, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_IsChance", _wrap_GamePlayerIterator_IsChance, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_NumInfosets", _wrap_GamePlayerIterator_NumInfosets, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_GetInfoset", _wrap_GamePlayerIterator_GetInfoset, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_Infosets", _wrap_GamePlayerIterator_Infosets, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_NumStrategies", _wrap_GamePlayerIterator_NumStrategies, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_GetStrategy", _wrap_GamePlayerIterator_GetStrategy, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_Strategies", _wrap_GamePlayerIterator_Strategies, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_NewStrategy", _wrap_GamePlayerIterator_NewStrategy, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_IsValid", _wrap_GamePlayerIterator_IsValid, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_Invalidate", _wrap_GamePlayerIterator_Invalidate, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_IncRef", _wrap_GamePlayerIterator_IncRef, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_DecRef", _wrap_GamePlayerIterator_DecRef, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_RefCount", _wrap_GamePlayerIterator_RefCount, METH_VARARGS, NULL},
	 { (char *)"GamePlayerIterator_swigregister", GamePlayerIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Game", _wrap_new_Game, METH_VARARGS, NULL},
	 { (char *)"delete_Game", _wrap_delete_Game, METH_VARARGS, NULL},
	 { (char *)"Game___deref__", _wrap_Game___deref__, METH_VARARGS, NULL},
	 { (char *)"Game___eq__", _wrap_Game___eq__, METH_VARARGS, NULL},
	 { (char *)"Game___ne__", _wrap_Game___ne__, METH_VARARGS, NULL},
	 { (char *)"Game_Copy", _wrap_Game_Copy, METH_VARARGS, NULL},
	 { (char *)"Game_IsTree", _wrap_Game_IsTree, METH_VARARGS, NULL},
	 { (char *)"Game_GetTitle", _wrap_Game_GetTitle, METH_VARARGS, NULL},
	 { (char *)"Game_SetTitle", _wrap_Game_SetTitle, METH_VARARGS, NULL},
	 { (char *)"Game_GetComment", _wrap_Game_GetComment, METH_VARARGS, NULL},
	 { (char *)"Game_SetComment", _wrap_Game_SetComment, METH_VARARGS, NULL},
	 { (char *)"Game_IsConstSum", _wrap_Game_IsConstSum, METH_VARARGS, NULL},
	 { (char *)"Game_GetMinPayoff", _wrap_Game_GetMinPayoff, METH_VARARGS, NULL},
	 { (char *)"Game_GetMaxPayoff", _wrap_Game_GetMaxPayoff, METH_VARARGS, NULL},
	 { (char *)"Game_IsPerfectRecall", _wrap_Game_IsPerfectRecall, METH_VARARGS, NULL},
	 { (char *)"Game_Canonicalize", _wrap_Game_Canonicalize, METH_VARARGS, NULL},
	 { (char *)"Game_ClearComputedValues", _wrap_Game_ClearComputedValues, METH_VARARGS, NULL},
	 { (char *)"Game_BuildComputedValues", _wrap_Game_BuildComputedValues, METH_VARARGS, NULL},
	 { (char *)"Game_HasComputedValues", _wrap_Game_HasComputedValues, METH_VARARGS, NULL},
	 { (char *)"Game_WriteEfgFile", _wrap_Game_WriteEfgFile, METH_VARARGS, NULL},
	 { (char *)"Game_WriteNfgFile", _wrap_Game_WriteNfgFile, METH_VARARGS, NULL},
	 { (char *)"Game_NumActions", _wrap_Game_NumActions, METH_VARARGS, NULL},
	 { (char *)"Game_NumMembers", _wrap_Game_NumMembers, METH_VARARGS, NULL},
	 { (char *)"Game_NumStrategies", _wrap_Game_NumStrategies, METH_VARARGS, NULL},
	 { (char *)"Game_GetStrategy", _wrap_Game_GetStrategy, METH_VARARGS, NULL},
	 { (char *)"Game_BehavProfileLength", _wrap_Game_BehavProfileLength, METH_VARARGS, NULL},
	 { (char *)"Game_MixedProfileLength", _wrap_Game_MixedProfileLength, METH_VARARGS, NULL},
	 { (char *)"Game_NumPlayers", _wrap_Game_NumPlayers, METH_VARARGS, NULL},
	 { (char *)"Game_GetPlayer", _wrap_Game_GetPlayer, METH_VARARGS, NULL},
	 { (char *)"Game_Players", _wrap_Game_Players, METH_VARARGS, NULL},
	 { (char *)"Game_GetChance", _wrap_Game_GetChance, METH_VARARGS, NULL},
	 { (char *)"Game_NewPlayer", _wrap_Game_NewPlayer, METH_VARARGS, NULL},
	 { (char *)"Game_GetInfoset", _wrap_Game_GetInfoset, METH_VARARGS, NULL},
	 { (char *)"Game_NumInfosets", _wrap_Game_NumInfosets, METH_VARARGS, NULL},
	 { (char *)"Game_GetAction", _wrap_Game_GetAction, METH_VARARGS, NULL},
	 { (char *)"Game_NumOutcomes", _wrap_Game_NumOutcomes, METH_VARARGS, NULL},
	 { (char *)"Game_GetOutcome", _wrap_Game_GetOutcome, METH_VARARGS, NULL},
	 { (char *)"Game_NewOutcome", _wrap_Game_NewOutcome, METH_VARARGS, NULL},
	 { (char *)"Game_DeleteOutcome", _wrap_Game_DeleteOutcome, METH_VARARGS, NULL},
	 { (char *)"Game_GetRoot", _wrap_Game_GetRoot, METH_VARARGS, NULL},
	 { (char *)"Game_NumNodes", _wrap_Game_NumNodes, METH_VARARGS, NULL},
	 { (char *)"Game_efg_file", _wrap_Game_efg_file, METH_VARARGS, NULL},
	 { (char *)"Game_nfg_file", _wrap_Game_nfg_file, METH_VARARGS, NULL},
	 { (char *)"Game_NewMixedStrategyDouble", _wrap_Game_NewMixedStrategyDouble, METH_VARARGS, NULL},
	 { (char *)"Game_NewMixedStrategyRational", _wrap_Game_NewMixedStrategyRational, METH_VARARGS, NULL},
	 { (char *)"Game_NewMixedBehavDouble", _wrap_Game_NewMixedBehavDouble, METH_VARARGS, NULL},
	 { (char *)"Game_NewMixedBehavRational", _wrap_Game_NewMixedBehavRational, METH_VARARGS, NULL},
	 { (char *)"Game_IsValid", _wrap_Game_IsValid, METH_VARARGS, NULL},
	 { (char *)"Game_Invalidate", _wrap_Game_Invalidate, METH_VARARGS, NULL},
	 { (char *)"Game_IncRef", _wrap_Game_IncRef, METH_VARARGS, NULL},
	 { (char *)"Game_DecRef", _wrap_Game_DecRef, METH_VARARGS, NULL},
	 { (char *)"Game_RefCount", _wrap_Game_RefCount, METH_VARARGS, NULL},
	 { (char *)"Game_swigregister", Game_swigregister, METH_VARARGS, NULL},
	 { (char *)"ReadGameString", _wrap_ReadGameString, METH_VARARGS, NULL},
	 { (char *)"new_MixedStrategyDouble", _wrap_new_MixedStrategyDouble, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble___eq__", _wrap_MixedStrategyDouble___eq__, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble___ne__", _wrap_MixedStrategyDouble___ne__, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble_GetGame", _wrap_MixedStrategyDouble_GetGame, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble_GetSupport", _wrap_MixedStrategyDouble_GetSupport, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble_SetCentroid", _wrap_MixedStrategyDouble_SetCentroid, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble_MixedProfileLength", _wrap_MixedStrategyDouble_MixedProfileLength, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble_ToFullSupport", _wrap_MixedStrategyDouble_ToFullSupport, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble_GetPayoff", _wrap_MixedStrategyDouble_GetPayoff, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble_GetPayoffDeriv", _wrap_MixedStrategyDouble_GetPayoffDeriv, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble_GetStrategyValue", _wrap_MixedStrategyDouble_GetStrategyValue, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble_GetLiapValue", _wrap_MixedStrategyDouble_GetLiapValue, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble_behavior", _wrap_MixedStrategyDouble_behavior, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble___len__", _wrap_MixedStrategyDouble___len__, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble___getitem__", _wrap_MixedStrategyDouble___getitem__, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble___setitem__", _wrap_MixedStrategyDouble___setitem__, METH_VARARGS, NULL},
	 { (char *)"delete_MixedStrategyDouble", _wrap_delete_MixedStrategyDouble, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyDouble_swigregister", MixedStrategyDouble_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MixedStrategyRational", _wrap_new_MixedStrategyRational, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational___eq__", _wrap_MixedStrategyRational___eq__, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational___ne__", _wrap_MixedStrategyRational___ne__, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational_GetGame", _wrap_MixedStrategyRational_GetGame, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational_GetSupport", _wrap_MixedStrategyRational_GetSupport, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational_SetCentroid", _wrap_MixedStrategyRational_SetCentroid, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational_MixedProfileLength", _wrap_MixedStrategyRational_MixedProfileLength, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational_ToFullSupport", _wrap_MixedStrategyRational_ToFullSupport, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational_GetPayoff", _wrap_MixedStrategyRational_GetPayoff, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational_GetPayoffDeriv", _wrap_MixedStrategyRational_GetPayoffDeriv, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational_GetStrategyValue", _wrap_MixedStrategyRational_GetStrategyValue, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational_GetLiapValue", _wrap_MixedStrategyRational_GetLiapValue, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational_behavior", _wrap_MixedStrategyRational_behavior, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational___len__", _wrap_MixedStrategyRational___len__, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational___getitem__", _wrap_MixedStrategyRational___getitem__, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational___setitem__", _wrap_MixedStrategyRational___setitem__, METH_VARARGS, NULL},
	 { (char *)"delete_MixedStrategyRational", _wrap_delete_MixedStrategyRational, METH_VARARGS, NULL},
	 { (char *)"MixedStrategyRational_swigregister", MixedStrategyRational_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SupportStrategyIterator", _wrap_new_SupportStrategyIterator, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator_plusplus", _wrap_SupportStrategyIterator_plusplus, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator_AtEnd", _wrap_SupportStrategyIterator_AtEnd, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator_GetIndex", _wrap_SupportStrategyIterator_GetIndex, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator___ref__", _wrap_SupportStrategyIterator___ref__, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator___deref__", _wrap_SupportStrategyIterator___deref__, METH_VARARGS, NULL},
	 { (char *)"delete_SupportStrategyIterator", _wrap_delete_SupportStrategyIterator, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator_GetLabel", _wrap_SupportStrategyIterator_GetLabel, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator_SetLabel", _wrap_SupportStrategyIterator_SetLabel, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator_GetPlayer", _wrap_SupportStrategyIterator_GetPlayer, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator_GetNumber", _wrap_SupportStrategyIterator_GetNumber, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator_GetId", _wrap_SupportStrategyIterator_GetId, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator_DeleteStrategy", _wrap_SupportStrategyIterator_DeleteStrategy, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator_IsValid", _wrap_SupportStrategyIterator_IsValid, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator_Invalidate", _wrap_SupportStrategyIterator_Invalidate, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator_IncRef", _wrap_SupportStrategyIterator_IncRef, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator_DecRef", _wrap_SupportStrategyIterator_DecRef, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator_RefCount", _wrap_SupportStrategyIterator_RefCount, METH_VARARGS, NULL},
	 { (char *)"SupportStrategyIterator_swigregister", SupportStrategyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_StrategySupport", _wrap_new_StrategySupport, METH_VARARGS, NULL},
	 { (char *)"StrategySupport___eq__", _wrap_StrategySupport___eq__, METH_VARARGS, NULL},
	 { (char *)"StrategySupport___ne__", _wrap_StrategySupport___ne__, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_GetGame", _wrap_StrategySupport_GetGame, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_NumStrategies", _wrap_StrategySupport_NumStrategies, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_MixedProfileLength", _wrap_StrategySupport_MixedProfileLength, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_GetStrategy", _wrap_StrategySupport_GetStrategy, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_Players", _wrap_StrategySupport_Players, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_Strategies", _wrap_StrategySupport_Strategies, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_GetIndex", _wrap_StrategySupport_GetIndex, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_Contains", _wrap_StrategySupport_Contains, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_IsSubsetOf", _wrap_StrategySupport_IsSubsetOf, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_AddStrategy", _wrap_StrategySupport_AddStrategy, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_RemoveStrategy", _wrap_StrategySupport_RemoveStrategy, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_Dominates", _wrap_StrategySupport_Dominates, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_IsDominated", _wrap_StrategySupport_IsDominated, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_Undominated", _wrap_StrategySupport_Undominated, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_Overwhelms", _wrap_StrategySupport_Overwhelms, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_NewMixedStrategyDouble", _wrap_StrategySupport_NewMixedStrategyDouble, METH_VARARGS, NULL},
	 { (char *)"delete_StrategySupport", _wrap_delete_StrategySupport, METH_VARARGS, NULL},
	 { (char *)"StrategySupport_swigregister", StrategySupport_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MixedBehavDouble", _wrap_new_MixedBehavDouble, METH_VARARGS, NULL},
	 { (char *)"delete_MixedBehavDouble", _wrap_delete_MixedBehavDouble, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble___eq__", _wrap_MixedBehavDouble___eq__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble___ne__", _wrap_MixedBehavDouble___ne__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble___call__", _wrap_MixedBehavDouble___call__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble___iadd__", _wrap_MixedBehavDouble___iadd__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble___isub__", _wrap_MixedBehavDouble___isub__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble___imul__", _wrap_MixedBehavDouble___imul__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_Invalidate", _wrap_MixedBehavDouble_Invalidate, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_Centroid", _wrap_MixedBehavDouble_Centroid, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_Length", _wrap_MixedBehavDouble_Length, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_GetGame", _wrap_MixedBehavDouble_GetGame, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_GetSupport", _wrap_MixedBehavDouble_GetSupport, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_IsDefinedAt", _wrap_MixedBehavDouble_IsDefinedAt, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_GetPayoff", _wrap_MixedBehavDouble_GetPayoff, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_GetLiapValue", _wrap_MixedBehavDouble_GetLiapValue, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_GetRealizProb", _wrap_MixedBehavDouble_GetRealizProb, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_GetBeliefProb", _wrap_MixedBehavDouble_GetBeliefProb, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_GetNodeValue", _wrap_MixedBehavDouble_GetNodeValue, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_GetInfosetProb", _wrap_MixedBehavDouble_GetInfosetProb, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_GetInfosetValue", _wrap_MixedBehavDouble_GetInfosetValue, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_GetActionProb", _wrap_MixedBehavDouble_GetActionProb, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_GetActionValue", _wrap_MixedBehavDouble_GetActionValue, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_GetRegret", _wrap_MixedBehavDouble_GetRegret, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_DiffActionValue", _wrap_MixedBehavDouble_DiffActionValue, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_DiffRealizProb", _wrap_MixedBehavDouble_DiffRealizProb, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_DiffNodeValue", _wrap_MixedBehavDouble_DiffNodeValue, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble___len__", _wrap_MixedBehavDouble___len__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble___getitem__", _wrap_MixedBehavDouble___getitem__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble___setitem__", _wrap_MixedBehavDouble___setitem__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavDouble_swigregister", MixedBehavDouble_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MixedBehavRational", _wrap_new_MixedBehavRational, METH_VARARGS, NULL},
	 { (char *)"delete_MixedBehavRational", _wrap_delete_MixedBehavRational, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational___eq__", _wrap_MixedBehavRational___eq__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational___ne__", _wrap_MixedBehavRational___ne__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational___call__", _wrap_MixedBehavRational___call__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational___iadd__", _wrap_MixedBehavRational___iadd__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational___isub__", _wrap_MixedBehavRational___isub__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational___imul__", _wrap_MixedBehavRational___imul__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_Invalidate", _wrap_MixedBehavRational_Invalidate, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_Centroid", _wrap_MixedBehavRational_Centroid, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_Length", _wrap_MixedBehavRational_Length, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_GetGame", _wrap_MixedBehavRational_GetGame, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_GetSupport", _wrap_MixedBehavRational_GetSupport, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_IsDefinedAt", _wrap_MixedBehavRational_IsDefinedAt, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_GetPayoff", _wrap_MixedBehavRational_GetPayoff, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_GetLiapValue", _wrap_MixedBehavRational_GetLiapValue, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_GetRealizProb", _wrap_MixedBehavRational_GetRealizProb, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_GetBeliefProb", _wrap_MixedBehavRational_GetBeliefProb, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_GetNodeValue", _wrap_MixedBehavRational_GetNodeValue, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_GetInfosetProb", _wrap_MixedBehavRational_GetInfosetProb, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_GetInfosetValue", _wrap_MixedBehavRational_GetInfosetValue, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_GetActionProb", _wrap_MixedBehavRational_GetActionProb, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_GetActionValue", _wrap_MixedBehavRational_GetActionValue, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_GetRegret", _wrap_MixedBehavRational_GetRegret, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_DiffActionValue", _wrap_MixedBehavRational_DiffActionValue, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_DiffRealizProb", _wrap_MixedBehavRational_DiffRealizProb, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_DiffNodeValue", _wrap_MixedBehavRational_DiffNodeValue, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational___len__", _wrap_MixedBehavRational___len__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational___getitem__", _wrap_MixedBehavRational___getitem__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational___setitem__", _wrap_MixedBehavRational___setitem__, METH_VARARGS, NULL},
	 { (char *)"MixedBehavRational_swigregister", MixedBehavRational_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BehavSupport", _wrap_new_BehavSupport, METH_VARARGS, NULL},
	 { (char *)"delete_BehavSupport", _wrap_delete_BehavSupport, METH_VARARGS, NULL},
	 { (char *)"BehavSupport___eq__", _wrap_BehavSupport___eq__, METH_VARARGS, NULL},
	 { (char *)"BehavSupport___ne__", _wrap_BehavSupport___ne__, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_GetGame", _wrap_BehavSupport_GetGame, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_NumActions", _wrap_BehavSupport_NumActions, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_GetAction", _wrap_BehavSupport_GetAction, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_GetIndex", _wrap_BehavSupport_GetIndex, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_Contains", _wrap_BehavSupport_Contains, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_NumDegreesOfFreedom", _wrap_BehavSupport_NumDegreesOfFreedom, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_HasActiveActionAt", _wrap_BehavSupport_HasActiveActionAt, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_HasActiveActionsAtAllInfosets", _wrap_BehavSupport_HasActiveActionsAtAllInfosets, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_NumSequences", _wrap_BehavSupport_NumSequences, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_NumActiveMembers", _wrap_BehavSupport_NumActiveMembers, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_IsActive", _wrap_BehavSupport_IsActive, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_HasActiveActionsAtActiveInfosets", _wrap_BehavSupport_HasActiveActionsAtActiveInfosets, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_HasActiveActionsAtActiveInfosetsAndNoOthers", _wrap_BehavSupport_HasActiveActionsAtActiveInfosetsAndNoOthers, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_AddAction", _wrap_BehavSupport_AddAction, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_RemoveAction", _wrap_BehavSupport_RemoveAction, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_ReachableNonterminalNodes", _wrap_BehavSupport_ReachableNonterminalNodes, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_ReachableInfosets", _wrap_BehavSupport_ReachableInfosets, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_MayReach", _wrap_BehavSupport_MayReach, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_ReachableMembers", _wrap_BehavSupport_ReachableMembers, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_Dominates", _wrap_BehavSupport_Dominates, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_IsDominated", _wrap_BehavSupport_IsDominated, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_Undominated", _wrap_BehavSupport_Undominated, METH_VARARGS, NULL},
	 { (char *)"BehavSupport_swigregister", BehavSupport_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BehavIterator", _wrap_new_BehavIterator, METH_VARARGS, NULL},
	 { (char *)"BehavIterator_plusplus", _wrap_BehavIterator_plusplus, METH_VARARGS, NULL},
	 { (char *)"BehavIterator_AtEnd", _wrap_BehavIterator_AtEnd, METH_VARARGS, NULL},
	 { (char *)"BehavIterator___ref__", _wrap_BehavIterator___ref__, METH_VARARGS, NULL},
	 { (char *)"delete_BehavIterator", _wrap_delete_BehavIterator, METH_VARARGS, NULL},
	 { (char *)"BehavIterator_swigregister", BehavIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_StrategyIterator", _wrap_new_StrategyIterator, METH_VARARGS, NULL},
	 { (char *)"StrategyIterator_plusplus", _wrap_StrategyIterator_plusplus, METH_VARARGS, NULL},
	 { (char *)"StrategyIterator_AtEnd", _wrap_StrategyIterator_AtEnd, METH_VARARGS, NULL},
	 { (char *)"StrategyIterator___ref__", _wrap_StrategyIterator___ref__, METH_VARARGS, NULL},
	 { (char *)"delete_StrategyIterator", _wrap_delete_StrategyIterator, METH_VARARGS, NULL},
	 { (char *)"StrategyIterator_swigregister", StrategyIterator_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Gambit__MixedBehavProfileTGambit__Rational_tTo_p_Gambit__DVectorTGambit__Rational_t(void *x) {
    return (void *)((Gambit::DVector<Gambit::Rational > *)  ((Gambit::MixedBehavProfile<Gambit::Rational > *) x));
}
static void *_p_Gambit__DVectorTGambit__Rational_tTo_p_Gambit__PVectorTGambit__Rational_t(void *x) {
    return (void *)((Gambit::PVector<Gambit::Rational > *)  ((Gambit::DVector<Gambit::Rational > *) x));
}
static void *_p_Gambit__MixedBehavProfileTGambit__Rational_tTo_p_Gambit__PVectorTGambit__Rational_t(void *x) {
    return (void *)((Gambit::PVector<Gambit::Rational > *) (Gambit::DVector<Gambit::Rational > *) ((Gambit::MixedBehavProfile<Gambit::Rational > *) x));
}
static void *_p_Gambit__PVectorTGambit__Rational_tTo_p_Gambit__VectorTGambit__Rational_t(void *x) {
    return (void *)((Gambit::Vector<Gambit::Rational > *)  ((Gambit::PVector<Gambit::Rational > *) x));
}
static void *_p_Gambit__DVectorTGambit__Rational_tTo_p_Gambit__VectorTGambit__Rational_t(void *x) {
    return (void *)((Gambit::Vector<Gambit::Rational > *) (Gambit::PVector<Gambit::Rational > *) ((Gambit::DVector<Gambit::Rational > *) x));
}
static void *_p_Gambit__MixedStrategyProfileTGambit__Rational_tTo_p_Gambit__VectorTGambit__Rational_t(void *x) {
    return (void *)((Gambit::Vector<Gambit::Rational > *)  ((Gambit::MixedStrategyProfile<Gambit::Rational > *) x));
}
static void *_p_Gambit__MixedBehavProfileTGambit__Rational_tTo_p_Gambit__VectorTGambit__Rational_t(void *x) {
    return (void *)((Gambit::Vector<Gambit::Rational > *) (Gambit::PVector<Gambit::Rational > *)(Gambit::DVector<Gambit::Rational > *) ((Gambit::MixedBehavProfile<Gambit::Rational > *) x));
}
static void *_p_Gambit__VectorTGambit__Rational_tTo_p_Gambit__ArrayTGambit__Rational_t(void *x) {
    return (void *)((Gambit::Array<Gambit::Rational > *)  ((Gambit::Vector<Gambit::Rational > *) x));
}
static void *_p_Gambit__PVectorTGambit__Rational_tTo_p_Gambit__ArrayTGambit__Rational_t(void *x) {
    return (void *)((Gambit::Array<Gambit::Rational > *) (Gambit::Vector<Gambit::Rational > *) ((Gambit::PVector<Gambit::Rational > *) x));
}
static void *_p_Gambit__DVectorTGambit__Rational_tTo_p_Gambit__ArrayTGambit__Rational_t(void *x) {
    return (void *)((Gambit::Array<Gambit::Rational > *) (Gambit::Vector<Gambit::Rational > *)(Gambit::PVector<Gambit::Rational > *) ((Gambit::DVector<Gambit::Rational > *) x));
}
static void *_p_Gambit__MixedStrategyProfileTGambit__Rational_tTo_p_Gambit__ArrayTGambit__Rational_t(void *x) {
    return (void *)((Gambit::Array<Gambit::Rational > *) (Gambit::Vector<Gambit::Rational > *) ((Gambit::MixedStrategyProfile<Gambit::Rational > *) x));
}
static void *_p_Gambit__MixedBehavProfileTGambit__Rational_tTo_p_Gambit__ArrayTGambit__Rational_t(void *x) {
    return (void *)((Gambit::Array<Gambit::Rational > *) (Gambit::Vector<Gambit::Rational > *)(Gambit::PVector<Gambit::Rational > *)(Gambit::DVector<Gambit::Rational > *) ((Gambit::MixedBehavProfile<Gambit::Rational > *) x));
}
static void *_p_Gambit__MixedBehavProfileTdouble_tTo_p_Gambit__DVectorTdouble_t(void *x) {
    return (void *)((Gambit::DVector<double > *)  ((Gambit::MixedBehavProfile<double > *) x));
}
static void *_p_Gambit__DVectorTdouble_tTo_p_Gambit__PVectorTdouble_t(void *x) {
    return (void *)((Gambit::PVector<double > *)  ((Gambit::DVector<double > *) x));
}
static void *_p_Gambit__MixedBehavProfileTdouble_tTo_p_Gambit__PVectorTdouble_t(void *x) {
    return (void *)((Gambit::PVector<double > *) (Gambit::DVector<double > *) ((Gambit::MixedBehavProfile<double > *) x));
}
static void *_p_Gambit__PVectorTdouble_tTo_p_Gambit__VectorTdouble_t(void *x) {
    return (void *)((Gambit::Vector<double > *)  ((Gambit::PVector<double > *) x));
}
static void *_p_Gambit__DVectorTdouble_tTo_p_Gambit__VectorTdouble_t(void *x) {
    return (void *)((Gambit::Vector<double > *) (Gambit::PVector<double > *) ((Gambit::DVector<double > *) x));
}
static void *_p_Gambit__MixedStrategyProfileTdouble_tTo_p_Gambit__VectorTdouble_t(void *x) {
    return (void *)((Gambit::Vector<double > *)  ((Gambit::MixedStrategyProfile<double > *) x));
}
static void *_p_Gambit__MixedBehavProfileTdouble_tTo_p_Gambit__VectorTdouble_t(void *x) {
    return (void *)((Gambit::Vector<double > *) (Gambit::PVector<double > *)(Gambit::DVector<double > *) ((Gambit::MixedBehavProfile<double > *) x));
}
static void *_p_Gambit__VectorTdouble_tTo_p_Gambit__ArrayTdouble_t(void *x) {
    return (void *)((Gambit::Array<double > *)  ((Gambit::Vector<double > *) x));
}
static void *_p_Gambit__PVectorTdouble_tTo_p_Gambit__ArrayTdouble_t(void *x) {
    return (void *)((Gambit::Array<double > *) (Gambit::Vector<double > *) ((Gambit::PVector<double > *) x));
}
static void *_p_Gambit__DVectorTdouble_tTo_p_Gambit__ArrayTdouble_t(void *x) {
    return (void *)((Gambit::Array<double > *) (Gambit::Vector<double > *)(Gambit::PVector<double > *) ((Gambit::DVector<double > *) x));
}
static void *_p_Gambit__MixedStrategyProfileTdouble_tTo_p_Gambit__ArrayTdouble_t(void *x) {
    return (void *)((Gambit::Array<double > *) (Gambit::Vector<double > *) ((Gambit::MixedStrategyProfile<double > *) x));
}
static void *_p_Gambit__MixedBehavProfileTdouble_tTo_p_Gambit__ArrayTdouble_t(void *x) {
    return (void *)((Gambit::Array<double > *) (Gambit::Vector<double > *)(Gambit::PVector<double > *)(Gambit::DVector<double > *) ((Gambit::MixedBehavProfile<double > *) x));
}
static void *_p_Gambit__GameActionRepTo_p_Gambit__GameObject(void *x) {
    return (void *)((Gambit::GameObject *)  ((Gambit::GameActionRep *) x));
}
static void *_p_Gambit__GameOutcomeRepTo_p_Gambit__GameObject(void *x) {
    return (void *)((Gambit::GameObject *)  ((Gambit::GameOutcomeRep *) x));
}
static void *_p_Gambit__GameNodeRepTo_p_Gambit__GameObject(void *x) {
    return (void *)((Gambit::GameObject *)  ((Gambit::GameNodeRep *) x));
}
static void *_p_Gambit__GameRepTo_p_Gambit__GameObject(void *x) {
    return (void *)((Gambit::GameObject *)  ((Gambit::GameRep *) x));
}
static void *_p_Gambit__GamePlayerRepTo_p_Gambit__GameObject(void *x) {
    return (void *)((Gambit::GameObject *)  ((Gambit::GamePlayerRep *) x));
}
static void *_p_Gambit__GameInfosetRepTo_p_Gambit__GameObject(void *x) {
    return (void *)((Gambit::GameObject *)  ((Gambit::GameInfosetRep *) x));
}
static void *_p_Gambit__GameStrategyRepTo_p_Gambit__GameObject(void *x) {
    return (void *)((Gambit::GameObject *)  ((Gambit::GameStrategyRep *) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &))  ((std::basic_iostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_istream<char,std::char_traits<char > > &(*)(std::basic_istream<char,std::char_traits<char > > &))  ((std::basic_iostream<char,std::char_traits<char > > &(*)(std::basic_istream<char,std::char_traits<char > > &)) x));
}
static void *_p_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *) ((std::basic_ostream<char,std::char_traits<char > > *) x));
}
static void *_p_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *) ((std::basic_istream<char,std::char_traits<char > > *) x));
}
static void *_p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *) (std::basic_ios<char > *)(std::basic_istream<char > *) ((std::basic_iostream<char,std::char_traits<char > > *) x));
}
static void *_p_std__basic_iosTchar_std__char_traitsTchar_t_tTo_p_std__ios_base(void *x) {
    return (void *)((std::ios_base *)  ((std::basic_ios<char,std::char_traits<char > > *) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *) ((std::basic_ostream<char,std::char_traits<char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *) ((std::basic_istream<char,std::char_traits<char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios<char > *)(std::basic_istream<char > *) ((std::basic_iostream<char,std::char_traits<char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x) {
    return (void *)((std::ios_base &(*)(std::ios_base &))  ((std::basic_ios<char,std::char_traits<char > > &(*)(std::ios_base &)) x));
}
static void *_p_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *)  ((std::basic_ostream<char,std::char_traits<char > > *) x));
}
static void *_p_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *)  ((std::basic_istream<char,std::char_traits<char > > *) x));
}
static void *_p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > *) (std::basic_istream<char > *) ((std::basic_iostream<char,std::char_traits<char > > *) x));
}
static void *_p_Gambit__IndexExceptionTo_p_Gambit__Exception(void *x) {
    return (void *)((Gambit::Exception *)  ((Gambit::IndexException *) x));
}
static void *_p_Gambit__RangeExceptionTo_p_Gambit__Exception(void *x) {
    return (void *)((Gambit::Exception *)  ((Gambit::RangeException *) x));
}
static void *_p_Gambit__DimensionExceptionTo_p_Gambit__Exception(void *x) {
    return (void *)((Gambit::Exception *)  ((Gambit::DimensionException *) x));
}
static void *_p_Gambit__ValueExceptionTo_p_Gambit__Exception(void *x) {
    return (void *)((Gambit::Exception *)  ((Gambit::ValueException *) x));
}
static void *_p_Gambit__ZeroDivideExceptionTo_p_Gambit__Exception(void *x) {
    return (void *)((Gambit::Exception *)  ((Gambit::ZeroDivideException *) x));
}
static void *_p_Gambit__NullExceptionTo_p_Gambit__Exception(void *x) {
    return (void *)((Gambit::Exception *)  ((Gambit::NullException *) x));
}
static void *_p_Gambit__UndefinedExceptionTo_p_Gambit__Exception(void *x) {
    return (void *)((Gambit::Exception *)  ((Gambit::UndefinedException *) x));
}
static void *_p_Gambit__MismatchExceptionTo_p_Gambit__Exception(void *x) {
    return (void *)((Gambit::Exception *)  ((Gambit::MismatchException *) x));
}
static void *_p_Gambit__InvalidFileExceptionTo_p_Gambit__Exception(void *x) {
    return (void *)((Gambit::Exception *)  ((Gambit::InvalidFileException *) x));
}
static void *_p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_istreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_istream<char,std::char_traits<char > > *)  ((std::basic_iostream<char,std::char_traits<char > > *) x));
}
static void *_p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ostream<char,std::char_traits<char > > *)  ((std::basic_iostream<char,std::char_traits<char > > *) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &))  ((std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &))  ((std::basic_istream<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t(void *x) {
    return (void *)((std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) (std::basic_istream<char > *) ((std::basic_iostream<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)) x));
}
static swig_type_info _swigt__p_BehavSupport = {"_p_BehavSupport", "BehavSupport *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__ArrayTGambit__GameActionRep_p_t = {"_p_Gambit__ArrayTGambit__GameActionRep_p_t", "Gambit::Array<Gambit::GameActionRep * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__ArrayTGambit__GameInfosetRep_p_t = {"_p_Gambit__ArrayTGambit__GameInfosetRep_p_t", "Gambit::Array<Gambit::GameInfosetRep * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__ArrayTGambit__GameObjectPtrTGambit__GameStrategyRep_t_t = {"_p_Gambit__ArrayTGambit__GameObjectPtrTGambit__GameStrategyRep_t_t", "Gambit::Array<Gambit::GameObjectPtr<Gambit::GameStrategyRep > > *|Gambit::Array<Gambit::GameStrategy > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__ArrayTGambit__GamePlayerRep_p_t = {"_p_Gambit__ArrayTGambit__GamePlayerRep_p_t", "Gambit::Array<Gambit::GamePlayerRep * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__ArrayTGambit__GameStrategyRep_p_t = {"_p_Gambit__ArrayTGambit__GameStrategyRep_p_t", "Gambit::Array<Gambit::GameStrategyRep * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__ArrayTGambit__Rational_t = {"_p_Gambit__ArrayTGambit__Rational_t", "Gambit::Array<Gambit::Rational > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__ArrayTdouble_t = {"_p_Gambit__ArrayTdouble_t", "Gambit::Array<double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__ArrayTint_t = {"_p_Gambit__ArrayTint_t", "Gambit::Array<int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__BehavIterator = {"_p_Gambit__BehavIterator", "Gambit::BehavIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__BehavSupport = {"_p_Gambit__BehavSupport", "Gambit::BehavSupport *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__DVectorTGambit__Rational_t = {"_p_Gambit__DVectorTGambit__Rational_t", "Gambit::DVector<Gambit::Rational > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__DVectorTdouble_t = {"_p_Gambit__DVectorTdouble_t", "Gambit::DVector<double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__DimensionException = {"_p_Gambit__DimensionException", "Gambit::DimensionException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__Exception = {"_p_Gambit__Exception", "Gambit::Exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameActionRep = {"_p_Gambit__GameActionRep", "Gambit::GameActionRep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameInfosetRep = {"_p_Gambit__GameInfosetRep", "Gambit::GameInfosetRep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameNodeRep = {"_p_Gambit__GameNodeRep", "Gambit::GameNodeRep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameObject = {"_p_Gambit__GameObject", "Gambit::GameObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t = {"_p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t", "Gambit::GameObjectIterator<Gambit::GameActionRep,Gambit::GameObjectPtr<Gambit::GameActionRep > > *|Gambit::GameActionIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t = {"_p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t", "Gambit::GameObjectIterator<Gambit::GameInfosetRep,Gambit::GameObjectPtr<Gambit::GameInfosetRep > > *|Gambit::GameInfosetIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t = {"_p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t", "Gambit::GameObjectIterator<Gambit::GamePlayerRep,Gambit::GameObjectPtr<Gambit::GamePlayerRep > > *|Gambit::GamePlayerIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t = {"_p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t", "Gambit::GameObjectIterator<Gambit::GameStrategyRep,Gambit::GameObjectPtr<Gambit::GameStrategyRep > > *|Gambit::GameStrategyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameObjectPtrTGambit__GameActionRep_t = {"_p_Gambit__GameObjectPtrTGambit__GameActionRep_t", "Gambit::GameObjectPtr<Gambit::GameActionRep > *|Gambit::GameAction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t = {"_p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t", "Gambit::GameObjectPtr<Gambit::GameInfosetRep > *|Gambit::GameInfoset *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameObjectPtrTGambit__GameNodeRep_t = {"_p_Gambit__GameObjectPtrTGambit__GameNodeRep_t", "Gambit::GameObjectPtr<Gambit::GameNodeRep > *|Gambit::GameNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t = {"_p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t", "Gambit::GameObjectPtr<Gambit::GameOutcomeRep > *|Gambit::GameOutcome *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t = {"_p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t", "Gambit::GameObjectPtr<Gambit::GamePlayerRep > *|Gambit::GamePlayer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameObjectPtrTGambit__GameRep_t = {"_p_Gambit__GameObjectPtrTGambit__GameRep_t", "Gambit::GameObjectPtr<Gambit::GameRep > *|Gambit::Game *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t = {"_p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t", "Gambit::GameObjectPtr<Gambit::GameStrategyRep > *|Gambit::GameStrategy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameOutcomeRep = {"_p_Gambit__GameOutcomeRep", "Gambit::GameOutcomeRep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GamePlayerRep = {"_p_Gambit__GamePlayerRep", "Gambit::GamePlayerRep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameRep = {"_p_Gambit__GameRep", "Gambit::GameRep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__GameStrategyRep = {"_p_Gambit__GameStrategyRep", "Gambit::GameStrategyRep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__IndexException = {"_p_Gambit__IndexException", "Gambit::IndexException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__Integer = {"_p_Gambit__Integer", "Gambit::Integer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__IntegerRep = {"_p_Gambit__IntegerRep", "Gambit::IntegerRep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__InvalidFileException = {"_p_Gambit__InvalidFileException", "Gambit::InvalidFileException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__MismatchException = {"_p_Gambit__MismatchException", "Gambit::MismatchException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__MixedBehavProfileTGambit__Rational_t = {"_p_Gambit__MixedBehavProfileTGambit__Rational_t", "Gambit::MixedBehavProfile<Gambit::Rational > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__MixedBehavProfileTdouble_t = {"_p_Gambit__MixedBehavProfileTdouble_t", "Gambit::MixedBehavProfile<double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__MixedStrategyProfileTGambit__Rational_t = {"_p_Gambit__MixedStrategyProfileTGambit__Rational_t", "Gambit::MixedStrategyProfile<Gambit::Rational > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__MixedStrategyProfileTdouble_t = {"_p_Gambit__MixedStrategyProfileTdouble_t", "Gambit::MixedStrategyProfile<double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__NullException = {"_p_Gambit__NullException", "Gambit::NullException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__PVectorTGambit__Rational_t = {"_p_Gambit__PVectorTGambit__Rational_t", "Gambit::PVector<Gambit::Rational > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__PVectorTdouble_t = {"_p_Gambit__PVectorTdouble_t", "Gambit::PVector<double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__PVectorTint_t = {"_p_Gambit__PVectorTint_t", "Gambit::PVector<int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__PureBehavProfile = {"_p_Gambit__PureBehavProfile", "Gambit::PureBehavProfile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__PureStrategyProfile = {"_p_Gambit__PureStrategyProfile", "Gambit::PureStrategyProfile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__RangeException = {"_p_Gambit__RangeException", "Gambit::RangeException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__Rational = {"_p_Gambit__Rational", "Gambit::Rational *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__StrategyIterator = {"_p_Gambit__StrategyIterator", "Gambit::StrategyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__StrategySupport = {"_p_Gambit__StrategySupport", "Gambit::StrategySupport *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__SupportStrategyIterator = {"_p_Gambit__SupportStrategyIterator", "Gambit::SupportStrategyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__UndefinedException = {"_p_Gambit__UndefinedException", "Gambit::UndefinedException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__ValueException = {"_p_Gambit__ValueException", "Gambit::ValueException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__VectorTGambit__Rational_t = {"_p_Gambit__VectorTGambit__Rational_t", "Gambit::Vector<Gambit::Rational > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__VectorTdouble_t = {"_p_Gambit__VectorTdouble_t", "Gambit::Vector<double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gambit__ZeroDivideException = {"_p_Gambit__ZeroDivideException", "Gambit::ZeroDivideException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ListTGambit__GameObjectPtrTGambit__GameInfosetRep_t_t = {"_p_ListTGambit__GameObjectPtrTGambit__GameInfosetRep_t_t", "List<Gambit::GameObjectPtr<Gambit::GameInfosetRep > > *|List<Gambit::GameInfoset > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ListTGambit__GameObjectPtrTGambit__GameNodeRep_t_t = {"_p_ListTGambit__GameObjectPtrTGambit__GameNodeRep_t_t", "List<Gambit::GameObjectPtr<Gambit::GameNodeRep > > *|List<Gambit::GameNode > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StrategySupport = {"_p_StrategySupport", "StrategySupport *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char_type = {"_p_char_type", "char_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void = {"_p_f_enum_std__ios_base__event_r_std__ios_base_int__void", "void (*)(enum std::ios_base::event,std::ios_base &,int)|std::ios_base::event_callback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t", "std::basic_ios<char,std::char_traits<char > > &(*)(std::basic_ios<char,std::char_traits<char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t", "std::basic_istream<char,std::char_traits<char > > &(*)(std::basic_istream<char,std::char_traits<char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t", "std::basic_ostream<char,std::char_traits<char > > &(*)(std::basic_ostream<char,std::char_traits<char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__ios_base = {"_p_f_r_std__ios_base__r_std__ios_base", "std::ios_base &(*)(std::ios_base &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t = {"_p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fmtflags = {"_p_fmtflags", "fmtflags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int_type = {"_p_int_type", "int_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iostate = {"_p_iostate", "iostate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_off_type = {"_p_off_type", "off_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openmode = {"_p_openmode", "openmode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pos_type = {"_p_pos_type", "pos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_seekdir = {"_p_seekdir", "seekdir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *|std::streamsize *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_state_type = {"_p_state_type", "state_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iosTchar_std__char_traitsTchar_t_t = {"_p_std__basic_iosTchar_std__char_traitsTchar_t_t", "std::basic_ios<char > *|std::basic_ios<char,std::char_traits<char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t = {"_p_std__basic_iostreamTchar_std__char_traitsTchar_t_t", "std::basic_iostream<char > *|std::basic_iostream<char,std::char_traits<char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t = {"_p_std__basic_istreamTchar_std__char_traitsTchar_t_t", "std::basic_istream<char,std::char_traits<char > > *|std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type = {"_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type", "char *|std::basic_istream<char >::char_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type = {"_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type", "streamoff *|std::basic_istream<char >::off_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type = {"_p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type", "streampos *|std::basic_istream<char >::pos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t = {"_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t", "std::basic_ostream<char,std::char_traits<char > > *|std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type = {"_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type", "streamoff *|std::basic_ostream<char >::off_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type = {"_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type", "streampos *|std::basic_ostream<char >::pos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_streambufTchar_std__char_traitsTchar_t_t = {"_p_std__basic_streambufTchar_std__char_traitsTchar_t_t", "std::basic_streambuf<char,std::char_traits<char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t = {"_p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t", "std::basic_string<char,std::char_traits<char >,std::allocator<char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ios_base = {"_p_std__ios_base", "std::ios_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__locale = {"_p_std__locale", "std::locale *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_traits_type = {"_p_traits_type", "traits_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BehavSupport,
  &_swigt__p_FILE,
  &_swigt__p_Gambit__ArrayTGambit__GameActionRep_p_t,
  &_swigt__p_Gambit__ArrayTGambit__GameInfosetRep_p_t,
  &_swigt__p_Gambit__ArrayTGambit__GameObjectPtrTGambit__GameStrategyRep_t_t,
  &_swigt__p_Gambit__ArrayTGambit__GamePlayerRep_p_t,
  &_swigt__p_Gambit__ArrayTGambit__GameStrategyRep_p_t,
  &_swigt__p_Gambit__ArrayTGambit__Rational_t,
  &_swigt__p_Gambit__ArrayTdouble_t,
  &_swigt__p_Gambit__ArrayTint_t,
  &_swigt__p_Gambit__BehavIterator,
  &_swigt__p_Gambit__BehavSupport,
  &_swigt__p_Gambit__DVectorTGambit__Rational_t,
  &_swigt__p_Gambit__DVectorTdouble_t,
  &_swigt__p_Gambit__DimensionException,
  &_swigt__p_Gambit__Exception,
  &_swigt__p_Gambit__GameActionRep,
  &_swigt__p_Gambit__GameInfosetRep,
  &_swigt__p_Gambit__GameNodeRep,
  &_swigt__p_Gambit__GameObject,
  &_swigt__p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t,
  &_swigt__p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t,
  &_swigt__p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t,
  &_swigt__p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t,
  &_swigt__p_Gambit__GameObjectPtrTGambit__GameActionRep_t,
  &_swigt__p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,
  &_swigt__p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,
  &_swigt__p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t,
  &_swigt__p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,
  &_swigt__p_Gambit__GameObjectPtrTGambit__GameRep_t,
  &_swigt__p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,
  &_swigt__p_Gambit__GameOutcomeRep,
  &_swigt__p_Gambit__GamePlayerRep,
  &_swigt__p_Gambit__GameRep,
  &_swigt__p_Gambit__GameStrategyRep,
  &_swigt__p_Gambit__IndexException,
  &_swigt__p_Gambit__Integer,
  &_swigt__p_Gambit__IntegerRep,
  &_swigt__p_Gambit__InvalidFileException,
  &_swigt__p_Gambit__MismatchException,
  &_swigt__p_Gambit__MixedBehavProfileTGambit__Rational_t,
  &_swigt__p_Gambit__MixedBehavProfileTdouble_t,
  &_swigt__p_Gambit__MixedStrategyProfileTGambit__Rational_t,
  &_swigt__p_Gambit__MixedStrategyProfileTdouble_t,
  &_swigt__p_Gambit__NullException,
  &_swigt__p_Gambit__PVectorTGambit__Rational_t,
  &_swigt__p_Gambit__PVectorTdouble_t,
  &_swigt__p_Gambit__PVectorTint_t,
  &_swigt__p_Gambit__PureBehavProfile,
  &_swigt__p_Gambit__PureStrategyProfile,
  &_swigt__p_Gambit__RangeException,
  &_swigt__p_Gambit__Rational,
  &_swigt__p_Gambit__StrategyIterator,
  &_swigt__p_Gambit__StrategySupport,
  &_swigt__p_Gambit__SupportStrategyIterator,
  &_swigt__p_Gambit__UndefinedException,
  &_swigt__p_Gambit__ValueException,
  &_swigt__p_Gambit__VectorTGambit__Rational_t,
  &_swigt__p_Gambit__VectorTdouble_t,
  &_swigt__p_Gambit__ZeroDivideException,
  &_swigt__p_ListTGambit__GameObjectPtrTGambit__GameInfosetRep_t_t,
  &_swigt__p_ListTGambit__GameObjectPtrTGambit__GameNodeRep_t_t,
  &_swigt__p_StrategySupport,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_char_type,
  &_swigt__p_double,
  &_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__ios_base,
  &_swigt__p_float,
  &_swigt__p_fmtflags,
  &_swigt__p_int,
  &_swigt__p_int_type,
  &_swigt__p_iostate,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_long_long,
  &_swigt__p_off_type,
  &_swigt__p_openmode,
  &_swigt__p_p_void,
  &_swigt__p_pos_type,
  &_swigt__p_seekdir,
  &_swigt__p_short,
  &_swigt__p_size_t,
  &_swigt__p_state_type,
  &_swigt__p_std__basic_iosTchar_std__char_traitsTchar_t_t,
  &_swigt__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type,
  &_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type,
  &_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type,
  &_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  &_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type,
  &_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type,
  &_swigt__p_std__basic_streambufTchar_std__char_traitsTchar_t_t,
  &_swigt__p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t,
  &_swigt__p_std__ios_base,
  &_swigt__p_std__locale,
  &_swigt__p_traits_type,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_BehavSupport[] = {  {&_swigt__p_BehavSupport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__ArrayTGambit__GameActionRep_p_t[] = {  {&_swigt__p_Gambit__ArrayTGambit__GameActionRep_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__ArrayTGambit__GameInfosetRep_p_t[] = {  {&_swigt__p_Gambit__ArrayTGambit__GameInfosetRep_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__ArrayTGambit__GameObjectPtrTGambit__GameStrategyRep_t_t[] = {  {&_swigt__p_Gambit__ArrayTGambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__ArrayTGambit__GamePlayerRep_p_t[] = {  {&_swigt__p_Gambit__ArrayTGambit__GamePlayerRep_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__ArrayTGambit__GameStrategyRep_p_t[] = {  {&_swigt__p_Gambit__ArrayTGambit__GameStrategyRep_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__ArrayTGambit__Rational_t[] = {  {&_swigt__p_Gambit__ArrayTGambit__Rational_t, 0, 0, 0},  {&_swigt__p_Gambit__VectorTGambit__Rational_t, _p_Gambit__VectorTGambit__Rational_tTo_p_Gambit__ArrayTGambit__Rational_t, 0, 0},  {&_swigt__p_Gambit__PVectorTGambit__Rational_t, _p_Gambit__PVectorTGambit__Rational_tTo_p_Gambit__ArrayTGambit__Rational_t, 0, 0},  {&_swigt__p_Gambit__DVectorTGambit__Rational_t, _p_Gambit__DVectorTGambit__Rational_tTo_p_Gambit__ArrayTGambit__Rational_t, 0, 0},  {&_swigt__p_Gambit__MixedBehavProfileTGambit__Rational_t, _p_Gambit__MixedBehavProfileTGambit__Rational_tTo_p_Gambit__ArrayTGambit__Rational_t, 0, 0},  {&_swigt__p_Gambit__MixedStrategyProfileTGambit__Rational_t, _p_Gambit__MixedStrategyProfileTGambit__Rational_tTo_p_Gambit__ArrayTGambit__Rational_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__ArrayTdouble_t[] = {  {&_swigt__p_Gambit__ArrayTdouble_t, 0, 0, 0},  {&_swigt__p_Gambit__VectorTdouble_t, _p_Gambit__VectorTdouble_tTo_p_Gambit__ArrayTdouble_t, 0, 0},  {&_swigt__p_Gambit__PVectorTdouble_t, _p_Gambit__PVectorTdouble_tTo_p_Gambit__ArrayTdouble_t, 0, 0},  {&_swigt__p_Gambit__DVectorTdouble_t, _p_Gambit__DVectorTdouble_tTo_p_Gambit__ArrayTdouble_t, 0, 0},  {&_swigt__p_Gambit__MixedBehavProfileTdouble_t, _p_Gambit__MixedBehavProfileTdouble_tTo_p_Gambit__ArrayTdouble_t, 0, 0},  {&_swigt__p_Gambit__MixedStrategyProfileTdouble_t, _p_Gambit__MixedStrategyProfileTdouble_tTo_p_Gambit__ArrayTdouble_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__ArrayTint_t[] = {  {&_swigt__p_Gambit__ArrayTint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__BehavIterator[] = {  {&_swigt__p_Gambit__BehavIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__BehavSupport[] = {  {&_swigt__p_Gambit__BehavSupport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__DVectorTGambit__Rational_t[] = {  {&_swigt__p_Gambit__DVectorTGambit__Rational_t, 0, 0, 0},  {&_swigt__p_Gambit__MixedBehavProfileTGambit__Rational_t, _p_Gambit__MixedBehavProfileTGambit__Rational_tTo_p_Gambit__DVectorTGambit__Rational_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__DVectorTdouble_t[] = {  {&_swigt__p_Gambit__DVectorTdouble_t, 0, 0, 0},  {&_swigt__p_Gambit__MixedBehavProfileTdouble_t, _p_Gambit__MixedBehavProfileTdouble_tTo_p_Gambit__DVectorTdouble_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__DimensionException[] = {  {&_swigt__p_Gambit__DimensionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__Exception[] = {  {&_swigt__p_Gambit__Exception, 0, 0, 0},  {&_swigt__p_Gambit__IndexException, _p_Gambit__IndexExceptionTo_p_Gambit__Exception, 0, 0},  {&_swigt__p_Gambit__RangeException, _p_Gambit__RangeExceptionTo_p_Gambit__Exception, 0, 0},  {&_swigt__p_Gambit__DimensionException, _p_Gambit__DimensionExceptionTo_p_Gambit__Exception, 0, 0},  {&_swigt__p_Gambit__ValueException, _p_Gambit__ValueExceptionTo_p_Gambit__Exception, 0, 0},  {&_swigt__p_Gambit__ZeroDivideException, _p_Gambit__ZeroDivideExceptionTo_p_Gambit__Exception, 0, 0},  {&_swigt__p_Gambit__NullException, _p_Gambit__NullExceptionTo_p_Gambit__Exception, 0, 0},  {&_swigt__p_Gambit__UndefinedException, _p_Gambit__UndefinedExceptionTo_p_Gambit__Exception, 0, 0},  {&_swigt__p_Gambit__MismatchException, _p_Gambit__MismatchExceptionTo_p_Gambit__Exception, 0, 0},  {&_swigt__p_Gambit__InvalidFileException, _p_Gambit__InvalidFileExceptionTo_p_Gambit__Exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameActionRep[] = {  {&_swigt__p_Gambit__GameActionRep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameInfosetRep[] = {  {&_swigt__p_Gambit__GameInfosetRep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameNodeRep[] = {  {&_swigt__p_Gambit__GameNodeRep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameObject[] = {  {&_swigt__p_Gambit__GameActionRep, _p_Gambit__GameActionRepTo_p_Gambit__GameObject, 0, 0},  {&_swigt__p_Gambit__GameOutcomeRep, _p_Gambit__GameOutcomeRepTo_p_Gambit__GameObject, 0, 0},  {&_swigt__p_Gambit__GameNodeRep, _p_Gambit__GameNodeRepTo_p_Gambit__GameObject, 0, 0},  {&_swigt__p_Gambit__GameRep, _p_Gambit__GameRepTo_p_Gambit__GameObject, 0, 0},  {&_swigt__p_Gambit__GamePlayerRep, _p_Gambit__GamePlayerRepTo_p_Gambit__GameObject, 0, 0},  {&_swigt__p_Gambit__GameObject, 0, 0, 0},  {&_swigt__p_Gambit__GameInfosetRep, _p_Gambit__GameInfosetRepTo_p_Gambit__GameObject, 0, 0},  {&_swigt__p_Gambit__GameStrategyRep, _p_Gambit__GameStrategyRepTo_p_Gambit__GameObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t[] = {  {&_swigt__p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t[] = {  {&_swigt__p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t[] = {  {&_swigt__p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t[] = {  {&_swigt__p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameObjectPtrTGambit__GameActionRep_t[] = {  {&_swigt__p_Gambit__GameObjectPtrTGambit__GameActionRep_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t[] = {  {&_swigt__p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameObjectPtrTGambit__GameNodeRep_t[] = {  {&_swigt__p_Gambit__GameObjectPtrTGambit__GameNodeRep_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t[] = {  {&_swigt__p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t[] = {  {&_swigt__p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameObjectPtrTGambit__GameRep_t[] = {  {&_swigt__p_Gambit__GameObjectPtrTGambit__GameRep_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t[] = {  {&_swigt__p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameOutcomeRep[] = {  {&_swigt__p_Gambit__GameOutcomeRep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GamePlayerRep[] = {  {&_swigt__p_Gambit__GamePlayerRep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameRep[] = {  {&_swigt__p_Gambit__GameRep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__GameStrategyRep[] = {  {&_swigt__p_Gambit__GameStrategyRep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__IndexException[] = {  {&_swigt__p_Gambit__IndexException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__Integer[] = {  {&_swigt__p_Gambit__Integer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__IntegerRep[] = {  {&_swigt__p_Gambit__IntegerRep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__InvalidFileException[] = {  {&_swigt__p_Gambit__InvalidFileException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__MismatchException[] = {  {&_swigt__p_Gambit__MismatchException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__MixedBehavProfileTGambit__Rational_t[] = {  {&_swigt__p_Gambit__MixedBehavProfileTGambit__Rational_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__MixedBehavProfileTdouble_t[] = {  {&_swigt__p_Gambit__MixedBehavProfileTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__MixedStrategyProfileTGambit__Rational_t[] = {  {&_swigt__p_Gambit__MixedStrategyProfileTGambit__Rational_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__MixedStrategyProfileTdouble_t[] = {  {&_swigt__p_Gambit__MixedStrategyProfileTdouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__NullException[] = {  {&_swigt__p_Gambit__NullException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__PVectorTGambit__Rational_t[] = {  {&_swigt__p_Gambit__PVectorTGambit__Rational_t, 0, 0, 0},  {&_swigt__p_Gambit__DVectorTGambit__Rational_t, _p_Gambit__DVectorTGambit__Rational_tTo_p_Gambit__PVectorTGambit__Rational_t, 0, 0},  {&_swigt__p_Gambit__MixedBehavProfileTGambit__Rational_t, _p_Gambit__MixedBehavProfileTGambit__Rational_tTo_p_Gambit__PVectorTGambit__Rational_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__PVectorTdouble_t[] = {  {&_swigt__p_Gambit__PVectorTdouble_t, 0, 0, 0},  {&_swigt__p_Gambit__DVectorTdouble_t, _p_Gambit__DVectorTdouble_tTo_p_Gambit__PVectorTdouble_t, 0, 0},  {&_swigt__p_Gambit__MixedBehavProfileTdouble_t, _p_Gambit__MixedBehavProfileTdouble_tTo_p_Gambit__PVectorTdouble_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__PVectorTint_t[] = {  {&_swigt__p_Gambit__PVectorTint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__PureBehavProfile[] = {  {&_swigt__p_Gambit__PureBehavProfile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__PureStrategyProfile[] = {  {&_swigt__p_Gambit__PureStrategyProfile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__RangeException[] = {  {&_swigt__p_Gambit__RangeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__Rational[] = {  {&_swigt__p_Gambit__Rational, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__StrategyIterator[] = {  {&_swigt__p_Gambit__StrategyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__StrategySupport[] = {  {&_swigt__p_Gambit__StrategySupport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__SupportStrategyIterator[] = {  {&_swigt__p_Gambit__SupportStrategyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__UndefinedException[] = {  {&_swigt__p_Gambit__UndefinedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__ValueException[] = {  {&_swigt__p_Gambit__ValueException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__VectorTGambit__Rational_t[] = {  {&_swigt__p_Gambit__VectorTGambit__Rational_t, 0, 0, 0},  {&_swigt__p_Gambit__PVectorTGambit__Rational_t, _p_Gambit__PVectorTGambit__Rational_tTo_p_Gambit__VectorTGambit__Rational_t, 0, 0},  {&_swigt__p_Gambit__DVectorTGambit__Rational_t, _p_Gambit__DVectorTGambit__Rational_tTo_p_Gambit__VectorTGambit__Rational_t, 0, 0},  {&_swigt__p_Gambit__MixedBehavProfileTGambit__Rational_t, _p_Gambit__MixedBehavProfileTGambit__Rational_tTo_p_Gambit__VectorTGambit__Rational_t, 0, 0},  {&_swigt__p_Gambit__MixedStrategyProfileTGambit__Rational_t, _p_Gambit__MixedStrategyProfileTGambit__Rational_tTo_p_Gambit__VectorTGambit__Rational_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__VectorTdouble_t[] = {  {&_swigt__p_Gambit__VectorTdouble_t, 0, 0, 0},  {&_swigt__p_Gambit__PVectorTdouble_t, _p_Gambit__PVectorTdouble_tTo_p_Gambit__VectorTdouble_t, 0, 0},  {&_swigt__p_Gambit__DVectorTdouble_t, _p_Gambit__DVectorTdouble_tTo_p_Gambit__VectorTdouble_t, 0, 0},  {&_swigt__p_Gambit__MixedBehavProfileTdouble_t, _p_Gambit__MixedBehavProfileTdouble_tTo_p_Gambit__VectorTdouble_t, 0, 0},  {&_swigt__p_Gambit__MixedStrategyProfileTdouble_t, _p_Gambit__MixedStrategyProfileTdouble_tTo_p_Gambit__VectorTdouble_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gambit__ZeroDivideException[] = {  {&_swigt__p_Gambit__ZeroDivideException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListTGambit__GameObjectPtrTGambit__GameInfosetRep_t_t[] = {  {&_swigt__p_ListTGambit__GameObjectPtrTGambit__GameInfosetRep_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ListTGambit__GameObjectPtrTGambit__GameNodeRep_t_t[] = {  {&_swigt__p_ListTGambit__GameObjectPtrTGambit__GameNodeRep_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StrategySupport[] = {  {&_swigt__p_StrategySupport, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char_type[] = {  {&_swigt__p_char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void[] = {  {&_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__ios_base[] = {  {&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__ios_base, 0, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t, _p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fmtflags[] = {  {&_swigt__p_fmtflags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int_type[] = {  {&_swigt__p_int_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iostate[] = {  {&_swigt__p_iostate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_off_type[] = {  {&_swigt__p_off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openmode[] = {  {&_swigt__p_openmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pos_type[] = {  {&_swigt__p_pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seekdir[] = {  {&_swigt__p_seekdir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_state_type[] = {  {&_swigt__p_state_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iosTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0, 0},  {&_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, _p_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t, _p_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_iosTchar_std__char_traitsTchar_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_istreamTchar_std__char_traitsTchar_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type[] = {  {&_swigt__p_char, 0, 0, 0},  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type[] = {  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type, 0, 0, 0},  {&_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type[] = {  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type, 0, 0, 0},  {&_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type[] = {  {&_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type, 0, 0, 0},  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type[] = {  {&_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type, 0, 0, 0},  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_streambufTchar_std__char_traitsTchar_t_t[] = {  {&_swigt__p_std__basic_streambufTchar_std__char_traitsTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t[] = {  {&_swigt__p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ios_base[] = {  {&_swigt__p_std__basic_iosTchar_std__char_traitsTchar_t_t, _p_std__basic_iosTchar_std__char_traitsTchar_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__ios_base, 0, 0, 0},  {&_swigt__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t, _p_std__basic_ostreamTchar_std__char_traitsTchar_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t, _p_std__basic_iostreamTchar_std__char_traitsTchar_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_istreamTchar_std__char_traitsTchar_t_t, _p_std__basic_istreamTchar_std__char_traitsTchar_t_tTo_p_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__locale[] = {  {&_swigt__p_std__locale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_traits_type[] = {  {&_swigt__p_traits_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BehavSupport,
  _swigc__p_FILE,
  _swigc__p_Gambit__ArrayTGambit__GameActionRep_p_t,
  _swigc__p_Gambit__ArrayTGambit__GameInfosetRep_p_t,
  _swigc__p_Gambit__ArrayTGambit__GameObjectPtrTGambit__GameStrategyRep_t_t,
  _swigc__p_Gambit__ArrayTGambit__GamePlayerRep_p_t,
  _swigc__p_Gambit__ArrayTGambit__GameStrategyRep_p_t,
  _swigc__p_Gambit__ArrayTGambit__Rational_t,
  _swigc__p_Gambit__ArrayTdouble_t,
  _swigc__p_Gambit__ArrayTint_t,
  _swigc__p_Gambit__BehavIterator,
  _swigc__p_Gambit__BehavSupport,
  _swigc__p_Gambit__DVectorTGambit__Rational_t,
  _swigc__p_Gambit__DVectorTdouble_t,
  _swigc__p_Gambit__DimensionException,
  _swigc__p_Gambit__Exception,
  _swigc__p_Gambit__GameActionRep,
  _swigc__p_Gambit__GameInfosetRep,
  _swigc__p_Gambit__GameNodeRep,
  _swigc__p_Gambit__GameObject,
  _swigc__p_Gambit__GameObjectIteratorTGambit__GameActionRep_Gambit__GameObjectPtrTGambit__GameActionRep_t_t,
  _swigc__p_Gambit__GameObjectIteratorTGambit__GameInfosetRep_Gambit__GameObjectPtrTGambit__GameInfosetRep_t_t,
  _swigc__p_Gambit__GameObjectIteratorTGambit__GamePlayerRep_Gambit__GameObjectPtrTGambit__GamePlayerRep_t_t,
  _swigc__p_Gambit__GameObjectIteratorTGambit__GameStrategyRep_Gambit__GameObjectPtrTGambit__GameStrategyRep_t_t,
  _swigc__p_Gambit__GameObjectPtrTGambit__GameActionRep_t,
  _swigc__p_Gambit__GameObjectPtrTGambit__GameInfosetRep_t,
  _swigc__p_Gambit__GameObjectPtrTGambit__GameNodeRep_t,
  _swigc__p_Gambit__GameObjectPtrTGambit__GameOutcomeRep_t,
  _swigc__p_Gambit__GameObjectPtrTGambit__GamePlayerRep_t,
  _swigc__p_Gambit__GameObjectPtrTGambit__GameRep_t,
  _swigc__p_Gambit__GameObjectPtrTGambit__GameStrategyRep_t,
  _swigc__p_Gambit__GameOutcomeRep,
  _swigc__p_Gambit__GamePlayerRep,
  _swigc__p_Gambit__GameRep,
  _swigc__p_Gambit__GameStrategyRep,
  _swigc__p_Gambit__IndexException,
  _swigc__p_Gambit__Integer,
  _swigc__p_Gambit__IntegerRep,
  _swigc__p_Gambit__InvalidFileException,
  _swigc__p_Gambit__MismatchException,
  _swigc__p_Gambit__MixedBehavProfileTGambit__Rational_t,
  _swigc__p_Gambit__MixedBehavProfileTdouble_t,
  _swigc__p_Gambit__MixedStrategyProfileTGambit__Rational_t,
  _swigc__p_Gambit__MixedStrategyProfileTdouble_t,
  _swigc__p_Gambit__NullException,
  _swigc__p_Gambit__PVectorTGambit__Rational_t,
  _swigc__p_Gambit__PVectorTdouble_t,
  _swigc__p_Gambit__PVectorTint_t,
  _swigc__p_Gambit__PureBehavProfile,
  _swigc__p_Gambit__PureStrategyProfile,
  _swigc__p_Gambit__RangeException,
  _swigc__p_Gambit__Rational,
  _swigc__p_Gambit__StrategyIterator,
  _swigc__p_Gambit__StrategySupport,
  _swigc__p_Gambit__SupportStrategyIterator,
  _swigc__p_Gambit__UndefinedException,
  _swigc__p_Gambit__ValueException,
  _swigc__p_Gambit__VectorTGambit__Rational_t,
  _swigc__p_Gambit__VectorTdouble_t,
  _swigc__p_Gambit__ZeroDivideException,
  _swigc__p_ListTGambit__GameObjectPtrTGambit__GameInfosetRep_t_t,
  _swigc__p_ListTGambit__GameObjectPtrTGambit__GameNodeRep_t_t,
  _swigc__p_StrategySupport,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_char_type,
  _swigc__p_double,
  _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iosTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_f_r_std__ios_base__r_std__ios_base,
  _swigc__p_float,
  _swigc__p_fmtflags,
  _swigc__p_int,
  _swigc__p_int_type,
  _swigc__p_iostate,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_long_long,
  _swigc__p_off_type,
  _swigc__p_openmode,
  _swigc__p_p_void,
  _swigc__p_pos_type,
  _swigc__p_seekdir,
  _swigc__p_short,
  _swigc__p_size_t,
  _swigc__p_state_type,
  _swigc__p_std__basic_iosTchar_std__char_traitsTchar_t_t,
  _swigc__p_std__basic_iostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__char_type,
  _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__off_type,
  _swigc__p_std__basic_istreamTchar_std__char_traitsTchar_t_t__pos_type,
  _swigc__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t,
  _swigc__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__off_type,
  _swigc__p_std__basic_ostreamTchar_std__char_traitsTchar_t_t__pos_type,
  _swigc__p_std__basic_streambufTchar_std__char_traitsTchar_t_t,
  _swigc__p_std__basic_stringTchar_std__char_traitsTchar_t_std__allocatorTchar_t_t,
  _swigc__p_std__ios_base,
  _swigc__p_std__locale,
  _swigc__p_traits_type,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_POINTER, (char*)"endl_cb_ptr", 0, 0, (void *)((std::basic_ostream<char,std::char_traits<char > > & (*)(std::basic_ostream<char,std::char_traits<char > > &))(std::endl<char,std::char_traits<char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t },
{ SWIG_PY_POINTER, (char*)"ends_cb_ptr", 0, 0, (void *)((std::basic_ostream<char,std::char_traits<char > > & (*)(std::basic_ostream<char,std::char_traits<char > > &))(std::ends<char,std::char_traits<char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t },
{ SWIG_PY_POINTER, (char*)"flush_cb_ptr", 0, 0, (void *)((std::basic_ostream<char,std::char_traits<char > > & (*)(std::basic_ostream<char,std::char_traits<char > > &))(std::flush<char,std::char_traits<char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamTchar_std__char_traitsTchar_t_t },
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
    return PyString_FromString("<Swig global variables>");
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
    PyObject *str = PyString_FromString("(");
    swig_globalvar  *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", PyString_AsString(str));
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,   /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc)swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      varlink_type.ob_type = &PyType_Type;
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          size_t shift = (ci->ptype) - types;
          swig_type_info *ty = types_initial[shift];
          size_t ldoc = (c - methods[i].ml_doc);
          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
          char *ndoc = (char*)malloc(ldoc + lptr + 10);
          if (ndoc) {
            char *buff = ndoc;
            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
            if (ptr) {
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
  PyObject *m, *d;
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  PyDict_SetItemString(d,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_boolalpha",ios_base_boolalpha_get, ios_base_boolalpha_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_dec",ios_base_dec_get, ios_base_dec_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_fixed",ios_base_fixed_get, ios_base_fixed_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_hex",ios_base_hex_get, ios_base_hex_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_internal",ios_base_internal_get, ios_base_internal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_left",ios_base_left_get, ios_base_left_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_oct",ios_base_oct_get, ios_base_oct_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_right",ios_base_right_get, ios_base_right_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_scientific",ios_base_scientific_get, ios_base_scientific_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showbase",ios_base_showbase_get, ios_base_showbase_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showpoint",ios_base_showpoint_get, ios_base_showpoint_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showpos",ios_base_showpos_get, ios_base_showpos_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_skipws",ios_base_skipws_get, ios_base_skipws_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_unitbuf",ios_base_unitbuf_get, ios_base_unitbuf_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_uppercase",ios_base_uppercase_get, ios_base_uppercase_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_adjustfield",ios_base_adjustfield_get, ios_base_adjustfield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_basefield",ios_base_basefield_get, ios_base_basefield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_floatfield",ios_base_floatfield_get, ios_base_floatfield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_badbit",ios_base_badbit_get, ios_base_badbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_eofbit",ios_base_eofbit_get, ios_base_eofbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_failbit",ios_base_failbit_get, ios_base_failbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_goodbit",ios_base_goodbit_get, ios_base_goodbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_app",ios_base_app_get, ios_base_app_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_ate",ios_base_ate_get, ios_base_ate_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_binary",ios_base_binary_get, ios_base_binary_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_ios_base_in",ios_base_ios_base_in_get, ios_base_ios_base_in_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_out",ios_base_out_get, ios_base_out_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_trunc",ios_base_trunc_get, ios_base_trunc_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_beg",ios_base_beg_get, ios_base_beg_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_cur",ios_base_cur_get, ios_base_cur_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_end",ios_base_end_get, ios_base_end_set);
  SWIG_Python_SetConstant(d, "ios_base_erase_event",SWIG_From_int(static_cast< int >(std::ios_base::erase_event)));
  SWIG_Python_SetConstant(d, "ios_base_imbue_event",SWIG_From_int(static_cast< int >(std::ios_base::imbue_event)));
  SWIG_Python_SetConstant(d, "ios_base_copyfmt_event",SWIG_From_int(static_cast< int >(std::ios_base::copyfmt_event)));
  SWIG_addvarlink(SWIG_globals(),(char*)"cin",cin_get, cin_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cout",cout_get, cout_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cerr",cerr_get, cerr_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"clog",clog_get, clog_set);
  
  
  
}

