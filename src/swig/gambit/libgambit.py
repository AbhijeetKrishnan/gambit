# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _libgambit
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    erase_event = _libgambit.ios_base_erase_event
    imbue_event = _libgambit.ios_base_imbue_event
    copyfmt_event = _libgambit.ios_base_copyfmt_event
    def register_callback(*args): return _libgambit.ios_base_register_callback(*args)
    def flags(*args): return _libgambit.ios_base_flags(*args)
    def setf(*args): return _libgambit.ios_base_setf(*args)
    def unsetf(*args): return _libgambit.ios_base_unsetf(*args)
    def precision(*args): return _libgambit.ios_base_precision(*args)
    def width(*args): return _libgambit.ios_base_width(*args)
    __swig_getmethods__["sync_with_stdio"] = lambda x: _libgambit.ios_base_sync_with_stdio
    if _newclass:sync_with_stdio = staticmethod(_libgambit.ios_base_sync_with_stdio)
    def imbue(*args): return _libgambit.ios_base_imbue(*args)
    def getloc(*args): return _libgambit.ios_base_getloc(*args)
    __swig_getmethods__["xalloc"] = lambda x: _libgambit.ios_base_xalloc
    if _newclass:xalloc = staticmethod(_libgambit.ios_base_xalloc)
    def iword(*args): return _libgambit.ios_base_iword(*args)
    def pword(*args): return _libgambit.ios_base_pword(*args)
    __swig_destroy__ = _libgambit.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _libgambit.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _libgambit.cvar
ios_base.boolalpha = _libgambit.cvar.ios_base_boolalpha
ios_base.dec = _libgambit.cvar.ios_base_dec
ios_base.fixed = _libgambit.cvar.ios_base_fixed
ios_base.hex = _libgambit.cvar.ios_base_hex
ios_base.internal = _libgambit.cvar.ios_base_internal
ios_base.left = _libgambit.cvar.ios_base_left
ios_base.oct = _libgambit.cvar.ios_base_oct
ios_base.right = _libgambit.cvar.ios_base_right
ios_base.scientific = _libgambit.cvar.ios_base_scientific
ios_base.showbase = _libgambit.cvar.ios_base_showbase
ios_base.showpoint = _libgambit.cvar.ios_base_showpoint
ios_base.showpos = _libgambit.cvar.ios_base_showpos
ios_base.skipws = _libgambit.cvar.ios_base_skipws
ios_base.unitbuf = _libgambit.cvar.ios_base_unitbuf
ios_base.uppercase = _libgambit.cvar.ios_base_uppercase
ios_base.adjustfield = _libgambit.cvar.ios_base_adjustfield
ios_base.basefield = _libgambit.cvar.ios_base_basefield
ios_base.floatfield = _libgambit.cvar.ios_base_floatfield
ios_base.badbit = _libgambit.cvar.ios_base_badbit
ios_base.eofbit = _libgambit.cvar.ios_base_eofbit
ios_base.failbit = _libgambit.cvar.ios_base_failbit
ios_base.goodbit = _libgambit.cvar.ios_base_goodbit
ios_base.app = _libgambit.cvar.ios_base_app
ios_base.ate = _libgambit.cvar.ios_base_ate
ios_base.binary = _libgambit.cvar.ios_base_binary
ios_base.ios_base_in = _libgambit.cvar.ios_base_ios_base_in
ios_base.out = _libgambit.cvar.ios_base_out
ios_base.trunc = _libgambit.cvar.ios_base_trunc
ios_base.beg = _libgambit.cvar.ios_base_beg
ios_base.cur = _libgambit.cvar.ios_base_cur
ios_base.end = _libgambit.cvar.ios_base_end
ios_base_sync_with_stdio = _libgambit.ios_base_sync_with_stdio
ios_base_xalloc = _libgambit.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(*args): return _libgambit.ios_rdstate(*args)
    def clear(*args): return _libgambit.ios_clear(*args)
    def setstate(*args): return _libgambit.ios_setstate(*args)
    def good(*args): return _libgambit.ios_good(*args)
    def eof(*args): return _libgambit.ios_eof(*args)
    def fail(*args): return _libgambit.ios_fail(*args)
    def bad(*args): return _libgambit.ios_bad(*args)
    def exceptions(*args): return _libgambit.ios_exceptions(*args)
    def __init__(self, *args): 
        this = _libgambit.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_ios
    __del__ = lambda self : None;
    def tie(*args): return _libgambit.ios_tie(*args)
    def rdbuf(*args): return _libgambit.ios_rdbuf(*args)
    def copyfmt(*args): return _libgambit.ios_copyfmt(*args)
    def fill(*args): return _libgambit.ios_fill(*args)
    def imbue(*args): return _libgambit.ios_imbue(*args)
    def narrow(*args): return _libgambit.ios_narrow(*args)
    def widen(*args): return _libgambit.ios_widen(*args)
ios_swigregister = _libgambit.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(*args): return _libgambit.ostream___lshift__(*args)
    def put(*args): return _libgambit.ostream_put(*args)
    def write(*args): return _libgambit.ostream_write(*args)
    def flush(*args): return _libgambit.ostream_flush(*args)
    def tellp(*args): return _libgambit.ostream_tellp(*args)
    def seekp(*args): return _libgambit.ostream_seekp(*args)
ostream_swigregister = _libgambit.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_istream
    __del__ = lambda self : None;
    def __rshift__(*args): return _libgambit.istream___rshift__(*args)
    def gcount(*args): return _libgambit.istream_gcount(*args)
    def get(*args): return _libgambit.istream_get(*args)
    def getline(*args): return _libgambit.istream_getline(*args)
    def ignore(*args): return _libgambit.istream_ignore(*args)
    def peek(*args): return _libgambit.istream_peek(*args)
    def read(*args): return _libgambit.istream_read(*args)
    def readsome(*args): return _libgambit.istream_readsome(*args)
    def putback(*args): return _libgambit.istream_putback(*args)
    def unget(*args): return _libgambit.istream_unget(*args)
    def sync(*args): return _libgambit.istream_sync(*args)
    def tellg(*args): return _libgambit.istream_tellg(*args)
    def seekg(*args): return _libgambit.istream_seekg(*args)
istream_swigregister = _libgambit.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _libgambit.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _libgambit.endl_cb_ptr
endl = _libgambit.endl
ends_cb_ptr = _libgambit.ends_cb_ptr
ends = _libgambit.ends
flush_cb_ptr = _libgambit.flush_cb_ptr
flush = _libgambit.flush
class IndexException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_IndexException
    __del__ = lambda self : None;
    def GetDescription(*args): return _libgambit.IndexException_GetDescription(*args)
    def __init__(self, *args): 
        this = _libgambit.new_IndexException(*args)
        try: self.this.append(this)
        except: self.this = this
IndexException_swigregister = _libgambit.IndexException_swigregister
IndexException_swigregister(IndexException)

class RangeException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RangeException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RangeException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_RangeException
    __del__ = lambda self : None;
    def GetDescription(*args): return _libgambit.RangeException_GetDescription(*args)
    def __init__(self, *args): 
        this = _libgambit.new_RangeException(*args)
        try: self.this.append(this)
        except: self.this = this
RangeException_swigregister = _libgambit.RangeException_swigregister
RangeException_swigregister(RangeException)

class DimensionException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DimensionException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DimensionException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_DimensionException
    __del__ = lambda self : None;
    def GetDescription(*args): return _libgambit.DimensionException_GetDescription(*args)
    def __init__(self, *args): 
        this = _libgambit.new_DimensionException(*args)
        try: self.this.append(this)
        except: self.this = this
DimensionException_swigregister = _libgambit.DimensionException_swigregister
DimensionException_swigregister(DimensionException)

class ValueException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValueException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ValueException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_ValueException
    __del__ = lambda self : None;
    def GetDescription(*args): return _libgambit.ValueException_GetDescription(*args)
    def __init__(self, *args): 
        this = _libgambit.new_ValueException(*args)
        try: self.this.append(this)
        except: self.this = this
ValueException_swigregister = _libgambit.ValueException_swigregister
ValueException_swigregister(ValueException)

class ZeroDivideException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroDivideException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroDivideException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_ZeroDivideException
    __del__ = lambda self : None;
    def GetDescription(*args): return _libgambit.ZeroDivideException_GetDescription(*args)
    def __init__(self, *args): 
        this = _libgambit.new_ZeroDivideException(*args)
        try: self.this.append(this)
        except: self.this = this
ZeroDivideException_swigregister = _libgambit.ZeroDivideException_swigregister
ZeroDivideException_swigregister(ZeroDivideException)

class ArrayDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_ArrayDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_ArrayDouble
    __del__ = lambda self : None;
    def __eq__(*args): return _libgambit.ArrayDouble___eq__(*args)
    def __ne__(*args): return _libgambit.ArrayDouble___ne__(*args)
    def Length(*args): return _libgambit.ArrayDouble_Length(*args)
    def First(*args): return _libgambit.ArrayDouble_First(*args)
    def Last(*args): return _libgambit.ArrayDouble_Last(*args)
    def Find(*args): return _libgambit.ArrayDouble_Find(*args)
    def Contains(*args): return _libgambit.ArrayDouble_Contains(*args)
    def Append(*args): return _libgambit.ArrayDouble_Append(*args)
    def Insert(*args): return _libgambit.ArrayDouble_Insert(*args)
    def Remove(*args): return _libgambit.ArrayDouble_Remove(*args)
ArrayDouble_swigregister = _libgambit.ArrayDouble_swigregister
ArrayDouble_swigregister(ArrayDouble)

class ArrayRational(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayRational, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayRational, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_ArrayRational(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_ArrayRational
    __del__ = lambda self : None;
    def __eq__(*args): return _libgambit.ArrayRational___eq__(*args)
    def __ne__(*args): return _libgambit.ArrayRational___ne__(*args)
    def Length(*args): return _libgambit.ArrayRational_Length(*args)
    def First(*args): return _libgambit.ArrayRational_First(*args)
    def Last(*args): return _libgambit.ArrayRational_Last(*args)
    def Find(*args): return _libgambit.ArrayRational_Find(*args)
    def Contains(*args): return _libgambit.ArrayRational_Contains(*args)
    def Append(*args): return _libgambit.ArrayRational_Append(*args)
    def Insert(*args): return _libgambit.ArrayRational_Insert(*args)
    def Remove(*args): return _libgambit.ArrayRational_Remove(*args)
ArrayRational_swigregister = _libgambit.ArrayRational_swigregister
ArrayRational_swigregister(ArrayRational)

class VectorDouble(ArrayDouble):
    __swig_setmethods__ = {}
    for _s in [ArrayDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ArrayDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_VectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_VectorDouble
    __del__ = lambda self : None;
    def __add__(*args): return _libgambit.VectorDouble___add__(*args)
    def __iadd__(*args): return _libgambit.VectorDouble___iadd__(*args)
    def __neg__(*args): return _libgambit.VectorDouble___neg__(*args)
    def __sub__(*args): return _libgambit.VectorDouble___sub__(*args)
    def __isub__(*args): return _libgambit.VectorDouble___isub__(*args)
    def __imul__(*args): return _libgambit.VectorDouble___imul__(*args)
    def __mul__(*args): return _libgambit.VectorDouble___mul__(*args)
    def __div__(*args): return _libgambit.VectorDouble___div__(*args)
    def __eq__(*args): return _libgambit.VectorDouble___eq__(*args)
    def __ne__(*args): return _libgambit.VectorDouble___ne__(*args)
    def NormSquared(*args): return _libgambit.VectorDouble_NormSquared(*args)
    def Check(*args): return _libgambit.VectorDouble_Check(*args)
VectorDouble_swigregister = _libgambit.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorRational(ArrayRational):
    __swig_setmethods__ = {}
    for _s in [ArrayRational]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorRational, name, value)
    __swig_getmethods__ = {}
    for _s in [ArrayRational]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorRational, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_VectorRational(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_VectorRational
    __del__ = lambda self : None;
    def __add__(*args): return _libgambit.VectorRational___add__(*args)
    def __iadd__(*args): return _libgambit.VectorRational___iadd__(*args)
    def __neg__(*args): return _libgambit.VectorRational___neg__(*args)
    def __sub__(*args): return _libgambit.VectorRational___sub__(*args)
    def __isub__(*args): return _libgambit.VectorRational___isub__(*args)
    def __imul__(*args): return _libgambit.VectorRational___imul__(*args)
    def __mul__(*args): return _libgambit.VectorRational___mul__(*args)
    def __div__(*args): return _libgambit.VectorRational___div__(*args)
    def __eq__(*args): return _libgambit.VectorRational___eq__(*args)
    def __ne__(*args): return _libgambit.VectorRational___ne__(*args)
    def NormSquared(*args): return _libgambit.VectorRational_NormSquared(*args)
    def Check(*args): return _libgambit.VectorRational_Check(*args)
VectorRational_swigregister = _libgambit.VectorRational_swigregister
VectorRational_swigregister(VectorRational)

class PVectorDouble(VectorDouble):
    __swig_setmethods__ = {}
    for _s in [VectorDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVectorDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PVectorDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_PVectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_PVectorDouble
    __del__ = lambda self : None;
    def __call__(*args): return _libgambit.PVectorDouble___call__(*args)
    def GetRow(*args): return _libgambit.PVectorDouble_GetRow(*args)
    def SetRow(*args): return _libgambit.PVectorDouble_SetRow(*args)
    def CopyRow(*args): return _libgambit.PVectorDouble_CopyRow(*args)
    def __add__(*args): return _libgambit.PVectorDouble___add__(*args)
    def __iadd__(*args): return _libgambit.PVectorDouble___iadd__(*args)
    def __neg__(*args): return _libgambit.PVectorDouble___neg__(*args)
    def __sub__(*args): return _libgambit.PVectorDouble___sub__(*args)
    def __isub__(*args): return _libgambit.PVectorDouble___isub__(*args)
    def __mul__(*args): return _libgambit.PVectorDouble___mul__(*args)
    def __imul__(*args): return _libgambit.PVectorDouble___imul__(*args)
    def __div__(*args): return _libgambit.PVectorDouble___div__(*args)
    def __eq__(*args): return _libgambit.PVectorDouble___eq__(*args)
    def __ne__(*args): return _libgambit.PVectorDouble___ne__(*args)
    def Lengths(*args): return _libgambit.PVectorDouble_Lengths(*args)
PVectorDouble_swigregister = _libgambit.PVectorDouble_swigregister
PVectorDouble_swigregister(PVectorDouble)

class PVectorRational(VectorRational):
    __swig_setmethods__ = {}
    for _s in [VectorRational]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVectorRational, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorRational]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PVectorRational, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_PVectorRational(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_PVectorRational
    __del__ = lambda self : None;
    def __call__(*args): return _libgambit.PVectorRational___call__(*args)
    def GetRow(*args): return _libgambit.PVectorRational_GetRow(*args)
    def SetRow(*args): return _libgambit.PVectorRational_SetRow(*args)
    def CopyRow(*args): return _libgambit.PVectorRational_CopyRow(*args)
    def __add__(*args): return _libgambit.PVectorRational___add__(*args)
    def __iadd__(*args): return _libgambit.PVectorRational___iadd__(*args)
    def __neg__(*args): return _libgambit.PVectorRational___neg__(*args)
    def __sub__(*args): return _libgambit.PVectorRational___sub__(*args)
    def __isub__(*args): return _libgambit.PVectorRational___isub__(*args)
    def __mul__(*args): return _libgambit.PVectorRational___mul__(*args)
    def __imul__(*args): return _libgambit.PVectorRational___imul__(*args)
    def __div__(*args): return _libgambit.PVectorRational___div__(*args)
    def __eq__(*args): return _libgambit.PVectorRational___eq__(*args)
    def __ne__(*args): return _libgambit.PVectorRational___ne__(*args)
    def Lengths(*args): return _libgambit.PVectorRational_Lengths(*args)
PVectorRational_swigregister = _libgambit.PVectorRational_swigregister
PVectorRational_swigregister(PVectorRational)

class DVectorDouble(PVectorDouble):
    __swig_setmethods__ = {}
    for _s in [PVectorDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVectorDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [PVectorDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DVectorDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_DVectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_DVectorDouble
    __del__ = lambda self : None;
    def __call__(*args): return _libgambit.DVectorDouble___call__(*args)
    def CopySubRow(*args): return _libgambit.DVectorDouble_CopySubRow(*args)
    def __add__(*args): return _libgambit.DVectorDouble___add__(*args)
    def __iadd__(*args): return _libgambit.DVectorDouble___iadd__(*args)
    def __neg__(*args): return _libgambit.DVectorDouble___neg__(*args)
    def __sub__(*args): return _libgambit.DVectorDouble___sub__(*args)
    def __isub__(*args): return _libgambit.DVectorDouble___isub__(*args)
    def __mul__(*args): return _libgambit.DVectorDouble___mul__(*args)
    def __imul__(*args): return _libgambit.DVectorDouble___imul__(*args)
    def __div__(*args): return _libgambit.DVectorDouble___div__(*args)
    def __eq__(*args): return _libgambit.DVectorDouble___eq__(*args)
    def __ne__(*args): return _libgambit.DVectorDouble___ne__(*args)
    def DPLengths(*args): return _libgambit.DVectorDouble_DPLengths(*args)
DVectorDouble_swigregister = _libgambit.DVectorDouble_swigregister
DVectorDouble_swigregister(DVectorDouble)

class DVectorRational(PVectorRational):
    __swig_setmethods__ = {}
    for _s in [PVectorRational]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVectorRational, name, value)
    __swig_getmethods__ = {}
    for _s in [PVectorRational]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DVectorRational, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_DVectorRational(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_DVectorRational
    __del__ = lambda self : None;
    def __call__(*args): return _libgambit.DVectorRational___call__(*args)
    def CopySubRow(*args): return _libgambit.DVectorRational_CopySubRow(*args)
    def __add__(*args): return _libgambit.DVectorRational___add__(*args)
    def __iadd__(*args): return _libgambit.DVectorRational___iadd__(*args)
    def __neg__(*args): return _libgambit.DVectorRational___neg__(*args)
    def __sub__(*args): return _libgambit.DVectorRational___sub__(*args)
    def __isub__(*args): return _libgambit.DVectorRational___isub__(*args)
    def __mul__(*args): return _libgambit.DVectorRational___mul__(*args)
    def __imul__(*args): return _libgambit.DVectorRational___imul__(*args)
    def __div__(*args): return _libgambit.DVectorRational___div__(*args)
    def __eq__(*args): return _libgambit.DVectorRational___eq__(*args)
    def __ne__(*args): return _libgambit.DVectorRational___ne__(*args)
    def DPLengths(*args): return _libgambit.DVectorRational_DPLengths(*args)
DVectorRational_swigregister = _libgambit.DVectorRational_swigregister
DVectorRational_swigregister(DVectorRational)

class IntegerRep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerRep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerRep, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _libgambit.IntegerRep_len_set
    __swig_getmethods__["len"] = _libgambit.IntegerRep_len_get
    if _newclass:len = _swig_property(_libgambit.IntegerRep_len_get, _libgambit.IntegerRep_len_set)
    __swig_setmethods__["sz"] = _libgambit.IntegerRep_sz_set
    __swig_getmethods__["sz"] = _libgambit.IntegerRep_sz_get
    if _newclass:sz = _swig_property(_libgambit.IntegerRep_sz_get, _libgambit.IntegerRep_sz_set)
    __swig_setmethods__["sgn"] = _libgambit.IntegerRep_sgn_set
    __swig_getmethods__["sgn"] = _libgambit.IntegerRep_sgn_get
    if _newclass:sgn = _swig_property(_libgambit.IntegerRep_sgn_get, _libgambit.IntegerRep_sgn_set)
    __swig_setmethods__["s"] = _libgambit.IntegerRep_s_set
    __swig_getmethods__["s"] = _libgambit.IntegerRep_s_get
    if _newclass:s = _swig_property(_libgambit.IntegerRep_s_get, _libgambit.IntegerRep_s_set)
    def __init__(self, *args): 
        this = _libgambit.new_IntegerRep(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_IntegerRep
    __del__ = lambda self : None;
IntegerRep_swigregister = _libgambit.IntegerRep_swigregister
IntegerRep_swigregister(IntegerRep)

Ialloc = _libgambit.Ialloc
Icalloc = _libgambit.Icalloc
Icopy_ulong = _libgambit.Icopy_ulong
Icopy_long = _libgambit.Icopy_long
Icopy = _libgambit.Icopy
Iresize = _libgambit.Iresize
power = _libgambit.power
Compl = _libgambit.Compl
cvtItoa = _libgambit.cvtItoa
Itolong = _libgambit.Itolong
Itodouble = _libgambit.Itodouble
Iislong = _libgambit.Iislong
Iisdouble = _libgambit.Iisdouble
class Integer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Integer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Integer, name)
    def __init__(self, *args): 
        this = _libgambit.new_Integer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_Integer
    __del__ = lambda self : None;
    def plusplus(*args): return _libgambit.Integer_plusplus(*args)
    def negate(*args): return _libgambit.Integer_negate(*args)
    def abs(*args): return _libgambit.Integer_abs(*args)
    def __eq__(*args): return _libgambit.Integer___eq__(*args)
    def __ne__(*args): return _libgambit.Integer___ne__(*args)
    def __lt__(*args): return _libgambit.Integer___lt__(*args)
    def __le__(*args): return _libgambit.Integer___le__(*args)
    def __gt__(*args): return _libgambit.Integer___gt__(*args)
    def __ge__(*args): return _libgambit.Integer___ge__(*args)
    def __iadd__(*args): return _libgambit.Integer___iadd__(*args)
    def __isub__(*args): return _libgambit.Integer___isub__(*args)
    def __imul__(*args): return _libgambit.Integer___imul__(*args)
    def __idiv__(*args): return _libgambit.Integer___idiv__(*args)
    def __imod__(*args): return _libgambit.Integer___imod__(*args)
    def __ilshift__(*args): return _libgambit.Integer___ilshift__(*args)
    def __irshift__(*args): return _libgambit.Integer___irshift__(*args)
    def __neg__(*args): return _libgambit.Integer___neg__(*args)
    def __add__(*args): return _libgambit.Integer___add__(*args)
    def __sub__(*args): return _libgambit.Integer___sub__(*args)
    def __mul__(*args): return _libgambit.Integer___mul__(*args)
    def __div__(*args): return _libgambit.Integer___div__(*args)
    def __mod__(*args): return _libgambit.Integer___mod__(*args)
    def __lshift__(*args): return _libgambit.Integer___lshift__(*args)
    def __rshift__(*args): return _libgambit.Integer___rshift__(*args)
    def fits_in_long(*args): return _libgambit.Integer_fits_in_long(*args)
    def fits_in_double(*args): return _libgambit.Integer_fits_in_double(*args)
    def as_long(*args): return _libgambit.Integer_as_long(*args)
    def as_double(*args): return _libgambit.Integer_as_double(*args)
    def initialized(*args): return _libgambit.Integer_initialized(*args)
    def error(*args): return _libgambit.Integer_error(*args)
    def OK(*args): return _libgambit.Integer_OK(*args)
    def __str__(*args): return _libgambit.Integer___str__(*args)
    def __repr__(*args): return _libgambit.Integer___repr__(*args)
    def __radd__(*args): return _libgambit.Integer___radd__(*args)
    def __rsub__(*args): return _libgambit.Integer___rsub__(*args)
    def __rmul__(*args): return _libgambit.Integer___rmul__(*args)
    def __rdiv__(*args): return _libgambit.Integer___rdiv__(*args)
    def __int__(*args): return _libgambit.Integer___int__(*args)
Integer_swigregister = _libgambit.Integer_swigregister
Integer_swigregister(Integer)
multiply = _libgambit.multiply
bitop = _libgambit.bitop

Ipow = _libgambit.Ipow
sqrt = _libgambit.sqrt
lcm = _libgambit.lcm
class Rational(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rational, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rational, name)
    def __init__(self, *args): 
        this = _libgambit.new_Rational(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_Rational
    __del__ = lambda self : None;
    def __eq__(*args): return _libgambit.Rational___eq__(*args)
    def __ne__(*args): return _libgambit.Rational___ne__(*args)
    def __lt__(*args): return _libgambit.Rational___lt__(*args)
    def __le__(*args): return _libgambit.Rational___le__(*args)
    def __gt__(*args): return _libgambit.Rational___gt__(*args)
    def __ge__(*args): return _libgambit.Rational___ge__(*args)
    def __neg__(*args): return _libgambit.Rational___neg__(*args)
    def negate(*args): return _libgambit.Rational_negate(*args)
    def invert(*args): return _libgambit.Rational_invert(*args)
    def numerator(*args): return _libgambit.Rational_numerator(*args)
    def denominator(*args): return _libgambit.Rational_denominator(*args)
    def fits_in_float(*args): return _libgambit.Rational_fits_in_float(*args)
    def fits_in_double(*args): return _libgambit.Rational_fits_in_double(*args)
    def error(*args): return _libgambit.Rational_error(*args)
    def OK(*args): return _libgambit.Rational_OK(*args)
    def __str__(*args): return _libgambit.Rational___str__(*args)
    def __repr__(*args): return _libgambit.Rational___repr__(*args)
    def __add__(*args): return _libgambit.Rational___add__(*args)
    def __sub__(*args): return _libgambit.Rational___sub__(*args)
    def __mul__(*args): return _libgambit.Rational___mul__(*args)
    def __div__(*args): return _libgambit.Rational___div__(*args)
    def __iadd__(*args): return _libgambit.Rational___iadd__(*args)
    def __isub__(*args): return _libgambit.Rational___isub__(*args)
    def __imul__(*args): return _libgambit.Rational___imul__(*args)
    def __idiv__(*args): return _libgambit.Rational___idiv__(*args)
    def __pos__(*args): return _libgambit.Rational___pos__(*args)
    def __radd__(*args): return _libgambit.Rational___radd__(*args)
    def __rsub__(*args): return _libgambit.Rational___rsub__(*args)
    def __rmul__(*args): return _libgambit.Rational___rmul__(*args)
    def __rdiv__(*args): return _libgambit.Rational___rdiv__(*args)
    def __float__(*args): return _libgambit.Rational___float__(*args)
    def __abs__(*args): return _libgambit.Rational___abs__(*args)
Rational_swigregister = _libgambit.Rational_swigregister
Rational_swigregister(Rational)

ToRational = _libgambit.ToRational
ToDouble = _libgambit.ToDouble
ToNumber = _libgambit.ToNumber
class GameObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_GameObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(*args): return _libgambit.GameObject_IsValid(*args)
    def Invalidate(*args): return _libgambit.GameObject_Invalidate(*args)
    def IncRef(*args): return _libgambit.GameObject_IncRef(*args)
    def DecRef(*args): return _libgambit.GameObject_DecRef(*args)
    def RefCount(*args): return _libgambit.GameObject_RefCount(*args)
    __swig_destroy__ = _libgambit.delete_GameObject
    __del__ = lambda self : None;
GameObject_swigregister = _libgambit.GameObject_swigregister
GameObject_swigregister(GameObject)
ToText = _libgambit.ToText
Epsilon = _libgambit.Epsilon

class NullException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NullException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_NullException
    __del__ = lambda self : None;
    def GetDescription(*args): return _libgambit.NullException_GetDescription(*args)
    def __init__(self, *args): 
        this = _libgambit.new_NullException(*args)
        try: self.this.append(this)
        except: self.this = this
NullException_swigregister = _libgambit.NullException_swigregister
NullException_swigregister(NullException)

class UndefinedException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UndefinedException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UndefinedException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_UndefinedException
    __del__ = lambda self : None;
    def GetDescription(*args): return _libgambit.UndefinedException_GetDescription(*args)
    def __init__(self, *args): 
        this = _libgambit.new_UndefinedException(*args)
        try: self.this.append(this)
        except: self.this = this
UndefinedException_swigregister = _libgambit.UndefinedException_swigregister
UndefinedException_swigregister(UndefinedException)

class MismatchException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MismatchException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MismatchException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_MismatchException
    __del__ = lambda self : None;
    def GetDescription(*args): return _libgambit.MismatchException_GetDescription(*args)
    def __init__(self, *args): 
        this = _libgambit.new_MismatchException(*args)
        try: self.this.append(this)
        except: self.this = this
MismatchException_swigregister = _libgambit.MismatchException_swigregister
MismatchException_swigregister(MismatchException)

class InvalidFileException:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidFileException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidFileException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_InvalidFileException
    __del__ = lambda self : None;
    def GetDescription(*args): return _libgambit.InvalidFileException_GetDescription(*args)
    def __init__(self, *args): 
        this = _libgambit.new_InvalidFileException(*args)
        try: self.this.append(this)
        except: self.this = this
InvalidFileException_swigregister = _libgambit.InvalidFileException_swigregister
InvalidFileException_swigregister(InvalidFileException)

class GameOutcomeRep(GameObject):
    __swig_setmethods__ = {}
    for _s in [GameObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameOutcomeRep, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameOutcomeRep, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetGame(*args): return _libgambit.GameOutcomeRep_GetGame(*args)
    def GetNumber(*args): return _libgambit.GameOutcomeRep_GetNumber(*args)
    def GetLabel(*args): return _libgambit.GameOutcomeRep_GetLabel(*args)
    def SetLabel(*args): return _libgambit.GameOutcomeRep_SetLabel(*args)
    def GetPayoff(*args): return _libgambit.GameOutcomeRep_GetPayoff(*args)
    def SetPayoff(*args): return _libgambit.GameOutcomeRep_SetPayoff(*args)
GameOutcomeRep_swigregister = _libgambit.GameOutcomeRep_swigregister
GameOutcomeRep_swigregister(GameOutcomeRep)

class GameActionRep(GameObject):
    __swig_setmethods__ = {}
    for _s in [GameObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameActionRep, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameActionRep, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetNumber(*args): return _libgambit.GameActionRep_GetNumber(*args)
    def GetInfoset(*args): return _libgambit.GameActionRep_GetInfoset(*args)
    def GetLabel(*args): return _libgambit.GameActionRep_GetLabel(*args)
    def SetLabel(*args): return _libgambit.GameActionRep_SetLabel(*args)
    def Precedes(*args): return _libgambit.GameActionRep_Precedes(*args)
    def DeleteAction(*args): return _libgambit.GameActionRep_DeleteAction(*args)
GameActionRep_swigregister = _libgambit.GameActionRep_swigregister
GameActionRep_swigregister(GameActionRep)

class GameInfosetRep(GameObject):
    __swig_setmethods__ = {}
    for _s in [GameObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameInfosetRep, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameInfosetRep, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetGame(*args): return _libgambit.GameInfosetRep_GetGame(*args)
    def GetNumber(*args): return _libgambit.GameInfosetRep_GetNumber(*args)
    def GetPlayer(*args): return _libgambit.GameInfosetRep_GetPlayer(*args)
    def SetPlayer(*args): return _libgambit.GameInfosetRep_SetPlayer(*args)
    def IsChanceInfoset(*args): return _libgambit.GameInfosetRep_IsChanceInfoset(*args)
    def SetLabel(*args): return _libgambit.GameInfosetRep_SetLabel(*args)
    def GetLabel(*args): return _libgambit.GameInfosetRep_GetLabel(*args)
    def InsertAction(*args): return _libgambit.GameInfosetRep_InsertAction(*args)
    def NumActions(*args): return _libgambit.GameInfosetRep_NumActions(*args)
    def GetAction(*args): return _libgambit.GameInfosetRep_GetAction(*args)
    def Actions(*args): return _libgambit.GameInfosetRep_Actions(*args)
    def NumMembers(*args): return _libgambit.GameInfosetRep_NumMembers(*args)
    def GetMember(*args): return _libgambit.GameInfosetRep_GetMember(*args)
    def Precedes(*args): return _libgambit.GameInfosetRep_Precedes(*args)
    def SetActionProb(*args): return _libgambit.GameInfosetRep_SetActionProb(*args)
    def Reveal(*args): return _libgambit.GameInfosetRep_Reveal(*args)
GameInfosetRep_swigregister = _libgambit.GameInfosetRep_swigregister
GameInfosetRep_swigregister(GameInfosetRep)

class GameStrategyRep(GameObject):
    __swig_setmethods__ = {}
    for _s in [GameObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameStrategyRep, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameStrategyRep, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetLabel(*args): return _libgambit.GameStrategyRep_GetLabel(*args)
    def SetLabel(*args): return _libgambit.GameStrategyRep_SetLabel(*args)
    def GetPlayer(*args): return _libgambit.GameStrategyRep_GetPlayer(*args)
    def GetNumber(*args): return _libgambit.GameStrategyRep_GetNumber(*args)
    def GetId(*args): return _libgambit.GameStrategyRep_GetId(*args)
    def DeleteStrategy(*args): return _libgambit.GameStrategyRep_DeleteStrategy(*args)
    __swig_destroy__ = _libgambit.delete_GameStrategyRep
    __del__ = lambda self : None;
GameStrategyRep_swigregister = _libgambit.GameStrategyRep_swigregister
GameStrategyRep_swigregister(GameStrategyRep)

class GamePlayerRep(GameObject):
    __swig_setmethods__ = {}
    for _s in [GameObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GamePlayerRep, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GamePlayerRep, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetNumber(*args): return _libgambit.GamePlayerRep_GetNumber(*args)
    def GetGame(*args): return _libgambit.GamePlayerRep_GetGame(*args)
    def GetLabel(*args): return _libgambit.GamePlayerRep_GetLabel(*args)
    def SetLabel(*args): return _libgambit.GamePlayerRep_SetLabel(*args)
    def IsChance(*args): return _libgambit.GamePlayerRep_IsChance(*args)
    def NumInfosets(*args): return _libgambit.GamePlayerRep_NumInfosets(*args)
    def GetInfoset(*args): return _libgambit.GamePlayerRep_GetInfoset(*args)
    def Infosets(*args): return _libgambit.GamePlayerRep_Infosets(*args)
    def NumStrategies(*args): return _libgambit.GamePlayerRep_NumStrategies(*args)
    def GetStrategy(*args): return _libgambit.GamePlayerRep_GetStrategy(*args)
    def Strategies(*args): return _libgambit.GamePlayerRep_Strategies(*args)
    def NewStrategy(*args): return _libgambit.GamePlayerRep_NewStrategy(*args)
GamePlayerRep_swigregister = _libgambit.GamePlayerRep_swigregister
GamePlayerRep_swigregister(GamePlayerRep)

class GameNodeRep(GameObject):
    __swig_setmethods__ = {}
    for _s in [GameObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameNodeRep, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameNodeRep, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetGame(*args): return _libgambit.GameNodeRep_GetGame(*args)
    def GetLabel(*args): return _libgambit.GameNodeRep_GetLabel(*args)
    def SetLabel(*args): return _libgambit.GameNodeRep_SetLabel(*args)
    def GetNumber(*args): return _libgambit.GameNodeRep_GetNumber(*args)
    def NumberInInfoset(*args): return _libgambit.GameNodeRep_NumberInInfoset(*args)
    def NumChildren(*args): return _libgambit.GameNodeRep_NumChildren(*args)
    def GetInfoset(*args): return _libgambit.GameNodeRep_GetInfoset(*args)
    def SetInfoset(*args): return _libgambit.GameNodeRep_SetInfoset(*args)
    def LeaveInfoset(*args): return _libgambit.GameNodeRep_LeaveInfoset(*args)
    def IsTerminal(*args): return _libgambit.GameNodeRep_IsTerminal(*args)
    def GetPlayer(*args): return _libgambit.GameNodeRep_GetPlayer(*args)
    def GetPriorAction(*args): return _libgambit.GameNodeRep_GetPriorAction(*args)
    def GetChild(*args): return _libgambit.GameNodeRep_GetChild(*args)
    def GetParent(*args): return _libgambit.GameNodeRep_GetParent(*args)
    def GetNextSibling(*args): return _libgambit.GameNodeRep_GetNextSibling(*args)
    def GetPriorSibling(*args): return _libgambit.GameNodeRep_GetPriorSibling(*args)
    def GetOutcome(*args): return _libgambit.GameNodeRep_GetOutcome(*args)
    def SetOutcome(*args): return _libgambit.GameNodeRep_SetOutcome(*args)
    def IsSuccessorOf(*args): return _libgambit.GameNodeRep_IsSuccessorOf(*args)
    def IsSubgameRoot(*args): return _libgambit.GameNodeRep_IsSubgameRoot(*args)
    def DeleteParent(*args): return _libgambit.GameNodeRep_DeleteParent(*args)
    def DeleteTree(*args): return _libgambit.GameNodeRep_DeleteTree(*args)
    def CopyTree(*args): return _libgambit.GameNodeRep_CopyTree(*args)
    def MoveTree(*args): return _libgambit.GameNodeRep_MoveTree(*args)
    def AppendMove(*args): return _libgambit.GameNodeRep_AppendMove(*args)
    def InsertMove(*args): return _libgambit.GameNodeRep_InsertMove(*args)
GameNodeRep_swigregister = _libgambit.GameNodeRep_swigregister
GameNodeRep_swigregister(GameNodeRep)

class PureStrategyProfile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PureStrategyProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PureStrategyProfile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_PureStrategyProfile(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetStrategy(*args): return _libgambit.PureStrategyProfile_GetStrategy(*args)
    def SetStrategy(*args): return _libgambit.PureStrategyProfile_SetStrategy(*args)
    def GetOutcome(*args): return _libgambit.PureStrategyProfile_GetOutcome(*args)
    def SetOutcome(*args): return _libgambit.PureStrategyProfile_SetOutcome(*args)
    def GetPayoff(*args): return _libgambit.PureStrategyProfile_GetPayoff(*args)
    def GetStrategyValue(*args): return _libgambit.PureStrategyProfile_GetStrategyValue(*args)
    __swig_destroy__ = _libgambit.delete_PureStrategyProfile
    __del__ = lambda self : None;
PureStrategyProfile_swigregister = _libgambit.PureStrategyProfile_swigregister
PureStrategyProfile_swigregister(PureStrategyProfile)

class PureBehavProfile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PureBehavProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PureBehavProfile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_PureBehavProfile(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetAction(*args): return _libgambit.PureBehavProfile_GetAction(*args)
    def SetAction(*args): return _libgambit.PureBehavProfile_SetAction(*args)
    __swig_destroy__ = _libgambit.delete_PureBehavProfile
    __del__ = lambda self : None;
PureBehavProfile_swigregister = _libgambit.PureBehavProfile_swigregister
PureBehavProfile_swigregister(PureBehavProfile)

class GameRep(GameObject):
    __swig_setmethods__ = {}
    for _s in [GameObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameRep, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameRep, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_GameRep(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_GameRep
    __del__ = lambda self : None;
    def Copy(*args): return _libgambit.GameRep_Copy(*args)
    def IsTree(*args): return _libgambit.GameRep_IsTree(*args)
    def GetTitle(*args): return _libgambit.GameRep_GetTitle(*args)
    def SetTitle(*args): return _libgambit.GameRep_SetTitle(*args)
    def GetComment(*args): return _libgambit.GameRep_GetComment(*args)
    def SetComment(*args): return _libgambit.GameRep_SetComment(*args)
    def IsConstSum(*args): return _libgambit.GameRep_IsConstSum(*args)
    def GetMinPayoff(*args): return _libgambit.GameRep_GetMinPayoff(*args)
    def GetMaxPayoff(*args): return _libgambit.GameRep_GetMaxPayoff(*args)
    def IsPerfectRecall(*args): return _libgambit.GameRep_IsPerfectRecall(*args)
    def Canonicalize(*args): return _libgambit.GameRep_Canonicalize(*args)
    def ClearComputedValues(*args): return _libgambit.GameRep_ClearComputedValues(*args)
    def BuildComputedValues(*args): return _libgambit.GameRep_BuildComputedValues(*args)
    def HasComputedValues(*args): return _libgambit.GameRep_HasComputedValues(*args)
    def WriteEfgFile(*args): return _libgambit.GameRep_WriteEfgFile(*args)
    def WriteNfgFile(*args): return _libgambit.GameRep_WriteNfgFile(*args)
    def NumActions(*args): return _libgambit.GameRep_NumActions(*args)
    def NumMembers(*args): return _libgambit.GameRep_NumMembers(*args)
    def NumStrategies(*args): return _libgambit.GameRep_NumStrategies(*args)
    def GetStrategy(*args): return _libgambit.GameRep_GetStrategy(*args)
    def BehavProfileLength(*args): return _libgambit.GameRep_BehavProfileLength(*args)
    def MixedProfileLength(*args): return _libgambit.GameRep_MixedProfileLength(*args)
    def NumPlayers(*args): return _libgambit.GameRep_NumPlayers(*args)
    def GetPlayer(*args): return _libgambit.GameRep_GetPlayer(*args)
    def Players(*args): return _libgambit.GameRep_Players(*args)
    def GetChance(*args): return _libgambit.GameRep_GetChance(*args)
    def NewPlayer(*args): return _libgambit.GameRep_NewPlayer(*args)
    def GetInfoset(*args): return _libgambit.GameRep_GetInfoset(*args)
    def NumInfosets(*args): return _libgambit.GameRep_NumInfosets(*args)
    def GetAction(*args): return _libgambit.GameRep_GetAction(*args)
    def NumOutcomes(*args): return _libgambit.GameRep_NumOutcomes(*args)
    def GetOutcome(*args): return _libgambit.GameRep_GetOutcome(*args)
    def NewOutcome(*args): return _libgambit.GameRep_NewOutcome(*args)
    def DeleteOutcome(*args): return _libgambit.GameRep_DeleteOutcome(*args)
    def GetRoot(*args): return _libgambit.GameRep_GetRoot(*args)
    def NumNodes(*args): return _libgambit.GameRep_NumNodes(*args)
    def efg_file(*args): return _libgambit.GameRep_efg_file(*args)
    def nfg_file(*args): return _libgambit.GameRep_nfg_file(*args)
    def NewMixedStrategyDouble(*args): return _libgambit.GameRep_NewMixedStrategyDouble(*args)
    def NewMixedStrategyRational(*args): return _libgambit.GameRep_NewMixedStrategyRational(*args)
    def NewMixedBehavDouble(*args): return _libgambit.GameRep_NewMixedBehavDouble(*args)
    def NewMixedBehavRational(*args): return _libgambit.GameRep_NewMixedBehavRational(*args)
GameRep_swigregister = _libgambit.GameRep_swigregister
GameRep_swigregister(GameRep)

NewTree = _libgambit.NewTree
NewTable = _libgambit.NewTable
ReadGame = _libgambit.ReadGame
class GameOutcome(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameOutcome, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameOutcome, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_GameOutcome(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_GameOutcome
    __del__ = lambda self : None;
    def __deref__(*args): return _libgambit.GameOutcome___deref__(*args)
    def __eq__(*args): return _libgambit.GameOutcome___eq__(*args)
    def __ne__(*args): return _libgambit.GameOutcome___ne__(*args)
    def GetGame(*args): return _libgambit.GameOutcome_GetGame(*args)
    def GetNumber(*args): return _libgambit.GameOutcome_GetNumber(*args)
    def GetLabel(*args): return _libgambit.GameOutcome_GetLabel(*args)
    def SetLabel(*args): return _libgambit.GameOutcome_SetLabel(*args)
    def SetPayoff(*args): return _libgambit.GameOutcome_SetPayoff(*args)
    def GetPayoff(*args): return _libgambit.GameOutcome_GetPayoff(*args)
    def IsValid(*args): return _libgambit.GameOutcome_IsValid(*args)
    def Invalidate(*args): return _libgambit.GameOutcome_Invalidate(*args)
    def IncRef(*args): return _libgambit.GameOutcome_IncRef(*args)
    def DecRef(*args): return _libgambit.GameOutcome_DecRef(*args)
    def RefCount(*args): return _libgambit.GameOutcome_RefCount(*args)
GameOutcome_swigregister = _libgambit.GameOutcome_swigregister
GameOutcome_swigregister(GameOutcome)

class GameStrategy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameStrategy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameStrategy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_GameStrategy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_GameStrategy
    __del__ = lambda self : None;
    def __deref__(*args): return _libgambit.GameStrategy___deref__(*args)
    def __eq__(*args): return _libgambit.GameStrategy___eq__(*args)
    def __ne__(*args): return _libgambit.GameStrategy___ne__(*args)
    def GetLabel(*args): return _libgambit.GameStrategy_GetLabel(*args)
    def SetLabel(*args): return _libgambit.GameStrategy_SetLabel(*args)
    def GetPlayer(*args): return _libgambit.GameStrategy_GetPlayer(*args)
    def GetNumber(*args): return _libgambit.GameStrategy_GetNumber(*args)
    def GetId(*args): return _libgambit.GameStrategy_GetId(*args)
    def DeleteStrategy(*args): return _libgambit.GameStrategy_DeleteStrategy(*args)
    def IsValid(*args): return _libgambit.GameStrategy_IsValid(*args)
    def Invalidate(*args): return _libgambit.GameStrategy_Invalidate(*args)
    def IncRef(*args): return _libgambit.GameStrategy_IncRef(*args)
    def DecRef(*args): return _libgambit.GameStrategy_DecRef(*args)
    def RefCount(*args): return _libgambit.GameStrategy_RefCount(*args)
GameStrategy_swigregister = _libgambit.GameStrategy_swigregister
GameStrategy_swigregister(GameStrategy)

class GameAction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameAction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameAction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_GameAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_GameAction
    __del__ = lambda self : None;
    def __deref__(*args): return _libgambit.GameAction___deref__(*args)
    def __eq__(*args): return _libgambit.GameAction___eq__(*args)
    def __ne__(*args): return _libgambit.GameAction___ne__(*args)
    def GetNumber(*args): return _libgambit.GameAction_GetNumber(*args)
    def GetInfoset(*args): return _libgambit.GameAction_GetInfoset(*args)
    def GetLabel(*args): return _libgambit.GameAction_GetLabel(*args)
    def SetLabel(*args): return _libgambit.GameAction_SetLabel(*args)
    def Precedes(*args): return _libgambit.GameAction_Precedes(*args)
    def DeleteAction(*args): return _libgambit.GameAction_DeleteAction(*args)
    def IsValid(*args): return _libgambit.GameAction_IsValid(*args)
    def Invalidate(*args): return _libgambit.GameAction_Invalidate(*args)
    def IncRef(*args): return _libgambit.GameAction_IncRef(*args)
    def DecRef(*args): return _libgambit.GameAction_DecRef(*args)
    def RefCount(*args): return _libgambit.GameAction_RefCount(*args)
GameAction_swigregister = _libgambit.GameAction_swigregister
GameAction_swigregister(GameAction)

class GameInfoset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameInfoset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameInfoset, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_GameInfoset(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_GameInfoset
    __del__ = lambda self : None;
    def __deref__(*args): return _libgambit.GameInfoset___deref__(*args)
    def __eq__(*args): return _libgambit.GameInfoset___eq__(*args)
    def __ne__(*args): return _libgambit.GameInfoset___ne__(*args)
    def GetGame(*args): return _libgambit.GameInfoset_GetGame(*args)
    def GetNumber(*args): return _libgambit.GameInfoset_GetNumber(*args)
    def GetPlayer(*args): return _libgambit.GameInfoset_GetPlayer(*args)
    def SetPlayer(*args): return _libgambit.GameInfoset_SetPlayer(*args)
    def IsChanceInfoset(*args): return _libgambit.GameInfoset_IsChanceInfoset(*args)
    def SetLabel(*args): return _libgambit.GameInfoset_SetLabel(*args)
    def GetLabel(*args): return _libgambit.GameInfoset_GetLabel(*args)
    def InsertAction(*args): return _libgambit.GameInfoset_InsertAction(*args)
    def NumActions(*args): return _libgambit.GameInfoset_NumActions(*args)
    def GetAction(*args): return _libgambit.GameInfoset_GetAction(*args)
    def Actions(*args): return _libgambit.GameInfoset_Actions(*args)
    def NumMembers(*args): return _libgambit.GameInfoset_NumMembers(*args)
    def GetMember(*args): return _libgambit.GameInfoset_GetMember(*args)
    def Precedes(*args): return _libgambit.GameInfoset_Precedes(*args)
    def SetActionProb(*args): return _libgambit.GameInfoset_SetActionProb(*args)
    def Reveal(*args): return _libgambit.GameInfoset_Reveal(*args)
    def IsValid(*args): return _libgambit.GameInfoset_IsValid(*args)
    def Invalidate(*args): return _libgambit.GameInfoset_Invalidate(*args)
    def IncRef(*args): return _libgambit.GameInfoset_IncRef(*args)
    def DecRef(*args): return _libgambit.GameInfoset_DecRef(*args)
    def RefCount(*args): return _libgambit.GameInfoset_RefCount(*args)
GameInfoset_swigregister = _libgambit.GameInfoset_swigregister
GameInfoset_swigregister(GameInfoset)

class GameNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_GameNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_GameNode
    __del__ = lambda self : None;
    def __deref__(*args): return _libgambit.GameNode___deref__(*args)
    def __eq__(*args): return _libgambit.GameNode___eq__(*args)
    def __ne__(*args): return _libgambit.GameNode___ne__(*args)
    def GetGame(*args): return _libgambit.GameNode_GetGame(*args)
    def GetLabel(*args): return _libgambit.GameNode_GetLabel(*args)
    def SetLabel(*args): return _libgambit.GameNode_SetLabel(*args)
    def GetNumber(*args): return _libgambit.GameNode_GetNumber(*args)
    def NumberInInfoset(*args): return _libgambit.GameNode_NumberInInfoset(*args)
    def NumChildren(*args): return _libgambit.GameNode_NumChildren(*args)
    def GetInfoset(*args): return _libgambit.GameNode_GetInfoset(*args)
    def SetInfoset(*args): return _libgambit.GameNode_SetInfoset(*args)
    def LeaveInfoset(*args): return _libgambit.GameNode_LeaveInfoset(*args)
    def IsTerminal(*args): return _libgambit.GameNode_IsTerminal(*args)
    def GetPlayer(*args): return _libgambit.GameNode_GetPlayer(*args)
    def GetPriorAction(*args): return _libgambit.GameNode_GetPriorAction(*args)
    def GetChild(*args): return _libgambit.GameNode_GetChild(*args)
    def GetParent(*args): return _libgambit.GameNode_GetParent(*args)
    def GetNextSibling(*args): return _libgambit.GameNode_GetNextSibling(*args)
    def GetPriorSibling(*args): return _libgambit.GameNode_GetPriorSibling(*args)
    def GetOutcome(*args): return _libgambit.GameNode_GetOutcome(*args)
    def SetOutcome(*args): return _libgambit.GameNode_SetOutcome(*args)
    def IsSuccessorOf(*args): return _libgambit.GameNode_IsSuccessorOf(*args)
    def IsSubgameRoot(*args): return _libgambit.GameNode_IsSubgameRoot(*args)
    def DeleteParent(*args): return _libgambit.GameNode_DeleteParent(*args)
    def DeleteTree(*args): return _libgambit.GameNode_DeleteTree(*args)
    def CopyTree(*args): return _libgambit.GameNode_CopyTree(*args)
    def MoveTree(*args): return _libgambit.GameNode_MoveTree(*args)
    def AppendMove(*args): return _libgambit.GameNode_AppendMove(*args)
    def InsertMove(*args): return _libgambit.GameNode_InsertMove(*args)
    def IsValid(*args): return _libgambit.GameNode_IsValid(*args)
    def Invalidate(*args): return _libgambit.GameNode_Invalidate(*args)
    def IncRef(*args): return _libgambit.GameNode_IncRef(*args)
    def DecRef(*args): return _libgambit.GameNode_DecRef(*args)
    def RefCount(*args): return _libgambit.GameNode_RefCount(*args)
GameNode_swigregister = _libgambit.GameNode_swigregister
GameNode_swigregister(GameNode)

class GamePlayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GamePlayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GamePlayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_GamePlayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_GamePlayer
    __del__ = lambda self : None;
    def __deref__(*args): return _libgambit.GamePlayer___deref__(*args)
    def __eq__(*args): return _libgambit.GamePlayer___eq__(*args)
    def __ne__(*args): return _libgambit.GamePlayer___ne__(*args)
    def GetNumber(*args): return _libgambit.GamePlayer_GetNumber(*args)
    def GetGame(*args): return _libgambit.GamePlayer_GetGame(*args)
    def GetLabel(*args): return _libgambit.GamePlayer_GetLabel(*args)
    def SetLabel(*args): return _libgambit.GamePlayer_SetLabel(*args)
    def IsChance(*args): return _libgambit.GamePlayer_IsChance(*args)
    def NumInfosets(*args): return _libgambit.GamePlayer_NumInfosets(*args)
    def GetInfoset(*args): return _libgambit.GamePlayer_GetInfoset(*args)
    def Infosets(*args): return _libgambit.GamePlayer_Infosets(*args)
    def NumStrategies(*args): return _libgambit.GamePlayer_NumStrategies(*args)
    def GetStrategy(*args): return _libgambit.GamePlayer_GetStrategy(*args)
    def Strategies(*args): return _libgambit.GamePlayer_Strategies(*args)
    def NewStrategy(*args): return _libgambit.GamePlayer_NewStrategy(*args)
    def IsValid(*args): return _libgambit.GamePlayer_IsValid(*args)
    def Invalidate(*args): return _libgambit.GamePlayer_Invalidate(*args)
    def IncRef(*args): return _libgambit.GamePlayer_IncRef(*args)
    def DecRef(*args): return _libgambit.GamePlayer_DecRef(*args)
    def RefCount(*args): return _libgambit.GamePlayer_RefCount(*args)
GamePlayer_swigregister = _libgambit.GamePlayer_swigregister
GamePlayer_swigregister(GamePlayer)

class GameActionIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameActionIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameActionIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_GameActionIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def plusplus(*args): return _libgambit.GameActionIterator_plusplus(*args)
    def AtEnd(*args): return _libgambit.GameActionIterator_AtEnd(*args)
    def GetIndex(*args): return _libgambit.GameActionIterator_GetIndex(*args)
    def __deref__(*args): return _libgambit.GameActionIterator___deref__(*args)
    def __iter__(self): return self
    def next(self):
      if self.AtEnd(): raise StopIteration
      value = self.__deref__()
      self.plusplus()       
      return value

    __swig_destroy__ = _libgambit.delete_GameActionIterator
    __del__ = lambda self : None;
    def GetNumber(*args): return _libgambit.GameActionIterator_GetNumber(*args)
    def GetInfoset(*args): return _libgambit.GameActionIterator_GetInfoset(*args)
    def GetLabel(*args): return _libgambit.GameActionIterator_GetLabel(*args)
    def SetLabel(*args): return _libgambit.GameActionIterator_SetLabel(*args)
    def Precedes(*args): return _libgambit.GameActionIterator_Precedes(*args)
    def DeleteAction(*args): return _libgambit.GameActionIterator_DeleteAction(*args)
    def IsValid(*args): return _libgambit.GameActionIterator_IsValid(*args)
    def Invalidate(*args): return _libgambit.GameActionIterator_Invalidate(*args)
    def IncRef(*args): return _libgambit.GameActionIterator_IncRef(*args)
    def DecRef(*args): return _libgambit.GameActionIterator_DecRef(*args)
    def RefCount(*args): return _libgambit.GameActionIterator_RefCount(*args)
GameActionIterator_swigregister = _libgambit.GameActionIterator_swigregister
GameActionIterator_swigregister(GameActionIterator)

class GameInfosetIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameInfosetIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameInfosetIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_GameInfosetIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def plusplus(*args): return _libgambit.GameInfosetIterator_plusplus(*args)
    def AtEnd(*args): return _libgambit.GameInfosetIterator_AtEnd(*args)
    def GetIndex(*args): return _libgambit.GameInfosetIterator_GetIndex(*args)
    def __deref__(*args): return _libgambit.GameInfosetIterator___deref__(*args)
    def __iter__(self): return self
    def next(self):
      if self.AtEnd(): raise StopIteration
      value = self.__deref__()
      self.plusplus()       
      return value

    __swig_destroy__ = _libgambit.delete_GameInfosetIterator
    __del__ = lambda self : None;
    def GetGame(*args): return _libgambit.GameInfosetIterator_GetGame(*args)
    def GetNumber(*args): return _libgambit.GameInfosetIterator_GetNumber(*args)
    def GetPlayer(*args): return _libgambit.GameInfosetIterator_GetPlayer(*args)
    def SetPlayer(*args): return _libgambit.GameInfosetIterator_SetPlayer(*args)
    def IsChanceInfoset(*args): return _libgambit.GameInfosetIterator_IsChanceInfoset(*args)
    def SetLabel(*args): return _libgambit.GameInfosetIterator_SetLabel(*args)
    def GetLabel(*args): return _libgambit.GameInfosetIterator_GetLabel(*args)
    def InsertAction(*args): return _libgambit.GameInfosetIterator_InsertAction(*args)
    def NumActions(*args): return _libgambit.GameInfosetIterator_NumActions(*args)
    def GetAction(*args): return _libgambit.GameInfosetIterator_GetAction(*args)
    def Actions(*args): return _libgambit.GameInfosetIterator_Actions(*args)
    def NumMembers(*args): return _libgambit.GameInfosetIterator_NumMembers(*args)
    def GetMember(*args): return _libgambit.GameInfosetIterator_GetMember(*args)
    def Precedes(*args): return _libgambit.GameInfosetIterator_Precedes(*args)
    def SetActionProb(*args): return _libgambit.GameInfosetIterator_SetActionProb(*args)
    def Reveal(*args): return _libgambit.GameInfosetIterator_Reveal(*args)
    def IsValid(*args): return _libgambit.GameInfosetIterator_IsValid(*args)
    def Invalidate(*args): return _libgambit.GameInfosetIterator_Invalidate(*args)
    def IncRef(*args): return _libgambit.GameInfosetIterator_IncRef(*args)
    def DecRef(*args): return _libgambit.GameInfosetIterator_DecRef(*args)
    def RefCount(*args): return _libgambit.GameInfosetIterator_RefCount(*args)
GameInfosetIterator_swigregister = _libgambit.GameInfosetIterator_swigregister
GameInfosetIterator_swigregister(GameInfosetIterator)

class GameStrategyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameStrategyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameStrategyIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_GameStrategyIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def plusplus(*args): return _libgambit.GameStrategyIterator_plusplus(*args)
    def AtEnd(*args): return _libgambit.GameStrategyIterator_AtEnd(*args)
    def GetIndex(*args): return _libgambit.GameStrategyIterator_GetIndex(*args)
    def __deref__(*args): return _libgambit.GameStrategyIterator___deref__(*args)
    def __iter__(self): return self
    def next(self):
      if self.AtEnd(): raise StopIteration
      value = self.__deref__()
      self.plusplus()       
      return value

    __swig_destroy__ = _libgambit.delete_GameStrategyIterator
    __del__ = lambda self : None;
    def GetLabel(*args): return _libgambit.GameStrategyIterator_GetLabel(*args)
    def SetLabel(*args): return _libgambit.GameStrategyIterator_SetLabel(*args)
    def GetPlayer(*args): return _libgambit.GameStrategyIterator_GetPlayer(*args)
    def GetNumber(*args): return _libgambit.GameStrategyIterator_GetNumber(*args)
    def GetId(*args): return _libgambit.GameStrategyIterator_GetId(*args)
    def DeleteStrategy(*args): return _libgambit.GameStrategyIterator_DeleteStrategy(*args)
    def IsValid(*args): return _libgambit.GameStrategyIterator_IsValid(*args)
    def Invalidate(*args): return _libgambit.GameStrategyIterator_Invalidate(*args)
    def IncRef(*args): return _libgambit.GameStrategyIterator_IncRef(*args)
    def DecRef(*args): return _libgambit.GameStrategyIterator_DecRef(*args)
    def RefCount(*args): return _libgambit.GameStrategyIterator_RefCount(*args)
GameStrategyIterator_swigregister = _libgambit.GameStrategyIterator_swigregister
GameStrategyIterator_swigregister(GameStrategyIterator)

class GamePlayerIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GamePlayerIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GamePlayerIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_GamePlayerIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def plusplus(*args): return _libgambit.GamePlayerIterator_plusplus(*args)
    def AtEnd(*args): return _libgambit.GamePlayerIterator_AtEnd(*args)
    def GetIndex(*args): return _libgambit.GamePlayerIterator_GetIndex(*args)
    def __deref__(*args): return _libgambit.GamePlayerIterator___deref__(*args)
    def __iter__(self): return self
    def next(self):
      if self.AtEnd(): raise StopIteration
      value = self.__deref__()
      self.plusplus()       
      return value

    __swig_destroy__ = _libgambit.delete_GamePlayerIterator
    __del__ = lambda self : None;
    def GetNumber(*args): return _libgambit.GamePlayerIterator_GetNumber(*args)
    def GetGame(*args): return _libgambit.GamePlayerIterator_GetGame(*args)
    def GetLabel(*args): return _libgambit.GamePlayerIterator_GetLabel(*args)
    def SetLabel(*args): return _libgambit.GamePlayerIterator_SetLabel(*args)
    def IsChance(*args): return _libgambit.GamePlayerIterator_IsChance(*args)
    def NumInfosets(*args): return _libgambit.GamePlayerIterator_NumInfosets(*args)
    def GetInfoset(*args): return _libgambit.GamePlayerIterator_GetInfoset(*args)
    def Infosets(*args): return _libgambit.GamePlayerIterator_Infosets(*args)
    def NumStrategies(*args): return _libgambit.GamePlayerIterator_NumStrategies(*args)
    def GetStrategy(*args): return _libgambit.GamePlayerIterator_GetStrategy(*args)
    def Strategies(*args): return _libgambit.GamePlayerIterator_Strategies(*args)
    def NewStrategy(*args): return _libgambit.GamePlayerIterator_NewStrategy(*args)
    def IsValid(*args): return _libgambit.GamePlayerIterator_IsValid(*args)
    def Invalidate(*args): return _libgambit.GamePlayerIterator_Invalidate(*args)
    def IncRef(*args): return _libgambit.GamePlayerIterator_IncRef(*args)
    def DecRef(*args): return _libgambit.GamePlayerIterator_DecRef(*args)
    def RefCount(*args): return _libgambit.GamePlayerIterator_RefCount(*args)
GamePlayerIterator_swigregister = _libgambit.GamePlayerIterator_swigregister
GamePlayerIterator_swigregister(GamePlayerIterator)

class Game(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Game, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Game, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_Game(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_Game
    __del__ = lambda self : None;
    def __deref__(*args): return _libgambit.Game___deref__(*args)
    def __eq__(*args): return _libgambit.Game___eq__(*args)
    def __ne__(*args): return _libgambit.Game___ne__(*args)
    def mixed_strategy(self, rational=False):
      if rational:
        return self.NewMixedStrategyRational()
      else:
        return self.NewMixedStrategyDouble()

    def behavior_strategy(self, rational=False):
      if rational:
        return self.NewMixedBehavRational()
      else:
        return self.NewMixedBehavDouble()

    def __str__(self):
      if self.IsTree():
        return "Gambit extensive game '%s'" % self.GetTitle()
      else:
        return "Gambit strategic game '%s'" % self.GetTitle()

    def __repr__(self):  return str(self)

    def Copy(*args): return _libgambit.Game_Copy(*args)
    def IsTree(*args): return _libgambit.Game_IsTree(*args)
    def GetTitle(*args): return _libgambit.Game_GetTitle(*args)
    def SetTitle(*args): return _libgambit.Game_SetTitle(*args)
    def GetComment(*args): return _libgambit.Game_GetComment(*args)
    def SetComment(*args): return _libgambit.Game_SetComment(*args)
    def IsConstSum(*args): return _libgambit.Game_IsConstSum(*args)
    def GetMinPayoff(*args): return _libgambit.Game_GetMinPayoff(*args)
    def GetMaxPayoff(*args): return _libgambit.Game_GetMaxPayoff(*args)
    def IsPerfectRecall(*args): return _libgambit.Game_IsPerfectRecall(*args)
    def Canonicalize(*args): return _libgambit.Game_Canonicalize(*args)
    def ClearComputedValues(*args): return _libgambit.Game_ClearComputedValues(*args)
    def BuildComputedValues(*args): return _libgambit.Game_BuildComputedValues(*args)
    def HasComputedValues(*args): return _libgambit.Game_HasComputedValues(*args)
    def WriteEfgFile(*args): return _libgambit.Game_WriteEfgFile(*args)
    def WriteNfgFile(*args): return _libgambit.Game_WriteNfgFile(*args)
    def NumActions(*args): return _libgambit.Game_NumActions(*args)
    def NumMembers(*args): return _libgambit.Game_NumMembers(*args)
    def NumStrategies(*args): return _libgambit.Game_NumStrategies(*args)
    def GetStrategy(*args): return _libgambit.Game_GetStrategy(*args)
    def BehavProfileLength(*args): return _libgambit.Game_BehavProfileLength(*args)
    def MixedProfileLength(*args): return _libgambit.Game_MixedProfileLength(*args)
    def NumPlayers(*args): return _libgambit.Game_NumPlayers(*args)
    def GetPlayer(*args): return _libgambit.Game_GetPlayer(*args)
    def Players(*args): return _libgambit.Game_Players(*args)
    def GetChance(*args): return _libgambit.Game_GetChance(*args)
    def NewPlayer(*args): return _libgambit.Game_NewPlayer(*args)
    def GetInfoset(*args): return _libgambit.Game_GetInfoset(*args)
    def NumInfosets(*args): return _libgambit.Game_NumInfosets(*args)
    def GetAction(*args): return _libgambit.Game_GetAction(*args)
    def NumOutcomes(*args): return _libgambit.Game_NumOutcomes(*args)
    def GetOutcome(*args): return _libgambit.Game_GetOutcome(*args)
    def NewOutcome(*args): return _libgambit.Game_NewOutcome(*args)
    def DeleteOutcome(*args): return _libgambit.Game_DeleteOutcome(*args)
    def GetRoot(*args): return _libgambit.Game_GetRoot(*args)
    def NumNodes(*args): return _libgambit.Game_NumNodes(*args)
    def efg_file(*args): return _libgambit.Game_efg_file(*args)
    def nfg_file(*args): return _libgambit.Game_nfg_file(*args)
    def NewMixedStrategyDouble(*args): return _libgambit.Game_NewMixedStrategyDouble(*args)
    def NewMixedStrategyRational(*args): return _libgambit.Game_NewMixedStrategyRational(*args)
    def NewMixedBehavDouble(*args): return _libgambit.Game_NewMixedBehavDouble(*args)
    def NewMixedBehavRational(*args): return _libgambit.Game_NewMixedBehavRational(*args)
    def IsValid(*args): return _libgambit.Game_IsValid(*args)
    def Invalidate(*args): return _libgambit.Game_Invalidate(*args)
    def IncRef(*args): return _libgambit.Game_IncRef(*args)
    def DecRef(*args): return _libgambit.Game_DecRef(*args)
    def RefCount(*args): return _libgambit.Game_RefCount(*args)
Game_swigregister = _libgambit.Game_swigregister
Game_swigregister(Game)

ReadGameString = _libgambit.ReadGameString
def ReadGame(x):
  if isinstance(x, str):
    try:
      return ReadGameString(x)
    except RuntimeError:
      pass

    try:
      return ReadGameString(file(x).read())
    except:
      raise RuntimeError

  return ReadGameString(x.read())

class MixedStrategyDouble(VectorDouble):
    __swig_setmethods__ = {}
    for _s in [VectorDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedStrategyDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedStrategyDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_MixedStrategyDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args): return _libgambit.MixedStrategyDouble___eq__(*args)
    def __ne__(*args): return _libgambit.MixedStrategyDouble___ne__(*args)
    def GetGame(*args): return _libgambit.MixedStrategyDouble_GetGame(*args)
    def GetSupport(*args): return _libgambit.MixedStrategyDouble_GetSupport(*args)
    def SetCentroid(*args): return _libgambit.MixedStrategyDouble_SetCentroid(*args)
    def MixedProfileLength(*args): return _libgambit.MixedStrategyDouble_MixedProfileLength(*args)
    def ToFullSupport(*args): return _libgambit.MixedStrategyDouble_ToFullSupport(*args)
    def GetPayoff(*args): return _libgambit.MixedStrategyDouble_GetPayoff(*args)
    def GetPayoffDeriv(*args): return _libgambit.MixedStrategyDouble_GetPayoffDeriv(*args)
    def GetStrategyValue(*args): return _libgambit.MixedStrategyDouble_GetStrategyValue(*args)
    def GetLiapValue(*args): return _libgambit.MixedStrategyDouble_GetLiapValue(*args)
    def behavior(*args): return _libgambit.MixedStrategyDouble_behavior(*args)
    def __len__(*args): return _libgambit.MixedStrategyDouble___len__(*args)
    def __getitem__(*args): return _libgambit.MixedStrategyDouble___getitem__(*args)
    def __setitem__(*args): return _libgambit.MixedStrategyDouble___setitem__(*args)
    def __repr__(self):
      return "Mixed strategy profile on '%s': [%s]" % \
             (self.GetGame().GetTitle(),
       ", ".join([ str(self[i]) for i in xrange(len(self)) ]))	

    def __str__(self):   return repr(self)

    __swig_destroy__ = _libgambit.delete_MixedStrategyDouble
    __del__ = lambda self : None;
MixedStrategyDouble_swigregister = _libgambit.MixedStrategyDouble_swigregister
MixedStrategyDouble_swigregister(MixedStrategyDouble)

class MixedStrategyRational(VectorRational):
    __swig_setmethods__ = {}
    for _s in [VectorRational]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedStrategyRational, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorRational]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedStrategyRational, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_MixedStrategyRational(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args): return _libgambit.MixedStrategyRational___eq__(*args)
    def __ne__(*args): return _libgambit.MixedStrategyRational___ne__(*args)
    def GetGame(*args): return _libgambit.MixedStrategyRational_GetGame(*args)
    def GetSupport(*args): return _libgambit.MixedStrategyRational_GetSupport(*args)
    def SetCentroid(*args): return _libgambit.MixedStrategyRational_SetCentroid(*args)
    def MixedProfileLength(*args): return _libgambit.MixedStrategyRational_MixedProfileLength(*args)
    def ToFullSupport(*args): return _libgambit.MixedStrategyRational_ToFullSupport(*args)
    def GetPayoff(*args): return _libgambit.MixedStrategyRational_GetPayoff(*args)
    def GetPayoffDeriv(*args): return _libgambit.MixedStrategyRational_GetPayoffDeriv(*args)
    def GetStrategyValue(*args): return _libgambit.MixedStrategyRational_GetStrategyValue(*args)
    def GetLiapValue(*args): return _libgambit.MixedStrategyRational_GetLiapValue(*args)
    def behavior(*args): return _libgambit.MixedStrategyRational_behavior(*args)
    def __len__(*args): return _libgambit.MixedStrategyRational___len__(*args)
    def __getitem__(*args): return _libgambit.MixedStrategyRational___getitem__(*args)
    def __setitem__(*args): return _libgambit.MixedStrategyRational___setitem__(*args)
    def __repr__(self):
      return "Mixed strategy profile on '%s': [%s]" % \
             (self.GetGame().GetTitle(),
       ", ".join([ str(self[i]) for i in xrange(len(self)) ]))	

    def __str__(self):   return repr(self)

    __swig_destroy__ = _libgambit.delete_MixedStrategyRational
    __del__ = lambda self : None;
MixedStrategyRational_swigregister = _libgambit.MixedStrategyRational_swigregister
MixedStrategyRational_swigregister(MixedStrategyRational)

class SupportStrategyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SupportStrategyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SupportStrategyIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_SupportStrategyIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def plusplus(*args): return _libgambit.SupportStrategyIterator_plusplus(*args)
    def AtEnd(*args): return _libgambit.SupportStrategyIterator_AtEnd(*args)
    def GetIndex(*args): return _libgambit.SupportStrategyIterator_GetIndex(*args)
    def __ref__(*args): return _libgambit.SupportStrategyIterator___ref__(*args)
    def __deref__(*args): return _libgambit.SupportStrategyIterator___deref__(*args)
    def __iter__(self): return self
    def next(self):
      if self.AtEnd(): raise StopIteration
      value = self.__deref__()
      self.plusplus()       
      return value

    __swig_destroy__ = _libgambit.delete_SupportStrategyIterator
    __del__ = lambda self : None;
    def GetLabel(*args): return _libgambit.SupportStrategyIterator_GetLabel(*args)
    def SetLabel(*args): return _libgambit.SupportStrategyIterator_SetLabel(*args)
    def GetPlayer(*args): return _libgambit.SupportStrategyIterator_GetPlayer(*args)
    def GetNumber(*args): return _libgambit.SupportStrategyIterator_GetNumber(*args)
    def GetId(*args): return _libgambit.SupportStrategyIterator_GetId(*args)
    def DeleteStrategy(*args): return _libgambit.SupportStrategyIterator_DeleteStrategy(*args)
    def IsValid(*args): return _libgambit.SupportStrategyIterator_IsValid(*args)
    def Invalidate(*args): return _libgambit.SupportStrategyIterator_Invalidate(*args)
    def IncRef(*args): return _libgambit.SupportStrategyIterator_IncRef(*args)
    def DecRef(*args): return _libgambit.SupportStrategyIterator_DecRef(*args)
    def RefCount(*args): return _libgambit.SupportStrategyIterator_RefCount(*args)
SupportStrategyIterator_swigregister = _libgambit.SupportStrategyIterator_swigregister
SupportStrategyIterator_swigregister(SupportStrategyIterator)

class StrategySupport(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrategySupport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrategySupport, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_StrategySupport(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args): return _libgambit.StrategySupport___eq__(*args)
    def __ne__(*args): return _libgambit.StrategySupport___ne__(*args)
    def GetGame(*args): return _libgambit.StrategySupport_GetGame(*args)
    def NumStrategies(*args): return _libgambit.StrategySupport_NumStrategies(*args)
    def MixedProfileLength(*args): return _libgambit.StrategySupport_MixedProfileLength(*args)
    def GetStrategy(*args): return _libgambit.StrategySupport_GetStrategy(*args)
    def Players(*args): return _libgambit.StrategySupport_Players(*args)
    def Strategies(*args): return _libgambit.StrategySupport_Strategies(*args)
    def GetIndex(*args): return _libgambit.StrategySupport_GetIndex(*args)
    def Contains(*args): return _libgambit.StrategySupport_Contains(*args)
    def IsSubsetOf(*args): return _libgambit.StrategySupport_IsSubsetOf(*args)
    def AddStrategy(*args): return _libgambit.StrategySupport_AddStrategy(*args)
    def RemoveStrategy(*args): return _libgambit.StrategySupport_RemoveStrategy(*args)
    def Dominates(*args): return _libgambit.StrategySupport_Dominates(*args)
    def IsDominated(*args): return _libgambit.StrategySupport_IsDominated(*args)
    def Undominated(*args): return _libgambit.StrategySupport_Undominated(*args)
    def Overwhelms(*args): return _libgambit.StrategySupport_Overwhelms(*args)
    def NewMixedStrategyDouble(*args): return _libgambit.StrategySupport_NewMixedStrategyDouble(*args)
    __swig_destroy__ = _libgambit.delete_StrategySupport
    __del__ = lambda self : None;
StrategySupport_swigregister = _libgambit.StrategySupport_swigregister
StrategySupport_swigregister(StrategySupport)

class MixedBehavDouble(DVectorDouble):
    __swig_setmethods__ = {}
    for _s in [DVectorDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedBehavDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [DVectorDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedBehavDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_MixedBehavDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_MixedBehavDouble
    __del__ = lambda self : None;
    def __eq__(*args): return _libgambit.MixedBehavDouble___eq__(*args)
    def __ne__(*args): return _libgambit.MixedBehavDouble___ne__(*args)
    def __call__(*args): return _libgambit.MixedBehavDouble___call__(*args)
    def __iadd__(*args): return _libgambit.MixedBehavDouble___iadd__(*args)
    def __isub__(*args): return _libgambit.MixedBehavDouble___isub__(*args)
    def __imul__(*args): return _libgambit.MixedBehavDouble___imul__(*args)
    def Invalidate(*args): return _libgambit.MixedBehavDouble_Invalidate(*args)
    def Centroid(*args): return _libgambit.MixedBehavDouble_Centroid(*args)
    def Length(*args): return _libgambit.MixedBehavDouble_Length(*args)
    def GetGame(*args): return _libgambit.MixedBehavDouble_GetGame(*args)
    def GetSupport(*args): return _libgambit.MixedBehavDouble_GetSupport(*args)
    def IsDefinedAt(*args): return _libgambit.MixedBehavDouble_IsDefinedAt(*args)
    def GetPayoff(*args): return _libgambit.MixedBehavDouble_GetPayoff(*args)
    def GetLiapValue(*args): return _libgambit.MixedBehavDouble_GetLiapValue(*args)
    def GetRealizProb(*args): return _libgambit.MixedBehavDouble_GetRealizProb(*args)
    def GetBeliefProb(*args): return _libgambit.MixedBehavDouble_GetBeliefProb(*args)
    def GetNodeValue(*args): return _libgambit.MixedBehavDouble_GetNodeValue(*args)
    def GetInfosetProb(*args): return _libgambit.MixedBehavDouble_GetInfosetProb(*args)
    def GetInfosetValue(*args): return _libgambit.MixedBehavDouble_GetInfosetValue(*args)
    def GetActionProb(*args): return _libgambit.MixedBehavDouble_GetActionProb(*args)
    def GetActionValue(*args): return _libgambit.MixedBehavDouble_GetActionValue(*args)
    def GetRegret(*args): return _libgambit.MixedBehavDouble_GetRegret(*args)
    def DiffActionValue(*args): return _libgambit.MixedBehavDouble_DiffActionValue(*args)
    def DiffRealizProb(*args): return _libgambit.MixedBehavDouble_DiffRealizProb(*args)
    def DiffNodeValue(*args): return _libgambit.MixedBehavDouble_DiffNodeValue(*args)
    def __len__(*args): return _libgambit.MixedBehavDouble___len__(*args)
    def __getitem__(*args): return _libgambit.MixedBehavDouble___getitem__(*args)
    def __setitem__(*args): return _libgambit.MixedBehavDouble___setitem__(*args)
    def __repr__(self):
      return "Behavior strategy profile on '%s': [%s]" % \
             (self.GetGame().GetTitle(),
       ", ".join([ str(self[i]) for i in xrange(len(self)) ]))	

    def __str__(self):   return repr(self)

MixedBehavDouble_swigregister = _libgambit.MixedBehavDouble_swigregister
MixedBehavDouble_swigregister(MixedBehavDouble)

class MixedBehavRational(DVectorRational):
    __swig_setmethods__ = {}
    for _s in [DVectorRational]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedBehavRational, name, value)
    __swig_getmethods__ = {}
    for _s in [DVectorRational]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedBehavRational, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_MixedBehavRational(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_MixedBehavRational
    __del__ = lambda self : None;
    def __eq__(*args): return _libgambit.MixedBehavRational___eq__(*args)
    def __ne__(*args): return _libgambit.MixedBehavRational___ne__(*args)
    def __call__(*args): return _libgambit.MixedBehavRational___call__(*args)
    def __iadd__(*args): return _libgambit.MixedBehavRational___iadd__(*args)
    def __isub__(*args): return _libgambit.MixedBehavRational___isub__(*args)
    def __imul__(*args): return _libgambit.MixedBehavRational___imul__(*args)
    def Invalidate(*args): return _libgambit.MixedBehavRational_Invalidate(*args)
    def Centroid(*args): return _libgambit.MixedBehavRational_Centroid(*args)
    def Length(*args): return _libgambit.MixedBehavRational_Length(*args)
    def GetGame(*args): return _libgambit.MixedBehavRational_GetGame(*args)
    def GetSupport(*args): return _libgambit.MixedBehavRational_GetSupport(*args)
    def IsDefinedAt(*args): return _libgambit.MixedBehavRational_IsDefinedAt(*args)
    def GetPayoff(*args): return _libgambit.MixedBehavRational_GetPayoff(*args)
    def GetLiapValue(*args): return _libgambit.MixedBehavRational_GetLiapValue(*args)
    def GetRealizProb(*args): return _libgambit.MixedBehavRational_GetRealizProb(*args)
    def GetBeliefProb(*args): return _libgambit.MixedBehavRational_GetBeliefProb(*args)
    def GetNodeValue(*args): return _libgambit.MixedBehavRational_GetNodeValue(*args)
    def GetInfosetProb(*args): return _libgambit.MixedBehavRational_GetInfosetProb(*args)
    def GetInfosetValue(*args): return _libgambit.MixedBehavRational_GetInfosetValue(*args)
    def GetActionProb(*args): return _libgambit.MixedBehavRational_GetActionProb(*args)
    def GetActionValue(*args): return _libgambit.MixedBehavRational_GetActionValue(*args)
    def GetRegret(*args): return _libgambit.MixedBehavRational_GetRegret(*args)
    def DiffActionValue(*args): return _libgambit.MixedBehavRational_DiffActionValue(*args)
    def DiffRealizProb(*args): return _libgambit.MixedBehavRational_DiffRealizProb(*args)
    def DiffNodeValue(*args): return _libgambit.MixedBehavRational_DiffNodeValue(*args)
    def __len__(*args): return _libgambit.MixedBehavRational___len__(*args)
    def __getitem__(*args): return _libgambit.MixedBehavRational___getitem__(*args)
    def __setitem__(*args): return _libgambit.MixedBehavRational___setitem__(*args)
    def __repr__(self):
      return "Behavior strategy profile on '%s': [%s]" % \
             (self.GetGame().GetTitle(),
       ", ".join([ str(self[i]) for i in xrange(len(self)) ]))	

    def __str__(self):   return repr(self)

MixedBehavRational_swigregister = _libgambit.MixedBehavRational_swigregister
MixedBehavRational_swigregister(MixedBehavRational)

class BehavSupport(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BehavSupport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BehavSupport, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_BehavSupport(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_BehavSupport
    __del__ = lambda self : None;
    def __eq__(*args): return _libgambit.BehavSupport___eq__(*args)
    def __ne__(*args): return _libgambit.BehavSupport___ne__(*args)
    def GetGame(*args): return _libgambit.BehavSupport_GetGame(*args)
    def NumActions(*args): return _libgambit.BehavSupport_NumActions(*args)
    def GetAction(*args): return _libgambit.BehavSupport_GetAction(*args)
    def GetIndex(*args): return _libgambit.BehavSupport_GetIndex(*args)
    def Contains(*args): return _libgambit.BehavSupport_Contains(*args)
    def NumDegreesOfFreedom(*args): return _libgambit.BehavSupport_NumDegreesOfFreedom(*args)
    def HasActiveActionAt(*args): return _libgambit.BehavSupport_HasActiveActionAt(*args)
    def HasActiveActionsAtAllInfosets(*args): return _libgambit.BehavSupport_HasActiveActionsAtAllInfosets(*args)
    def NumSequences(*args): return _libgambit.BehavSupport_NumSequences(*args)
    def NumActiveMembers(*args): return _libgambit.BehavSupport_NumActiveMembers(*args)
    def IsActive(*args): return _libgambit.BehavSupport_IsActive(*args)
    def HasActiveActionsAtActiveInfosets(*args): return _libgambit.BehavSupport_HasActiveActionsAtActiveInfosets(*args)
    def HasActiveActionsAtActiveInfosetsAndNoOthers(*args): return _libgambit.BehavSupport_HasActiveActionsAtActiveInfosetsAndNoOthers(*args)
    def AddAction(*args): return _libgambit.BehavSupport_AddAction(*args)
    def RemoveAction(*args): return _libgambit.BehavSupport_RemoveAction(*args)
    def ReachableNonterminalNodes(*args): return _libgambit.BehavSupport_ReachableNonterminalNodes(*args)
    def ReachableInfosets(*args): return _libgambit.BehavSupport_ReachableInfosets(*args)
    def MayReach(*args): return _libgambit.BehavSupport_MayReach(*args)
    def ReachableMembers(*args): return _libgambit.BehavSupport_ReachableMembers(*args)
    def Dominates(*args): return _libgambit.BehavSupport_Dominates(*args)
    def IsDominated(*args): return _libgambit.BehavSupport_IsDominated(*args)
    def Undominated(*args): return _libgambit.BehavSupport_Undominated(*args)
BehavSupport_swigregister = _libgambit.BehavSupport_swigregister
BehavSupport_swigregister(BehavSupport)

class BehavIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BehavIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BehavIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_BehavIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def plusplus(*args): return _libgambit.BehavIterator_plusplus(*args)
    def AtEnd(*args): return _libgambit.BehavIterator_AtEnd(*args)
    def __ref__(*args): return _libgambit.BehavIterator___ref__(*args)
    def __iter__(self): return self
    def next(self):
      if self.AtEnd(): raise StopIteration
      value = self.__ref__()
      self.plusplus()       
      return value

    __swig_destroy__ = _libgambit.delete_BehavIterator
    __del__ = lambda self : None;
BehavIterator_swigregister = _libgambit.BehavIterator_swigregister
BehavIterator_swigregister(BehavIterator)

class StrategyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrategyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrategyIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libgambit.new_StrategyIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def plusplus(*args): return _libgambit.StrategyIterator_plusplus(*args)
    def AtEnd(*args): return _libgambit.StrategyIterator_AtEnd(*args)
    def __ref__(*args): return _libgambit.StrategyIterator___ref__(*args)
    def __iter__(self): return self
    def next(self):
      if self.AtEnd(): raise StopIteration
      value = self.__ref__()
      self.plusplus()       
      return value

    __swig_destroy__ = _libgambit.delete_StrategyIterator
    __del__ = lambda self : None;
StrategyIterator_swigregister = _libgambit.StrategyIterator_swigregister
StrategyIterator_swigregister(StrategyIterator)



