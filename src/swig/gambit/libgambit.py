# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _libgambit
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class ios_base(_object):
    """Proxy of C++ ios_base class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    erase_event = _libgambit.ios_base_erase_event
    imbue_event = _libgambit.ios_base_imbue_event
    copyfmt_event = _libgambit.ios_base_copyfmt_event
    def register_callback(*args):
        """register_callback(self, event_callback __fn, int __index)"""
        return _libgambit.ios_base_register_callback(*args)

    def flags(*args):
        """
        flags(self) -> fmtflags
        flags(self, fmtflags __fmtfl) -> fmtflags
        """
        return _libgambit.ios_base_flags(*args)

    def setf(*args):
        """
        setf(self, fmtflags __fmtfl) -> fmtflags
        setf(self, fmtflags __fmtfl, fmtflags __mask) -> fmtflags
        """
        return _libgambit.ios_base_setf(*args)

    def unsetf(*args):
        """unsetf(self, fmtflags __mask)"""
        return _libgambit.ios_base_unsetf(*args)

    def precision(*args):
        """
        precision(self) -> streamsize
        precision(self, streamsize __prec) -> streamsize
        """
        return _libgambit.ios_base_precision(*args)

    def width(*args):
        """
        width(self) -> streamsize
        width(self, streamsize __wide) -> streamsize
        """
        return _libgambit.ios_base_width(*args)

    def sync_with_stdio(*args):
        """
        sync_with_stdio(bool __sync=True) -> bool
        sync_with_stdio() -> bool
        """
        return _libgambit.ios_base_sync_with_stdio(*args)

    if _newclass:sync_with_stdio = staticmethod(sync_with_stdio)
    __swig_getmethods__["sync_with_stdio"] = lambda x: sync_with_stdio
    def imbue(*args):
        """imbue(self, locale __loc) -> locale"""
        return _libgambit.ios_base_imbue(*args)

    def getloc(*args):
        """getloc(self) -> locale"""
        return _libgambit.ios_base_getloc(*args)

    def xalloc(*args):
        """xalloc() -> int"""
        return _libgambit.ios_base_xalloc(*args)

    if _newclass:xalloc = staticmethod(xalloc)
    __swig_getmethods__["xalloc"] = lambda x: xalloc
    def iword(*args):
        """iword(self, int __ix) -> long"""
        return _libgambit.ios_base_iword(*args)

    def pword(*args):
        """pword(self, int __ix) -> void"""
        return _libgambit.ios_base_pword(*args)

    __swig_destroy__ = _libgambit.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _libgambit.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _libgambit.cvar
ios_base.boolalpha = _libgambit.cvar.ios_base_boolalpha
ios_base.dec = _libgambit.cvar.ios_base_dec
ios_base.fixed = _libgambit.cvar.ios_base_fixed
ios_base.hex = _libgambit.cvar.ios_base_hex
ios_base.internal = _libgambit.cvar.ios_base_internal
ios_base.left = _libgambit.cvar.ios_base_left
ios_base.oct = _libgambit.cvar.ios_base_oct
ios_base.right = _libgambit.cvar.ios_base_right
ios_base.scientific = _libgambit.cvar.ios_base_scientific
ios_base.showbase = _libgambit.cvar.ios_base_showbase
ios_base.showpoint = _libgambit.cvar.ios_base_showpoint
ios_base.showpos = _libgambit.cvar.ios_base_showpos
ios_base.skipws = _libgambit.cvar.ios_base_skipws
ios_base.unitbuf = _libgambit.cvar.ios_base_unitbuf
ios_base.uppercase = _libgambit.cvar.ios_base_uppercase
ios_base.adjustfield = _libgambit.cvar.ios_base_adjustfield
ios_base.basefield = _libgambit.cvar.ios_base_basefield
ios_base.floatfield = _libgambit.cvar.ios_base_floatfield
ios_base.badbit = _libgambit.cvar.ios_base_badbit
ios_base.eofbit = _libgambit.cvar.ios_base_eofbit
ios_base.failbit = _libgambit.cvar.ios_base_failbit
ios_base.goodbit = _libgambit.cvar.ios_base_goodbit
ios_base.app = _libgambit.cvar.ios_base_app
ios_base.ate = _libgambit.cvar.ios_base_ate
ios_base.binary = _libgambit.cvar.ios_base_binary
ios_base.ios_base_in = _libgambit.cvar.ios_base_ios_base_in
ios_base.out = _libgambit.cvar.ios_base_out
ios_base.trunc = _libgambit.cvar.ios_base_trunc
ios_base.beg = _libgambit.cvar.ios_base_beg
ios_base.cur = _libgambit.cvar.ios_base_cur
ios_base.end = _libgambit.cvar.ios_base_end

def ios_base_sync_with_stdio(*args):
  """
    sync_with_stdio(bool __sync=True) -> bool
    ios_base_sync_with_stdio() -> bool
    """
  return _libgambit.ios_base_sync_with_stdio(*args)

def ios_base_xalloc(*args):
  """ios_base_xalloc() -> int"""
  return _libgambit.ios_base_xalloc(*args)

class ios(ios_base):
    """Proxy of C++ ios class"""
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(*args):
        """rdstate(self) -> iostate"""
        return _libgambit.ios_rdstate(*args)

    def clear(*args):
        """
        clear(self, iostate __state=goodbit)
        clear(self)
        """
        return _libgambit.ios_clear(*args)

    def setstate(*args):
        """setstate(self, iostate __state)"""
        return _libgambit.ios_setstate(*args)

    def good(*args):
        """good(self) -> bool"""
        return _libgambit.ios_good(*args)

    def eof(*args):
        """eof(self) -> bool"""
        return _libgambit.ios_eof(*args)

    def fail(*args):
        """fail(self) -> bool"""
        return _libgambit.ios_fail(*args)

    def bad(*args):
        """bad(self) -> bool"""
        return _libgambit.ios_bad(*args)

    def exceptions(*args):
        """
        exceptions(self) -> iostate
        exceptions(self, iostate __except)
        """
        return _libgambit.ios_exceptions(*args)

    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ios"""
        this = _libgambit.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_ios
    __del__ = lambda self : None;
    def tie(*args):
        """
        tie(self) -> ostream
        tie(self, ostream __tiestr) -> ostream
        """
        return _libgambit.ios_tie(*args)

    def rdbuf(*args):
        """
        rdbuf(self) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        rdbuf(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        """
        return _libgambit.ios_rdbuf(*args)

    def copyfmt(*args):
        """copyfmt(self, ios __rhs) -> ios"""
        return _libgambit.ios_copyfmt(*args)

    def fill(*args):
        """
        fill(self) -> char_type
        fill(self, char_type __ch) -> char_type
        """
        return _libgambit.ios_fill(*args)

    def imbue(*args):
        """imbue(self, locale __loc) -> locale"""
        return _libgambit.ios_imbue(*args)

    def narrow(*args):
        """narrow(self, char_type __c, char __dfault) -> char"""
        return _libgambit.ios_narrow(*args)

    def widen(*args):
        """widen(self, char __c) -> char_type"""
        return _libgambit.ios_widen(*args)

ios_swigregister = _libgambit.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    """Proxy of C++ ostream class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream"""
        this = _libgambit.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(*args):
        """
        __lshift__(self, ostream __pf) -> ostream
        __lshift__(self, ios __pf) -> ostream
        __lshift__(self, ios_base __pf) -> ostream
        __lshift__(self, long __n) -> ostream
        __lshift__(self, unsigned long __n) -> ostream
        __lshift__(self, bool __n) -> ostream
        __lshift__(self, short __n) -> ostream
        __lshift__(self, unsigned short __n) -> ostream
        __lshift__(self, int __n) -> ostream
        __lshift__(self, unsigned int __n) -> ostream
        __lshift__(self, long long __n) -> ostream
        __lshift__(self, unsigned long long __n) -> ostream
        __lshift__(self, double __f) -> ostream
        __lshift__(self, float __f) -> ostream
        __lshift__(self, long double __f) -> ostream
        __lshift__(self, void __p) -> ostream
        __lshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream
        __lshift__(self, std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)> s) -> ostream
        """
        return _libgambit.ostream___lshift__(*args)

    def put(*args):
        """put(self, char_type __c) -> ostream"""
        return _libgambit.ostream_put(*args)

    def write(*args):
        """write(self, char_type __s, streamsize __n) -> ostream"""
        return _libgambit.ostream_write(*args)

    def flush(*args):
        """flush(self) -> ostream"""
        return _libgambit.ostream_flush(*args)

    def tellp(*args):
        """tellp(self) -> pos_type"""
        return _libgambit.ostream_tellp(*args)

    def seekp(*args):
        """
        seekp(self, pos_type ?) -> ostream
        seekp(self, off_type ?, seekdir ?) -> ostream
        """
        return _libgambit.ostream_seekp(*args)

ostream_swigregister = _libgambit.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    """Proxy of C++ istream class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream"""
        this = _libgambit.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_istream
    __del__ = lambda self : None;
    def __rshift__(*args):
        """
        __rshift__(self, istream __pf) -> istream
        __rshift__(self, ios __pf) -> istream
        __rshift__(self, ios_base __pf) -> istream
        __rshift__(self, bool __n) -> istream
        __rshift__(self, short __n) -> istream
        __rshift__(self, unsigned short __n) -> istream
        __rshift__(self, int __n) -> istream
        __rshift__(self, unsigned int __n) -> istream
        __rshift__(self, long __n) -> istream
        __rshift__(self, unsigned long __n) -> istream
        __rshift__(self, long long __n) -> istream
        __rshift__(self, unsigned long long __n) -> istream
        __rshift__(self, float __f) -> istream
        __rshift__(self, double __f) -> istream
        __rshift__(self, long double __f) -> istream
        __rshift__(self, void __p) -> istream
        __rshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _libgambit.istream___rshift__(*args)

    def gcount(*args):
        """gcount(self) -> streamsize"""
        return _libgambit.istream_gcount(*args)

    def get(*args):
        """
        get(self) -> int_type
        get(self, char_type __c) -> istream
        get(self, char_type __s, streamsize __n, char_type __delim) -> istream
        get(self, char_type __s, streamsize __n) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb, 
            char_type __delim) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _libgambit.istream_get(*args)

    def getline(*args):
        """
        getline(self, char_type __s, streamsize __n, char_type __delim) -> istream
        getline(self, char_type __s, streamsize __n) -> istream
        """
        return _libgambit.istream_getline(*args)

    def ignore(*args):
        """
        ignore(self, streamsize __n=1, int_type __delim=std::char_traits<char >::eof()) -> istream
        ignore(self, streamsize __n=1) -> istream
        ignore(self) -> istream
        """
        return _libgambit.istream_ignore(*args)

    def peek(*args):
        """peek(self) -> int_type"""
        return _libgambit.istream_peek(*args)

    def read(*args):
        """read(self, char_type __s, streamsize __n) -> istream"""
        return _libgambit.istream_read(*args)

    def readsome(*args):
        """readsome(self, char_type __s, streamsize __n) -> streamsize"""
        return _libgambit.istream_readsome(*args)

    def putback(*args):
        """putback(self, char_type __c) -> istream"""
        return _libgambit.istream_putback(*args)

    def unget(*args):
        """unget(self) -> istream"""
        return _libgambit.istream_unget(*args)

    def sync(*args):
        """sync(self) -> int"""
        return _libgambit.istream_sync(*args)

    def tellg(*args):
        """tellg(self) -> pos_type"""
        return _libgambit.istream_tellg(*args)

    def seekg(*args):
        """
        seekg(self, pos_type ?) -> istream
        seekg(self, off_type ?, seekdir ?) -> istream
        """
        return _libgambit.istream_seekg(*args)

istream_swigregister = _libgambit.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    """Proxy of C++ iostream class"""
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> iostream"""
        this = _libgambit.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _libgambit.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _libgambit.endl_cb_ptr
endl = _libgambit.endl
ends_cb_ptr = _libgambit.ends_cb_ptr
ends = _libgambit.ends
flush_cb_ptr = _libgambit.flush_cb_ptr
flush = _libgambit.flush
class IndexException(_object):
    """Proxy of C++ IndexException class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_IndexException
    __del__ = lambda self : None;
    def GetDescription(*args):
        """GetDescription(self) -> string"""
        return _libgambit.IndexException_GetDescription(*args)

    def __init__(self, *args): 
        """__init__(self) -> IndexException"""
        this = _libgambit.new_IndexException(*args)
        try: self.this.append(this)
        except: self.this = this
IndexException_swigregister = _libgambit.IndexException_swigregister
IndexException_swigregister(IndexException)

class RangeException(_object):
    """Proxy of C++ RangeException class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RangeException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RangeException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_RangeException
    __del__ = lambda self : None;
    def GetDescription(*args):
        """GetDescription(self) -> string"""
        return _libgambit.RangeException_GetDescription(*args)

    def __init__(self, *args): 
        """__init__(self) -> RangeException"""
        this = _libgambit.new_RangeException(*args)
        try: self.this.append(this)
        except: self.this = this
RangeException_swigregister = _libgambit.RangeException_swigregister
RangeException_swigregister(RangeException)

class DimensionException(_object):
    """Proxy of C++ DimensionException class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DimensionException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DimensionException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_DimensionException
    __del__ = lambda self : None;
    def GetDescription(*args):
        """GetDescription(self) -> string"""
        return _libgambit.DimensionException_GetDescription(*args)

    def __init__(self, *args): 
        """__init__(self) -> DimensionException"""
        this = _libgambit.new_DimensionException(*args)
        try: self.this.append(this)
        except: self.this = this
DimensionException_swigregister = _libgambit.DimensionException_swigregister
DimensionException_swigregister(DimensionException)

class ValueException(_object):
    """Proxy of C++ ValueException class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValueException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ValueException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_ValueException
    __del__ = lambda self : None;
    def GetDescription(*args):
        """GetDescription(self) -> string"""
        return _libgambit.ValueException_GetDescription(*args)

    def __init__(self, *args): 
        """__init__(self) -> ValueException"""
        this = _libgambit.new_ValueException(*args)
        try: self.this.append(this)
        except: self.this = this
ValueException_swigregister = _libgambit.ValueException_swigregister
ValueException_swigregister(ValueException)

class ZeroDivideException(_object):
    """Proxy of C++ ZeroDivideException class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroDivideException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroDivideException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_ZeroDivideException
    __del__ = lambda self : None;
    def GetDescription(*args):
        """GetDescription(self) -> string"""
        return _libgambit.ZeroDivideException_GetDescription(*args)

    def __init__(self, *args): 
        """__init__(self) -> ZeroDivideException"""
        this = _libgambit.new_ZeroDivideException(*args)
        try: self.this.append(this)
        except: self.this = this
ZeroDivideException_swigregister = _libgambit.ZeroDivideException_swigregister
ZeroDivideException_swigregister(ZeroDivideException)

class ArrayDouble(_object):
    """Proxy of C++ ArrayDouble class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int len=0) -> ArrayDouble
        __init__(self) -> ArrayDouble
        __init__(self, int lo, int hi) -> ArrayDouble
        __init__(self, ArrayDouble a) -> ArrayDouble
        """
        this = _libgambit.new_ArrayDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_ArrayDouble
    __del__ = lambda self : None;
    def __eq__(*args):
        """__eq__(self, ArrayDouble a) -> bool"""
        return _libgambit.ArrayDouble___eq__(*args)

    def __ne__(*args):
        """__ne__(self, ArrayDouble a) -> bool"""
        return _libgambit.ArrayDouble___ne__(*args)

    def Length(*args):
        """Length(self) -> int"""
        return _libgambit.ArrayDouble_Length(*args)

    def First(*args):
        """First(self) -> int"""
        return _libgambit.ArrayDouble_First(*args)

    def Last(*args):
        """Last(self) -> int"""
        return _libgambit.ArrayDouble_Last(*args)

    def Find(*args):
        """Find(self, double t) -> int"""
        return _libgambit.ArrayDouble_Find(*args)

    def Contains(*args):
        """Contains(self, double t) -> bool"""
        return _libgambit.ArrayDouble_Contains(*args)

    def Append(*args):
        """Append(self, double t) -> int"""
        return _libgambit.ArrayDouble_Append(*args)

    def Insert(*args):
        """Insert(self, double t, int n) -> int"""
        return _libgambit.ArrayDouble_Insert(*args)

    def Remove(*args):
        """Remove(self, int n) -> double"""
        return _libgambit.ArrayDouble_Remove(*args)

ArrayDouble_swigregister = _libgambit.ArrayDouble_swigregister
ArrayDouble_swigregister(ArrayDouble)

class ArrayRational(_object):
    """Proxy of C++ ArrayRational class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayRational, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayRational, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int len=0) -> ArrayRational
        __init__(self) -> ArrayRational
        __init__(self, int lo, int hi) -> ArrayRational
        __init__(self, ArrayRational a) -> ArrayRational
        """
        this = _libgambit.new_ArrayRational(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_ArrayRational
    __del__ = lambda self : None;
    def __eq__(*args):
        """__eq__(self, ArrayRational a) -> bool"""
        return _libgambit.ArrayRational___eq__(*args)

    def __ne__(*args):
        """__ne__(self, ArrayRational a) -> bool"""
        return _libgambit.ArrayRational___ne__(*args)

    def Length(*args):
        """Length(self) -> int"""
        return _libgambit.ArrayRational_Length(*args)

    def First(*args):
        """First(self) -> int"""
        return _libgambit.ArrayRational_First(*args)

    def Last(*args):
        """Last(self) -> int"""
        return _libgambit.ArrayRational_Last(*args)

    def Find(*args):
        """Find(self, Rational t) -> int"""
        return _libgambit.ArrayRational_Find(*args)

    def Contains(*args):
        """Contains(self, Rational t) -> bool"""
        return _libgambit.ArrayRational_Contains(*args)

    def Append(*args):
        """Append(self, Rational t) -> int"""
        return _libgambit.ArrayRational_Append(*args)

    def Insert(*args):
        """Insert(self, Rational t, int n) -> int"""
        return _libgambit.ArrayRational_Insert(*args)

    def Remove(*args):
        """Remove(self, int n) -> Rational"""
        return _libgambit.ArrayRational_Remove(*args)

ArrayRational_swigregister = _libgambit.ArrayRational_swigregister
ArrayRational_swigregister(ArrayRational)

class VectorDouble(ArrayDouble):
    """Proxy of C++ VectorDouble class"""
    __swig_setmethods__ = {}
    for _s in [ArrayDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [ArrayDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int len=0) -> VectorDouble
        __init__(self) -> VectorDouble
        __init__(self, int low, int high) -> VectorDouble
        __init__(self, VectorDouble V) -> VectorDouble
        """
        this = _libgambit.new_VectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_VectorDouble
    __del__ = lambda self : None;
    def __add__(*args):
        """__add__(self, VectorDouble V) -> VectorDouble"""
        return _libgambit.VectorDouble___add__(*args)

    def __iadd__(*args):
        """__iadd__(self, VectorDouble V) -> VectorDouble"""
        return _libgambit.VectorDouble___iadd__(*args)

    def __neg__(*args):
        """__neg__(self) -> VectorDouble"""
        return _libgambit.VectorDouble___neg__(*args)

    def __sub__(*args):
        """__sub__(self, VectorDouble V) -> VectorDouble"""
        return _libgambit.VectorDouble___sub__(*args)

    def __isub__(*args):
        """__isub__(self, VectorDouble V) -> VectorDouble"""
        return _libgambit.VectorDouble___isub__(*args)

    def __imul__(*args):
        """__imul__(self, double c) -> VectorDouble"""
        return _libgambit.VectorDouble___imul__(*args)

    def __mul__(*args):
        """
        __mul__(self, double c) -> VectorDouble
        __mul__(self, VectorDouble V) -> double
        """
        return _libgambit.VectorDouble___mul__(*args)

    def __div__(*args):
        """__div__(self, double c) -> VectorDouble"""
        return _libgambit.VectorDouble___div__(*args)

    def __eq__(*args):
        """
        __eq__(self, VectorDouble V) -> bool
        __eq__(self, double c) -> bool
        """
        return _libgambit.VectorDouble___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, VectorDouble V) -> bool
        __ne__(self, double c) -> bool
        """
        return _libgambit.VectorDouble___ne__(*args)

    def NormSquared(*args):
        """NormSquared(self) -> double"""
        return _libgambit.VectorDouble_NormSquared(*args)

    def Check(*args):
        """Check(self, VectorDouble v) -> bool"""
        return _libgambit.VectorDouble_Check(*args)

VectorDouble_swigregister = _libgambit.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorRational(ArrayRational):
    """Proxy of C++ VectorRational class"""
    __swig_setmethods__ = {}
    for _s in [ArrayRational]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorRational, name, value)
    __swig_getmethods__ = {}
    for _s in [ArrayRational]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorRational, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int len=0) -> VectorRational
        __init__(self) -> VectorRational
        __init__(self, int low, int high) -> VectorRational
        __init__(self, VectorRational V) -> VectorRational
        """
        this = _libgambit.new_VectorRational(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_VectorRational
    __del__ = lambda self : None;
    def __add__(*args):
        """__add__(self, VectorRational V) -> VectorRational"""
        return _libgambit.VectorRational___add__(*args)

    def __iadd__(*args):
        """__iadd__(self, VectorRational V) -> VectorRational"""
        return _libgambit.VectorRational___iadd__(*args)

    def __neg__(*args):
        """__neg__(self) -> VectorRational"""
        return _libgambit.VectorRational___neg__(*args)

    def __sub__(*args):
        """__sub__(self, VectorRational V) -> VectorRational"""
        return _libgambit.VectorRational___sub__(*args)

    def __isub__(*args):
        """__isub__(self, VectorRational V) -> VectorRational"""
        return _libgambit.VectorRational___isub__(*args)

    def __imul__(*args):
        """__imul__(self, Rational c) -> VectorRational"""
        return _libgambit.VectorRational___imul__(*args)

    def __mul__(*args):
        """
        __mul__(self, Rational c) -> VectorRational
        __mul__(self, VectorRational V) -> Rational
        """
        return _libgambit.VectorRational___mul__(*args)

    def __div__(*args):
        """__div__(self, Rational c) -> VectorRational"""
        return _libgambit.VectorRational___div__(*args)

    def __eq__(*args):
        """
        __eq__(self, VectorRational V) -> bool
        __eq__(self, Rational c) -> bool
        """
        return _libgambit.VectorRational___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, VectorRational V) -> bool
        __ne__(self, Rational c) -> bool
        """
        return _libgambit.VectorRational___ne__(*args)

    def NormSquared(*args):
        """NormSquared(self) -> Rational"""
        return _libgambit.VectorRational_NormSquared(*args)

    def Check(*args):
        """Check(self, VectorRational v) -> bool"""
        return _libgambit.VectorRational_Check(*args)

VectorRational_swigregister = _libgambit.VectorRational_swigregister
VectorRational_swigregister(VectorRational)

class PVectorDouble(VectorDouble):
    """Proxy of C++ PVectorDouble class"""
    __swig_setmethods__ = {}
    for _s in [VectorDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVectorDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PVectorDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PVectorDouble
        __init__(self, Gambit::Array<(int)> sig) -> PVectorDouble
        __init__(self, VectorDouble val, Gambit::Array<(int)> sig) -> PVectorDouble
        __init__(self, PVectorDouble v) -> PVectorDouble
        """
        this = _libgambit.new_PVectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_PVectorDouble
    __del__ = lambda self : None;
    def __call__(*args):
        """
        __call__(self, int a, int b) -> double
        __call__(self, int a, int b) -> double
        """
        return _libgambit.PVectorDouble___call__(*args)

    def GetRow(*args):
        """
        GetRow(self, int row) -> VectorDouble
        GetRow(self, int row, VectorDouble v)
        """
        return _libgambit.PVectorDouble_GetRow(*args)

    def SetRow(*args):
        """SetRow(self, int row, VectorDouble v)"""
        return _libgambit.PVectorDouble_SetRow(*args)

    def CopyRow(*args):
        """CopyRow(self, int row, PVectorDouble v)"""
        return _libgambit.PVectorDouble_CopyRow(*args)

    def __add__(*args):
        """__add__(self, PVectorDouble v) -> PVectorDouble"""
        return _libgambit.PVectorDouble___add__(*args)

    def __iadd__(*args):
        """__iadd__(self, PVectorDouble v) -> PVectorDouble"""
        return _libgambit.PVectorDouble___iadd__(*args)

    def __neg__(*args):
        """__neg__(self) -> PVectorDouble"""
        return _libgambit.PVectorDouble___neg__(*args)

    def __sub__(*args):
        """__sub__(self, PVectorDouble v) -> PVectorDouble"""
        return _libgambit.PVectorDouble___sub__(*args)

    def __isub__(*args):
        """__isub__(self, PVectorDouble v) -> PVectorDouble"""
        return _libgambit.PVectorDouble___isub__(*args)

    def __mul__(*args):
        """
        __mul__(self, PVectorDouble v) -> double
        __mul__(self, double c) -> PVectorDouble
        """
        return _libgambit.PVectorDouble___mul__(*args)

    def __imul__(*args):
        """__imul__(self, double c) -> PVectorDouble"""
        return _libgambit.PVectorDouble___imul__(*args)

    def __div__(*args):
        """__div__(self, double c) -> PVectorDouble"""
        return _libgambit.PVectorDouble___div__(*args)

    def __eq__(*args):
        """__eq__(self, PVectorDouble v) -> bool"""
        return _libgambit.PVectorDouble___eq__(*args)

    def __ne__(*args):
        """__ne__(self, PVectorDouble v) -> bool"""
        return _libgambit.PVectorDouble___ne__(*args)

    def Lengths(*args):
        """Lengths(self) -> Gambit::Array<(int)>"""
        return _libgambit.PVectorDouble_Lengths(*args)

PVectorDouble_swigregister = _libgambit.PVectorDouble_swigregister
PVectorDouble_swigregister(PVectorDouble)

class PVectorRational(VectorRational):
    """Proxy of C++ PVectorRational class"""
    __swig_setmethods__ = {}
    for _s in [VectorRational]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PVectorRational, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorRational]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PVectorRational, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PVectorRational
        __init__(self, Gambit::Array<(int)> sig) -> PVectorRational
        __init__(self, VectorRational val, Gambit::Array<(int)> sig) -> PVectorRational
        __init__(self, PVectorRational v) -> PVectorRational
        """
        this = _libgambit.new_PVectorRational(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_PVectorRational
    __del__ = lambda self : None;
    def __call__(*args):
        """
        __call__(self, int a, int b) -> Rational
        __call__(self, int a, int b) -> Rational
        """
        return _libgambit.PVectorRational___call__(*args)

    def GetRow(*args):
        """
        GetRow(self, int row) -> VectorRational
        GetRow(self, int row, VectorRational v)
        """
        return _libgambit.PVectorRational_GetRow(*args)

    def SetRow(*args):
        """SetRow(self, int row, VectorRational v)"""
        return _libgambit.PVectorRational_SetRow(*args)

    def CopyRow(*args):
        """CopyRow(self, int row, PVectorRational v)"""
        return _libgambit.PVectorRational_CopyRow(*args)

    def __add__(*args):
        """__add__(self, PVectorRational v) -> PVectorRational"""
        return _libgambit.PVectorRational___add__(*args)

    def __iadd__(*args):
        """__iadd__(self, PVectorRational v) -> PVectorRational"""
        return _libgambit.PVectorRational___iadd__(*args)

    def __neg__(*args):
        """__neg__(self) -> PVectorRational"""
        return _libgambit.PVectorRational___neg__(*args)

    def __sub__(*args):
        """__sub__(self, PVectorRational v) -> PVectorRational"""
        return _libgambit.PVectorRational___sub__(*args)

    def __isub__(*args):
        """__isub__(self, PVectorRational v) -> PVectorRational"""
        return _libgambit.PVectorRational___isub__(*args)

    def __mul__(*args):
        """
        __mul__(self, PVectorRational v) -> Rational
        __mul__(self, Rational c) -> PVectorRational
        """
        return _libgambit.PVectorRational___mul__(*args)

    def __imul__(*args):
        """__imul__(self, Rational c) -> PVectorRational"""
        return _libgambit.PVectorRational___imul__(*args)

    def __div__(*args):
        """__div__(self, Rational c) -> PVectorRational"""
        return _libgambit.PVectorRational___div__(*args)

    def __eq__(*args):
        """__eq__(self, PVectorRational v) -> bool"""
        return _libgambit.PVectorRational___eq__(*args)

    def __ne__(*args):
        """__ne__(self, PVectorRational v) -> bool"""
        return _libgambit.PVectorRational___ne__(*args)

    def Lengths(*args):
        """Lengths(self) -> Gambit::Array<(int)>"""
        return _libgambit.PVectorRational_Lengths(*args)

PVectorRational_swigregister = _libgambit.PVectorRational_swigregister
PVectorRational_swigregister(PVectorRational)

class DVectorDouble(PVectorDouble):
    """Proxy of C++ DVectorDouble class"""
    __swig_setmethods__ = {}
    for _s in [PVectorDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVectorDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [PVectorDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DVectorDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DVectorDouble
        __init__(self, Gambit::PVector<(int)> sig) -> DVectorDouble
        __init__(self, VectorDouble val, Gambit::PVector<(int)> sig) -> DVectorDouble
        __init__(self, DVectorDouble v) -> DVectorDouble
        """
        this = _libgambit.new_DVectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_DVectorDouble
    __del__ = lambda self : None;
    def __call__(*args):
        """
        __call__(self, int a, int b, int c) -> double
        __call__(self, int a, int b, int c) -> double
        """
        return _libgambit.DVectorDouble___call__(*args)

    def CopySubRow(*args):
        """CopySubRow(self, int row, int col, DVectorDouble v)"""
        return _libgambit.DVectorDouble_CopySubRow(*args)

    def __add__(*args):
        """__add__(self, DVectorDouble v) -> DVectorDouble"""
        return _libgambit.DVectorDouble___add__(*args)

    def __iadd__(*args):
        """__iadd__(self, DVectorDouble v) -> DVectorDouble"""
        return _libgambit.DVectorDouble___iadd__(*args)

    def __neg__(*args):
        """__neg__(self) -> DVectorDouble"""
        return _libgambit.DVectorDouble___neg__(*args)

    def __sub__(*args):
        """__sub__(self, DVectorDouble v) -> DVectorDouble"""
        return _libgambit.DVectorDouble___sub__(*args)

    def __isub__(*args):
        """__isub__(self, DVectorDouble v) -> DVectorDouble"""
        return _libgambit.DVectorDouble___isub__(*args)

    def __mul__(*args):
        """__mul__(self, DVectorDouble v) -> double"""
        return _libgambit.DVectorDouble___mul__(*args)

    def __imul__(*args):
        """__imul__(self, double c) -> DVectorDouble"""
        return _libgambit.DVectorDouble___imul__(*args)

    def __div__(*args):
        """__div__(self, double c) -> DVectorDouble"""
        return _libgambit.DVectorDouble___div__(*args)

    def __eq__(*args):
        """__eq__(self, DVectorDouble v) -> bool"""
        return _libgambit.DVectorDouble___eq__(*args)

    def __ne__(*args):
        """__ne__(self, DVectorDouble v) -> bool"""
        return _libgambit.DVectorDouble___ne__(*args)

    def DPLengths(*args):
        """DPLengths(self) -> Gambit::Array<(int)>"""
        return _libgambit.DVectorDouble_DPLengths(*args)

DVectorDouble_swigregister = _libgambit.DVectorDouble_swigregister
DVectorDouble_swigregister(DVectorDouble)

class DVectorRational(PVectorRational):
    """Proxy of C++ DVectorRational class"""
    __swig_setmethods__ = {}
    for _s in [PVectorRational]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVectorRational, name, value)
    __swig_getmethods__ = {}
    for _s in [PVectorRational]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DVectorRational, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DVectorRational
        __init__(self, Gambit::PVector<(int)> sig) -> DVectorRational
        __init__(self, VectorRational val, Gambit::PVector<(int)> sig) -> DVectorRational
        __init__(self, DVectorRational v) -> DVectorRational
        """
        this = _libgambit.new_DVectorRational(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_DVectorRational
    __del__ = lambda self : None;
    def __call__(*args):
        """
        __call__(self, int a, int b, int c) -> Rational
        __call__(self, int a, int b, int c) -> Rational
        """
        return _libgambit.DVectorRational___call__(*args)

    def CopySubRow(*args):
        """CopySubRow(self, int row, int col, DVectorRational v)"""
        return _libgambit.DVectorRational_CopySubRow(*args)

    def __add__(*args):
        """__add__(self, DVectorRational v) -> DVectorRational"""
        return _libgambit.DVectorRational___add__(*args)

    def __iadd__(*args):
        """__iadd__(self, DVectorRational v) -> DVectorRational"""
        return _libgambit.DVectorRational___iadd__(*args)

    def __neg__(*args):
        """__neg__(self) -> DVectorRational"""
        return _libgambit.DVectorRational___neg__(*args)

    def __sub__(*args):
        """__sub__(self, DVectorRational v) -> DVectorRational"""
        return _libgambit.DVectorRational___sub__(*args)

    def __isub__(*args):
        """__isub__(self, DVectorRational v) -> DVectorRational"""
        return _libgambit.DVectorRational___isub__(*args)

    def __mul__(*args):
        """__mul__(self, DVectorRational v) -> Rational"""
        return _libgambit.DVectorRational___mul__(*args)

    def __imul__(*args):
        """__imul__(self, Rational c) -> DVectorRational"""
        return _libgambit.DVectorRational___imul__(*args)

    def __div__(*args):
        """__div__(self, Rational c) -> DVectorRational"""
        return _libgambit.DVectorRational___div__(*args)

    def __eq__(*args):
        """__eq__(self, DVectorRational v) -> bool"""
        return _libgambit.DVectorRational___eq__(*args)

    def __ne__(*args):
        """__ne__(self, DVectorRational v) -> bool"""
        return _libgambit.DVectorRational___ne__(*args)

    def DPLengths(*args):
        """DPLengths(self) -> Gambit::Array<(int)>"""
        return _libgambit.DVectorRational_DPLengths(*args)

DVectorRational_swigregister = _libgambit.DVectorRational_swigregister
DVectorRational_swigregister(DVectorRational)

class IntegerRep(_object):
    """Proxy of C++ IntegerRep class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerRep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerRep, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _libgambit.IntegerRep_len_set
    __swig_getmethods__["len"] = _libgambit.IntegerRep_len_get
    if _newclass:len = _swig_property(_libgambit.IntegerRep_len_get, _libgambit.IntegerRep_len_set)
    __swig_setmethods__["sz"] = _libgambit.IntegerRep_sz_set
    __swig_getmethods__["sz"] = _libgambit.IntegerRep_sz_get
    if _newclass:sz = _swig_property(_libgambit.IntegerRep_sz_get, _libgambit.IntegerRep_sz_set)
    __swig_setmethods__["sgn"] = _libgambit.IntegerRep_sgn_set
    __swig_getmethods__["sgn"] = _libgambit.IntegerRep_sgn_get
    if _newclass:sgn = _swig_property(_libgambit.IntegerRep_sgn_get, _libgambit.IntegerRep_sgn_set)
    __swig_setmethods__["s"] = _libgambit.IntegerRep_s_set
    __swig_getmethods__["s"] = _libgambit.IntegerRep_s_get
    if _newclass:s = _swig_property(_libgambit.IntegerRep_s_get, _libgambit.IntegerRep_s_set)
    def __init__(self, *args): 
        """__init__(self) -> IntegerRep"""
        this = _libgambit.new_IntegerRep(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_IntegerRep
    __del__ = lambda self : None;
IntegerRep_swigregister = _libgambit.IntegerRep_swigregister
IntegerRep_swigregister(IntegerRep)


def Ialloc(*args):
  """Ialloc(IntegerRep ?, unsigned short ?, int ?, int ?, int ?) -> IntegerRep"""
  return _libgambit.Ialloc(*args)

def Icalloc(*args):
  """Icalloc(IntegerRep ?, int ?) -> IntegerRep"""
  return _libgambit.Icalloc(*args)

def Icopy_ulong(*args):
  """Icopy_ulong(IntegerRep ?, unsigned long ?) -> IntegerRep"""
  return _libgambit.Icopy_ulong(*args)

def Icopy_long(*args):
  """Icopy_long(IntegerRep ?, long ?) -> IntegerRep"""
  return _libgambit.Icopy_long(*args)

def Icopy(*args):
  """Icopy(IntegerRep ?, IntegerRep ?) -> IntegerRep"""
  return _libgambit.Icopy(*args)

def Iresize(*args):
  """Iresize(IntegerRep ?, int ?) -> IntegerRep"""
  return _libgambit.Iresize(*args)

def power(*args):
  """power(IntegerRep ?, long ?, IntegerRep ?) -> IntegerRep"""
  return _libgambit.power(*args)

def Compl(*args):
  """Compl(IntegerRep ?, IntegerRep ?) -> IntegerRep"""
  return _libgambit.Compl(*args)

def cvtItoa(*args):
  """
    cvtItoa(IntegerRep x, string fmt, int fmtlen, int base, int showbase, 
        int width, int align_right, char fillchar, 
        char Xcase, int showpos) -> string
    """
  return _libgambit.cvtItoa(*args)

def Itolong(*args):
  """Itolong(IntegerRep ?) -> long"""
  return _libgambit.Itolong(*args)

def Itodouble(*args):
  """Itodouble(IntegerRep ?) -> double"""
  return _libgambit.Itodouble(*args)

def Iislong(*args):
  """Iislong(IntegerRep ?) -> int"""
  return _libgambit.Iislong(*args)

def Iisdouble(*args):
  """Iisdouble(IntegerRep ?) -> int"""
  return _libgambit.Iisdouble(*args)
class Integer(_object):
    """Proxy of C++ Integer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Integer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Integer, name)
    def __init__(self, *args): 
        """
        __init__(self) -> Integer
        __init__(self, int ?) -> Integer
        __init__(self, long ?) -> Integer
        __init__(self, unsigned long ?) -> Integer
        __init__(self, IntegerRep ?) -> Integer
        __init__(self, Integer ?) -> Integer
        """
        this = _libgambit.new_Integer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_Integer
    __del__ = lambda self : None;
    def plusplus(*args):
        """plusplus(self)"""
        return _libgambit.Integer_plusplus(*args)

    def negate(*args):
        """negate(self)"""
        return _libgambit.Integer_negate(*args)

    def abs(*args):
        """abs(self)"""
        return _libgambit.Integer_abs(*args)

    def __eq__(*args):
        """
        __eq__(self, Integer ?) -> bool
        __eq__(self, long ?) -> bool
        """
        return _libgambit.Integer___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, Integer ?) -> bool
        __ne__(self, long ?) -> bool
        """
        return _libgambit.Integer___ne__(*args)

    def __lt__(*args):
        """
        __lt__(self, Integer ?) -> bool
        __lt__(self, long ?) -> bool
        """
        return _libgambit.Integer___lt__(*args)

    def __le__(*args):
        """
        __le__(self, Integer ?) -> bool
        __le__(self, long ?) -> bool
        """
        return _libgambit.Integer___le__(*args)

    def __gt__(*args):
        """
        __gt__(self, Integer ?) -> bool
        __gt__(self, long ?) -> bool
        """
        return _libgambit.Integer___gt__(*args)

    def __ge__(*args):
        """
        __ge__(self, Integer ?) -> bool
        __ge__(self, long ?) -> bool
        """
        return _libgambit.Integer___ge__(*args)

    def __iadd__(*args):
        """
        __iadd__(self, Integer ?) -> Integer
        __iadd__(self, long ?) -> Integer
        """
        return _libgambit.Integer___iadd__(*args)

    def __isub__(*args):
        """
        __isub__(self, Integer ?) -> Integer
        __isub__(self, long ?) -> Integer
        """
        return _libgambit.Integer___isub__(*args)

    def __imul__(*args):
        """
        __imul__(self, Integer ?) -> Integer
        __imul__(self, long ?) -> Integer
        """
        return _libgambit.Integer___imul__(*args)

    def __idiv__(*args):
        """
        __idiv__(self, Integer ?) -> Integer
        __idiv__(self, long ?) -> Integer
        """
        return _libgambit.Integer___idiv__(*args)

    def __imod__(*args):
        """
        __imod__(self, Integer ?) -> Integer
        __imod__(self, long ?) -> Integer
        """
        return _libgambit.Integer___imod__(*args)

    def __ilshift__(*args):
        """
        __ilshift__(self, Integer ?) -> Integer
        __ilshift__(self, long ?) -> Integer
        """
        return _libgambit.Integer___ilshift__(*args)

    def __irshift__(*args):
        """
        __irshift__(self, Integer ?) -> Integer
        __irshift__(self, long ?) -> Integer
        """
        return _libgambit.Integer___irshift__(*args)

    def __neg__(*args):
        """__neg__(self) -> Integer"""
        return _libgambit.Integer___neg__(*args)

    def __add__(*args):
        """
        __add__(self, Integer ?) -> Integer
        __add__(self, long ?) -> Integer
        """
        return _libgambit.Integer___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, Integer ?) -> Integer
        __sub__(self, long ?) -> Integer
        """
        return _libgambit.Integer___sub__(*args)

    def __mul__(*args):
        """
        __mul__(self, Integer ?) -> Integer
        __mul__(self, long ?) -> Integer
        """
        return _libgambit.Integer___mul__(*args)

    def __div__(*args):
        """
        __div__(self, Integer ?) -> Integer
        __div__(self, long ?) -> Integer
        """
        return _libgambit.Integer___div__(*args)

    def __mod__(*args):
        """
        __mod__(self, Integer ?) -> Integer
        __mod__(self, long ?) -> Integer
        """
        return _libgambit.Integer___mod__(*args)

    def __lshift__(*args):
        """
        __lshift__(self, Integer ?) -> Integer
        __lshift__(self, long ?) -> Integer
        """
        return _libgambit.Integer___lshift__(*args)

    def __rshift__(*args):
        """
        __rshift__(self, Integer ?) -> Integer
        __rshift__(self, long ?) -> Integer
        """
        return _libgambit.Integer___rshift__(*args)

    def fits_in_long(*args):
        """fits_in_long(self) -> int"""
        return _libgambit.Integer_fits_in_long(*args)

    def fits_in_double(*args):
        """fits_in_double(self) -> int"""
        return _libgambit.Integer_fits_in_double(*args)

    def as_long(*args):
        """as_long(self) -> long"""
        return _libgambit.Integer_as_long(*args)

    def as_double(*args):
        """as_double(self) -> double"""
        return _libgambit.Integer_as_double(*args)

    def initialized(*args):
        """initialized(self) -> int"""
        return _libgambit.Integer_initialized(*args)

    def error(*args):
        """error(self, char msg)"""
        return _libgambit.Integer_error(*args)

    def OK(*args):
        """OK(self) -> int"""
        return _libgambit.Integer_OK(*args)

    def __str__(*args):
        """__str__(self, void ?) -> string"""
        return _libgambit.Integer___str__(*args)

    def __repr__(*args):
        """__repr__(self, void ?) -> string"""
        return _libgambit.Integer___repr__(*args)

    def __radd__(*args):
        """__radd__(self, long lhs) -> Integer"""
        return _libgambit.Integer___radd__(*args)

    def __rsub__(*args):
        """__rsub__(self, long lhs) -> Integer"""
        return _libgambit.Integer___rsub__(*args)

    def __rmul__(*args):
        """__rmul__(self, long lhs) -> Integer"""
        return _libgambit.Integer___rmul__(*args)

    def __rdiv__(*args):
        """__rdiv__(self, long lhs) -> Integer"""
        return _libgambit.Integer___rdiv__(*args)

    def __int__(*args):
        """__int__(self, void ?) -> long"""
        return _libgambit.Integer___int__(*args)

Integer_swigregister = _libgambit.Integer_swigregister
Integer_swigregister(Integer)

def multiply(*args):
  """
    multiply(IntegerRep ?, IntegerRep ?, IntegerRep ?) -> IntegerRep
    multiply(IntegerRep ?, long ?, IntegerRep ?) -> IntegerRep
    """
  return _libgambit.multiply(*args)

def bitop(*args):
  """
    bitop(IntegerRep ?, IntegerRep ?, IntegerRep ?, char ?) -> IntegerRep
    bitop(IntegerRep ?, long ?, IntegerRep ?, char ?) -> IntegerRep
    """
  return _libgambit.bitop(*args)


def Ipow(*args):
  """Ipow(long x, long y) -> Integer"""
  return _libgambit.Ipow(*args)

def sqrt(*args):
  """sqrt(Integer ?) -> Integer"""
  return _libgambit.sqrt(*args)

def lcm(*args):
  """lcm(Integer x, Integer y) -> Integer"""
  return _libgambit.lcm(*args)
class Rational(_object):
    """Proxy of C++ Rational class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rational, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rational, name)
    def __init__(self, *args): 
        """
        __init__(self) -> Rational
        __init__(self, double ?) -> Rational
        __init__(self, int ?) -> Rational
        __init__(self, long n) -> Rational
        __init__(self, int n, int d) -> Rational
        __init__(self, long n, long d) -> Rational
        __init__(self, Integer n) -> Rational
        __init__(self, Integer n, Integer d) -> Rational
        __init__(self, Rational ?) -> Rational
        """
        this = _libgambit.new_Rational(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_Rational
    __del__ = lambda self : None;
    def __eq__(*args):
        """__eq__(self, Rational y) -> bool"""
        return _libgambit.Rational___eq__(*args)

    def __ne__(*args):
        """__ne__(self, Rational y) -> bool"""
        return _libgambit.Rational___ne__(*args)

    def __lt__(*args):
        """__lt__(self, Rational y) -> bool"""
        return _libgambit.Rational___lt__(*args)

    def __le__(*args):
        """__le__(self, Rational y) -> bool"""
        return _libgambit.Rational___le__(*args)

    def __gt__(*args):
        """__gt__(self, Rational y) -> bool"""
        return _libgambit.Rational___gt__(*args)

    def __ge__(*args):
        """__ge__(self, Rational y) -> bool"""
        return _libgambit.Rational___ge__(*args)

    def __neg__(*args):
        """__neg__(self) -> Rational"""
        return _libgambit.Rational___neg__(*args)

    def negate(*args):
        """negate(self)"""
        return _libgambit.Rational_negate(*args)

    def invert(*args):
        """invert(self)"""
        return _libgambit.Rational_invert(*args)

    def numerator(*args):
        """numerator(self) -> Integer"""
        return _libgambit.Rational_numerator(*args)

    def denominator(*args):
        """denominator(self) -> Integer"""
        return _libgambit.Rational_denominator(*args)

    def fits_in_float(*args):
        """fits_in_float(self) -> int"""
        return _libgambit.Rational_fits_in_float(*args)

    def fits_in_double(*args):
        """fits_in_double(self) -> int"""
        return _libgambit.Rational_fits_in_double(*args)

    def error(*args):
        """error(self, char msg)"""
        return _libgambit.Rational_error(*args)

    def OK(*args):
        """OK(self) -> int"""
        return _libgambit.Rational_OK(*args)

    def __str__(*args):
        """__str__(self, void ?) -> string"""
        return _libgambit.Rational___str__(*args)

    def __repr__(*args):
        """__repr__(self, void ?) -> string"""
        return _libgambit.Rational___repr__(*args)

    def __add__(*args):
        """
        __add__(self, Rational y) -> Rational
        __add__(self, double y) -> double
        """
        return _libgambit.Rational___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, Rational y) -> Rational
        __sub__(self, double y) -> double
        """
        return _libgambit.Rational___sub__(*args)

    def __mul__(*args):
        """
        __mul__(self, Rational y) -> Rational
        __mul__(self, double y) -> double
        """
        return _libgambit.Rational___mul__(*args)

    def __div__(*args):
        """
        __div__(self, Rational y) -> Rational
        __div__(self, double y) -> double
        """
        return _libgambit.Rational___div__(*args)

    def __iadd__(*args):
        """
        __iadd__(self, Rational y) -> Rational
        __iadd__(self, double y) -> Rational
        """
        return _libgambit.Rational___iadd__(*args)

    def __isub__(*args):
        """
        __isub__(self, Rational y) -> Rational
        __isub__(self, double y) -> Rational
        """
        return _libgambit.Rational___isub__(*args)

    def __imul__(*args):
        """
        __imul__(self, Rational y) -> Rational
        __imul__(self, double y) -> Rational
        """
        return _libgambit.Rational___imul__(*args)

    def __idiv__(*args):
        """
        __idiv__(self, Rational y) -> Rational
        __idiv__(self, double y) -> Rational
        """
        return _libgambit.Rational___idiv__(*args)

    def __pos__(*args):
        """__pos__(self, void ?) -> Rational"""
        return _libgambit.Rational___pos__(*args)

    def __radd__(*args):
        """__radd__(self, double lhs) -> double"""
        return _libgambit.Rational___radd__(*args)

    def __rsub__(*args):
        """__rsub__(self, double lhs) -> double"""
        return _libgambit.Rational___rsub__(*args)

    def __rmul__(*args):
        """__rmul__(self, double lhs) -> double"""
        return _libgambit.Rational___rmul__(*args)

    def __rdiv__(*args):
        """__rdiv__(self, double lhs) -> double"""
        return _libgambit.Rational___rdiv__(*args)

    def __float__(*args):
        """__float__(self, void ?) -> double"""
        return _libgambit.Rational___float__(*args)

    def __abs__(*args):
        """__abs__(self, void ?) -> Rational"""
        return _libgambit.Rational___abs__(*args)

Rational_swigregister = _libgambit.Rational_swigregister
Rational_swigregister(Rational)


def ToRational(*args):
  """ToRational(string ?) -> Rational"""
  return _libgambit.ToRational(*args)

def ToDouble(*args):
  """ToDouble(string s) -> double"""
  return _libgambit.ToDouble(*args)

def ToNumber(*args):
  """ToNumber(string p_string) -> Rational"""
  return _libgambit.ToNumber(*args)
class GameObject(_object):
    """Proxy of C++ GameObject class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> GameObject"""
        this = _libgambit.new_GameObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def IsValid(*args):
        """IsValid(self) -> bool"""
        return _libgambit.GameObject_IsValid(*args)

    def Invalidate(*args):
        """Invalidate(self)"""
        return _libgambit.GameObject_Invalidate(*args)

    def IncRef(*args):
        """IncRef(self)"""
        return _libgambit.GameObject_IncRef(*args)

    def DecRef(*args):
        """DecRef(self)"""
        return _libgambit.GameObject_DecRef(*args)

    def RefCount(*args):
        """RefCount(self) -> int"""
        return _libgambit.GameObject_RefCount(*args)

    __swig_destroy__ = _libgambit.delete_GameObject
    __del__ = lambda self : None;
GameObject_swigregister = _libgambit.GameObject_swigregister
GameObject_swigregister(GameObject)

def ToText(*args):
  """
    ToText(double p_value, int p_prec) -> string
    ToText(Integer ?) -> string
    ToText(Rational ?) -> string
    ToText(Rational r, int ?) -> string
    """
  return _libgambit.ToText(*args)

def Epsilon(*args):
  """
    Epsilon(double v, int i=8)
    Epsilon(double v)
    Epsilon(Rational v, int ?=8)
    Epsilon(Rational v)
    """
  return _libgambit.Epsilon(*args)

class NullException(_object):
    """Proxy of C++ NullException class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NullException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_NullException
    __del__ = lambda self : None;
    def GetDescription(*args):
        """GetDescription(self) -> string"""
        return _libgambit.NullException_GetDescription(*args)

    def __init__(self, *args): 
        """__init__(self) -> NullException"""
        this = _libgambit.new_NullException(*args)
        try: self.this.append(this)
        except: self.this = this
NullException_swigregister = _libgambit.NullException_swigregister
NullException_swigregister(NullException)

class UndefinedException(_object):
    """Proxy of C++ UndefinedException class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UndefinedException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UndefinedException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_UndefinedException
    __del__ = lambda self : None;
    def GetDescription(*args):
        """GetDescription(self) -> string"""
        return _libgambit.UndefinedException_GetDescription(*args)

    def __init__(self, *args): 
        """__init__(self) -> UndefinedException"""
        this = _libgambit.new_UndefinedException(*args)
        try: self.this.append(this)
        except: self.this = this
UndefinedException_swigregister = _libgambit.UndefinedException_swigregister
UndefinedException_swigregister(UndefinedException)

class MismatchException(_object):
    """Proxy of C++ MismatchException class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MismatchException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MismatchException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_MismatchException
    __del__ = lambda self : None;
    def GetDescription(*args):
        """GetDescription(self) -> string"""
        return _libgambit.MismatchException_GetDescription(*args)

    def __init__(self, *args): 
        """__init__(self) -> MismatchException"""
        this = _libgambit.new_MismatchException(*args)
        try: self.this.append(this)
        except: self.this = this
MismatchException_swigregister = _libgambit.MismatchException_swigregister
MismatchException_swigregister(MismatchException)

class InvalidFileException:
    """Proxy of C++ InvalidFileException class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidFileException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidFileException, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libgambit.delete_InvalidFileException
    __del__ = lambda self : None;
    def GetDescription(*args):
        """GetDescription(self) -> string"""
        return _libgambit.InvalidFileException_GetDescription(*args)

    def __init__(self, *args): 
        """__init__(self) -> InvalidFileException"""
        this = _libgambit.new_InvalidFileException(*args)
        try: self.this.append(this)
        except: self.this = this
InvalidFileException_swigregister = _libgambit.InvalidFileException_swigregister
InvalidFileException_swigregister(InvalidFileException)

class GameOutcomeRep(GameObject):
    """Proxy of C++ GameOutcomeRep class"""
    __swig_setmethods__ = {}
    for _s in [GameObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameOutcomeRep, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameOutcomeRep, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.GameOutcomeRep_GetGame(*args)

    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GameOutcomeRep_GetNumber(*args)

    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GameOutcomeRep_GetLabel(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GameOutcomeRep_SetLabel(*args)

    def GetPayoff(*args):
        """GetPayoff(self, int pl) -> Rational"""
        return _libgambit.GameOutcomeRep_GetPayoff(*args)

    def SetPayoff(*args):
        """
        SetPayoff(self, int pl, string p_value)
        SetPayoff(self, int pl, Rational payoff)
        SetPayoff(self, int pl, double payoff)
        """
        return _libgambit.GameOutcomeRep_SetPayoff(*args)

GameOutcomeRep_swigregister = _libgambit.GameOutcomeRep_swigregister
GameOutcomeRep_swigregister(GameOutcomeRep)

class GameActionRep(GameObject):
    """Proxy of C++ GameActionRep class"""
    __swig_setmethods__ = {}
    for _s in [GameObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameActionRep, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameActionRep, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GameActionRep_GetNumber(*args)

    def GetInfoset(*args):
        """GetInfoset(self) -> GameInfoset"""
        return _libgambit.GameActionRep_GetInfoset(*args)

    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GameActionRep_GetLabel(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GameActionRep_SetLabel(*args)

    def Precedes(*args):
        """Precedes(self, GameNode ?) -> bool"""
        return _libgambit.GameActionRep_Precedes(*args)

    def DeleteAction(*args):
        """DeleteAction(self)"""
        return _libgambit.GameActionRep_DeleteAction(*args)

GameActionRep_swigregister = _libgambit.GameActionRep_swigregister
GameActionRep_swigregister(GameActionRep)

class GameInfosetRep(GameObject):
    """Proxy of C++ GameInfosetRep class"""
    __swig_setmethods__ = {}
    for _s in [GameObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameInfosetRep, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameInfosetRep, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.GameInfosetRep_GetGame(*args)

    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GameInfosetRep_GetNumber(*args)

    def GetPlayer(*args):
        """GetPlayer(self) -> GamePlayer"""
        return _libgambit.GameInfosetRep_GetPlayer(*args)

    def SetPlayer(*args):
        """SetPlayer(self, GamePlayer p)"""
        return _libgambit.GameInfosetRep_SetPlayer(*args)

    def IsChanceInfoset(*args):
        """IsChanceInfoset(self) -> bool"""
        return _libgambit.GameInfosetRep_IsChanceInfoset(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GameInfosetRep_SetLabel(*args)

    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GameInfosetRep_GetLabel(*args)

    def InsertAction(*args):
        """
        InsertAction(self, GameAction p_where=0) -> GameAction
        InsertAction(self) -> GameAction
        """
        return _libgambit.GameInfosetRep_InsertAction(*args)

    def NumActions(*args):
        """NumActions(self) -> int"""
        return _libgambit.GameInfosetRep_NumActions(*args)

    def GetAction(*args):
        """GetAction(self, int p_index) -> GameAction"""
        return _libgambit.GameInfosetRep_GetAction(*args)

    def Actions(*args):
        """Actions(self) -> GameActionIterator"""
        return _libgambit.GameInfosetRep_Actions(*args)

    def NumMembers(*args):
        """NumMembers(self) -> int"""
        return _libgambit.GameInfosetRep_NumMembers(*args)

    def GetMember(*args):
        """GetMember(self, int p_index) -> GameNode"""
        return _libgambit.GameInfosetRep_GetMember(*args)

    def Precedes(*args):
        """Precedes(self, GameNode ?) -> bool"""
        return _libgambit.GameInfosetRep_Precedes(*args)

    def SetActionProb(*args):
        """SetActionProb(self, int i, string p_value)"""
        return _libgambit.GameInfosetRep_SetActionProb(*args)

    def Reveal(*args):
        """Reveal(self, GamePlayer ?)"""
        return _libgambit.GameInfosetRep_Reveal(*args)

GameInfosetRep_swigregister = _libgambit.GameInfosetRep_swigregister
GameInfosetRep_swigregister(GameInfosetRep)

class GameStrategyRep(GameObject):
    """Proxy of C++ GameStrategyRep class"""
    __swig_setmethods__ = {}
    for _s in [GameObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameStrategyRep, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameStrategyRep, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GameStrategyRep_GetLabel(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GameStrategyRep_SetLabel(*args)

    def GetPlayer(*args):
        """GetPlayer(self) -> GamePlayer"""
        return _libgambit.GameStrategyRep_GetPlayer(*args)

    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GameStrategyRep_GetNumber(*args)

    def GetId(*args):
        """GetId(self) -> int"""
        return _libgambit.GameStrategyRep_GetId(*args)

    def DeleteStrategy(*args):
        """DeleteStrategy(self)"""
        return _libgambit.GameStrategyRep_DeleteStrategy(*args)

    __swig_destroy__ = _libgambit.delete_GameStrategyRep
    __del__ = lambda self : None;
GameStrategyRep_swigregister = _libgambit.GameStrategyRep_swigregister
GameStrategyRep_swigregister(GameStrategyRep)

class GamePlayerRep(GameObject):
    """Proxy of C++ GamePlayerRep class"""
    __swig_setmethods__ = {}
    for _s in [GameObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GamePlayerRep, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GamePlayerRep, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GamePlayerRep_GetNumber(*args)

    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.GamePlayerRep_GetGame(*args)

    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GamePlayerRep_GetLabel(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GamePlayerRep_SetLabel(*args)

    def IsChance(*args):
        """IsChance(self) -> bool"""
        return _libgambit.GamePlayerRep_IsChance(*args)

    def NumInfosets(*args):
        """NumInfosets(self) -> int"""
        return _libgambit.GamePlayerRep_NumInfosets(*args)

    def GetInfoset(*args):
        """GetInfoset(self, int p_index) -> GameInfoset"""
        return _libgambit.GamePlayerRep_GetInfoset(*args)

    def Infosets(*args):
        """Infosets(self) -> GameInfosetIterator"""
        return _libgambit.GamePlayerRep_Infosets(*args)

    def NumStrategies(*args):
        """NumStrategies(self) -> int"""
        return _libgambit.GamePlayerRep_NumStrategies(*args)

    def GetStrategy(*args):
        """GetStrategy(self, int st) -> GameStrategy"""
        return _libgambit.GamePlayerRep_GetStrategy(*args)

    def Strategies(*args):
        """Strategies(self) -> GameStrategyIterator"""
        return _libgambit.GamePlayerRep_Strategies(*args)

    def NewStrategy(*args):
        """NewStrategy(self) -> GameStrategy"""
        return _libgambit.GamePlayerRep_NewStrategy(*args)

GamePlayerRep_swigregister = _libgambit.GamePlayerRep_swigregister
GamePlayerRep_swigregister(GamePlayerRep)

class GameNodeRep(GameObject):
    """Proxy of C++ GameNodeRep class"""
    __swig_setmethods__ = {}
    for _s in [GameObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameNodeRep, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameNodeRep, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.GameNodeRep_GetGame(*args)

    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GameNodeRep_GetLabel(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GameNodeRep_SetLabel(*args)

    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GameNodeRep_GetNumber(*args)

    def NumberInInfoset(*args):
        """NumberInInfoset(self) -> int"""
        return _libgambit.GameNodeRep_NumberInInfoset(*args)

    def NumChildren(*args):
        """NumChildren(self) -> int"""
        return _libgambit.GameNodeRep_NumChildren(*args)

    def GetInfoset(*args):
        """GetInfoset(self) -> GameInfoset"""
        return _libgambit.GameNodeRep_GetInfoset(*args)

    def SetInfoset(*args):
        """SetInfoset(self, GameInfoset ?)"""
        return _libgambit.GameNodeRep_SetInfoset(*args)

    def LeaveInfoset(*args):
        """LeaveInfoset(self) -> GameInfoset"""
        return _libgambit.GameNodeRep_LeaveInfoset(*args)

    def IsTerminal(*args):
        """IsTerminal(self) -> bool"""
        return _libgambit.GameNodeRep_IsTerminal(*args)

    def GetPlayer(*args):
        """GetPlayer(self) -> GamePlayer"""
        return _libgambit.GameNodeRep_GetPlayer(*args)

    def GetPriorAction(*args):
        """GetPriorAction(self) -> GameAction"""
        return _libgambit.GameNodeRep_GetPriorAction(*args)

    def GetChild(*args):
        """GetChild(self, int i) -> GameNode"""
        return _libgambit.GameNodeRep_GetChild(*args)

    def GetParent(*args):
        """GetParent(self) -> GameNode"""
        return _libgambit.GameNodeRep_GetParent(*args)

    def GetNextSibling(*args):
        """GetNextSibling(self) -> GameNode"""
        return _libgambit.GameNodeRep_GetNextSibling(*args)

    def GetPriorSibling(*args):
        """GetPriorSibling(self) -> GameNode"""
        return _libgambit.GameNodeRep_GetPriorSibling(*args)

    def GetOutcome(*args):
        """GetOutcome(self) -> GameOutcome"""
        return _libgambit.GameNodeRep_GetOutcome(*args)

    def SetOutcome(*args):
        """SetOutcome(self, GameOutcome p_outcome)"""
        return _libgambit.GameNodeRep_SetOutcome(*args)

    def IsSuccessorOf(*args):
        """IsSuccessorOf(self, GameNode from) -> bool"""
        return _libgambit.GameNodeRep_IsSuccessorOf(*args)

    def IsSubgameRoot(*args):
        """IsSubgameRoot(self) -> bool"""
        return _libgambit.GameNodeRep_IsSubgameRoot(*args)

    def DeleteParent(*args):
        """DeleteParent(self)"""
        return _libgambit.GameNodeRep_DeleteParent(*args)

    def DeleteTree(*args):
        """DeleteTree(self)"""
        return _libgambit.GameNodeRep_DeleteTree(*args)

    def CopyTree(*args):
        """CopyTree(self, GameNode src)"""
        return _libgambit.GameNodeRep_CopyTree(*args)

    def MoveTree(*args):
        """MoveTree(self, GameNode src)"""
        return _libgambit.GameNodeRep_MoveTree(*args)

    def AppendMove(*args):
        """
        AppendMove(self, GamePlayer p_player, int p_actions) -> GameInfoset
        AppendMove(self, GameInfoset p_infoset) -> GameInfoset
        """
        return _libgambit.GameNodeRep_AppendMove(*args)

    def InsertMove(*args):
        """
        InsertMove(self, GamePlayer p_player, int p_actions) -> GameInfoset
        InsertMove(self, GameInfoset p_infoset) -> GameInfoset
        """
        return _libgambit.GameNodeRep_InsertMove(*args)

GameNodeRep_swigregister = _libgambit.GameNodeRep_swigregister
GameNodeRep_swigregister(GameNodeRep)

class PureStrategyProfile(_object):
    """Proxy of C++ PureStrategyProfile class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PureStrategyProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PureStrategyProfile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Game ?) -> PureStrategyProfile"""
        this = _libgambit.new_PureStrategyProfile(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetStrategy(*args):
        """
        GetStrategy(self, int pl) -> GameStrategy
        GetStrategy(self, GamePlayer p_player) -> GameStrategy
        """
        return _libgambit.PureStrategyProfile_GetStrategy(*args)

    def SetStrategy(*args):
        """SetStrategy(self, GameStrategy ?)"""
        return _libgambit.PureStrategyProfile_SetStrategy(*args)

    def GetOutcome(*args):
        """GetOutcome(self) -> GameOutcome"""
        return _libgambit.PureStrategyProfile_GetOutcome(*args)

    def SetOutcome(*args):
        """SetOutcome(self, GameOutcome p_outcome)"""
        return _libgambit.PureStrategyProfile_SetOutcome(*args)

    def GetPayoff(*args):
        """GetPayoff(self, GamePlayer p_player) -> Rational"""
        return _libgambit.PureStrategyProfile_GetPayoff(*args)

    def GetStrategyValue(*args):
        """GetStrategyValue(self, GameStrategy p_strategy) -> Rational"""
        return _libgambit.PureStrategyProfile_GetStrategyValue(*args)

    __swig_destroy__ = _libgambit.delete_PureStrategyProfile
    __del__ = lambda self : None;
PureStrategyProfile_swigregister = _libgambit.PureStrategyProfile_swigregister
PureStrategyProfile_swigregister(PureStrategyProfile)

class PureBehavProfile(_object):
    """Proxy of C++ PureBehavProfile class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PureBehavProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PureBehavProfile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Game ?) -> PureBehavProfile"""
        this = _libgambit.new_PureBehavProfile(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetAction(*args):
        """GetAction(self, GameInfoset ?) -> GameAction"""
        return _libgambit.PureBehavProfile_GetAction(*args)

    def SetAction(*args):
        """SetAction(self, GameAction ?)"""
        return _libgambit.PureBehavProfile_SetAction(*args)

    __swig_destroy__ = _libgambit.delete_PureBehavProfile
    __del__ = lambda self : None;
PureBehavProfile_swigregister = _libgambit.PureBehavProfile_swigregister
PureBehavProfile_swigregister(PureBehavProfile)

class GameRep(GameObject):
    """Proxy of C++ GameRep class"""
    __swig_setmethods__ = {}
    for _s in [GameObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameRep, name, value)
    __swig_getmethods__ = {}
    for _s in [GameObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GameRep, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GameRep
        __init__(self, Gambit::Array<(int)> p_dim) -> GameRep
        """
        this = _libgambit.new_GameRep(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_GameRep
    __del__ = lambda self : None;
    def Copy(*args):
        """Copy(self) -> Game"""
        return _libgambit.GameRep_Copy(*args)

    def IsTree(*args):
        """IsTree(self) -> bool"""
        return _libgambit.GameRep_IsTree(*args)

    def GetTitle(*args):
        """GetTitle(self) -> string"""
        return _libgambit.GameRep_GetTitle(*args)

    def SetTitle(*args):
        """SetTitle(self, string p_title)"""
        return _libgambit.GameRep_SetTitle(*args)

    def GetComment(*args):
        """GetComment(self) -> string"""
        return _libgambit.GameRep_GetComment(*args)

    def SetComment(*args):
        """SetComment(self, string p_comment)"""
        return _libgambit.GameRep_SetComment(*args)

    def IsConstSum(*args):
        """IsConstSum(self) -> bool"""
        return _libgambit.GameRep_IsConstSum(*args)

    def GetMinPayoff(*args):
        """
        GetMinPayoff(self, int pl=0) -> Rational
        GetMinPayoff(self) -> Rational
        """
        return _libgambit.GameRep_GetMinPayoff(*args)

    def GetMaxPayoff(*args):
        """
        GetMaxPayoff(self, int pl=0) -> Rational
        GetMaxPayoff(self) -> Rational
        """
        return _libgambit.GameRep_GetMaxPayoff(*args)

    def IsPerfectRecall(*args):
        """
        IsPerfectRecall(self, GameInfoset ?, GameInfoset ?) -> bool
        IsPerfectRecall(self) -> bool
        """
        return _libgambit.GameRep_IsPerfectRecall(*args)

    def Canonicalize(*args):
        """Canonicalize(self)"""
        return _libgambit.GameRep_Canonicalize(*args)

    def ClearComputedValues(*args):
        """ClearComputedValues(self)"""
        return _libgambit.GameRep_ClearComputedValues(*args)

    def BuildComputedValues(*args):
        """BuildComputedValues(self)"""
        return _libgambit.GameRep_BuildComputedValues(*args)

    def HasComputedValues(*args):
        """HasComputedValues(self) -> bool"""
        return _libgambit.GameRep_HasComputedValues(*args)

    def WriteEfgFile(*args):
        """
        WriteEfgFile(self, ostream ?)
        WriteEfgFile(self, ostream ?, GameNode p_node)
        """
        return _libgambit.GameRep_WriteEfgFile(*args)

    def WriteNfgFile(*args):
        """WriteNfgFile(self, ostream ?)"""
        return _libgambit.GameRep_WriteNfgFile(*args)

    def NumActions(*args):
        """NumActions(self) -> Gambit::PVector<(int)>"""
        return _libgambit.GameRep_NumActions(*args)

    def NumMembers(*args):
        """NumMembers(self) -> Gambit::PVector<(int)>"""
        return _libgambit.GameRep_NumMembers(*args)

    def NumStrategies(*args):
        """NumStrategies(self) -> Gambit::Array<(int)>"""
        return _libgambit.GameRep_NumStrategies(*args)

    def GetStrategy(*args):
        """GetStrategy(self, int p_index) -> GameStrategy"""
        return _libgambit.GameRep_GetStrategy(*args)

    def BehavProfileLength(*args):
        """BehavProfileLength(self) -> int"""
        return _libgambit.GameRep_BehavProfileLength(*args)

    def MixedProfileLength(*args):
        """MixedProfileLength(self) -> int"""
        return _libgambit.GameRep_MixedProfileLength(*args)

    def NumPlayers(*args):
        """NumPlayers(self) -> int"""
        return _libgambit.GameRep_NumPlayers(*args)

    def GetPlayer(*args):
        """GetPlayer(self, int pl) -> GamePlayer"""
        return _libgambit.GameRep_GetPlayer(*args)

    def Players(*args):
        """Players(self) -> GamePlayerIterator"""
        return _libgambit.GameRep_Players(*args)

    def GetChance(*args):
        """GetChance(self) -> GamePlayer"""
        return _libgambit.GameRep_GetChance(*args)

    def NewPlayer(*args):
        """NewPlayer(self) -> GamePlayer"""
        return _libgambit.GameRep_NewPlayer(*args)

    def GetInfoset(*args):
        """GetInfoset(self, int iset) -> GameInfoset"""
        return _libgambit.GameRep_GetInfoset(*args)

    def NumInfosets(*args):
        """NumInfosets(self) -> Gambit::Array<(int)>"""
        return _libgambit.GameRep_NumInfosets(*args)

    def GetAction(*args):
        """GetAction(self, int act) -> GameAction"""
        return _libgambit.GameRep_GetAction(*args)

    def NumOutcomes(*args):
        """NumOutcomes(self) -> int"""
        return _libgambit.GameRep_NumOutcomes(*args)

    def GetOutcome(*args):
        """GetOutcome(self, int index) -> GameOutcome"""
        return _libgambit.GameRep_GetOutcome(*args)

    def NewOutcome(*args):
        """NewOutcome(self) -> GameOutcome"""
        return _libgambit.GameRep_NewOutcome(*args)

    def DeleteOutcome(*args):
        """DeleteOutcome(self, GameOutcome ?)"""
        return _libgambit.GameRep_DeleteOutcome(*args)

    def GetRoot(*args):
        """GetRoot(self) -> GameNode"""
        return _libgambit.GameRep_GetRoot(*args)

    def NumNodes(*args):
        """NumNodes(self) -> int"""
        return _libgambit.GameRep_NumNodes(*args)

    def efg_file(*args):
        """efg_file(self, void ?) -> string"""
        return _libgambit.GameRep_efg_file(*args)

    def nfg_file(*args):
        """nfg_file(self, void ?) -> string"""
        return _libgambit.GameRep_nfg_file(*args)

    def NewMixedStrategyDouble(*args):
        """NewMixedStrategyDouble(self, void ?) -> MixedStrategyDouble"""
        return _libgambit.GameRep_NewMixedStrategyDouble(*args)

    def NewMixedStrategyRational(*args):
        """NewMixedStrategyRational(self, void ?) -> MixedStrategyRational"""
        return _libgambit.GameRep_NewMixedStrategyRational(*args)

    def NewMixedBehavDouble(*args):
        """NewMixedBehavDouble(self, void ?) -> MixedBehavDouble"""
        return _libgambit.GameRep_NewMixedBehavDouble(*args)

    def NewMixedBehavRational(*args):
        """NewMixedBehavRational(self, void ?) -> MixedBehavRational"""
        return _libgambit.GameRep_NewMixedBehavRational(*args)

GameRep_swigregister = _libgambit.GameRep_swigregister
GameRep_swigregister(GameRep)


def NewTree(*args):
  """NewTree() -> Game"""
  return _libgambit.NewTree(*args)

def NewTable(*args):
  """NewTable(Gambit::Array<(int)> p_dim) -> Game"""
  return _libgambit.NewTable(*args)

def ReadGame(*args):
  """ReadGame(istream ?) -> Game"""
  return _libgambit.ReadGame(*args)
class GameOutcome(_object):
    """Proxy of C++ GameOutcome class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameOutcome, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameOutcome, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GameOutcomeRep r=0) -> GameOutcome
        __init__(self) -> GameOutcome
        __init__(self, GameOutcome r) -> GameOutcome
        """
        this = _libgambit.new_GameOutcome(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_GameOutcome
    __del__ = lambda self : None;
    def __deref__(*args):
        """__deref__(self) -> GameOutcomeRep"""
        return _libgambit.GameOutcome___deref__(*args)

    def __eq__(*args):
        """
        __eq__(self, GameOutcome r) -> bool
        __eq__(self, GameOutcomeRep r) -> bool
        """
        return _libgambit.GameOutcome___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, GameOutcome r) -> bool
        __ne__(self, GameOutcomeRep r) -> bool
        """
        return _libgambit.GameOutcome___ne__(*args)

    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.GameOutcome_GetGame(*args)

    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GameOutcome_GetNumber(*args)

    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GameOutcome_GetLabel(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GameOutcome_SetLabel(*args)

    def SetPayoff(*args):
        """
        SetPayoff(self, int pl, string p_value)
        SetPayoff(self, int pl, Rational payoff)
        SetPayoff(self, int pl, double payoff)
        """
        return _libgambit.GameOutcome_SetPayoff(*args)

    def GetPayoff(*args):
        """GetPayoff(self, int pl) -> Rational"""
        return _libgambit.GameOutcome_GetPayoff(*args)

    def IsValid(*args):
        """IsValid(self) -> bool"""
        return _libgambit.GameOutcome_IsValid(*args)

    def Invalidate(*args):
        """Invalidate(self)"""
        return _libgambit.GameOutcome_Invalidate(*args)

    def IncRef(*args):
        """IncRef(self)"""
        return _libgambit.GameOutcome_IncRef(*args)

    def DecRef(*args):
        """DecRef(self)"""
        return _libgambit.GameOutcome_DecRef(*args)

    def RefCount(*args):
        """RefCount(self) -> int"""
        return _libgambit.GameOutcome_RefCount(*args)

GameOutcome_swigregister = _libgambit.GameOutcome_swigregister
GameOutcome_swigregister(GameOutcome)

class GameStrategy(_object):
    """Proxy of C++ GameStrategy class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameStrategy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameStrategy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GameStrategyRep r=0) -> GameStrategy
        __init__(self) -> GameStrategy
        __init__(self, GameStrategy r) -> GameStrategy
        """
        this = _libgambit.new_GameStrategy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_GameStrategy
    __del__ = lambda self : None;
    def __deref__(*args):
        """__deref__(self) -> GameStrategyRep"""
        return _libgambit.GameStrategy___deref__(*args)

    def __eq__(*args):
        """
        __eq__(self, GameStrategy r) -> bool
        __eq__(self, GameStrategyRep r) -> bool
        """
        return _libgambit.GameStrategy___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, GameStrategy r) -> bool
        __ne__(self, GameStrategyRep r) -> bool
        """
        return _libgambit.GameStrategy___ne__(*args)

    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GameStrategy_GetLabel(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GameStrategy_SetLabel(*args)

    def GetPlayer(*args):
        """GetPlayer(self) -> GamePlayer"""
        return _libgambit.GameStrategy_GetPlayer(*args)

    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GameStrategy_GetNumber(*args)

    def GetId(*args):
        """GetId(self) -> int"""
        return _libgambit.GameStrategy_GetId(*args)

    def DeleteStrategy(*args):
        """DeleteStrategy(self)"""
        return _libgambit.GameStrategy_DeleteStrategy(*args)

    def IsValid(*args):
        """IsValid(self) -> bool"""
        return _libgambit.GameStrategy_IsValid(*args)

    def Invalidate(*args):
        """Invalidate(self)"""
        return _libgambit.GameStrategy_Invalidate(*args)

    def IncRef(*args):
        """IncRef(self)"""
        return _libgambit.GameStrategy_IncRef(*args)

    def DecRef(*args):
        """DecRef(self)"""
        return _libgambit.GameStrategy_DecRef(*args)

    def RefCount(*args):
        """RefCount(self) -> int"""
        return _libgambit.GameStrategy_RefCount(*args)

GameStrategy_swigregister = _libgambit.GameStrategy_swigregister
GameStrategy_swigregister(GameStrategy)

class GameAction(_object):
    """Proxy of C++ GameAction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameAction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameAction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GameActionRep r=0) -> GameAction
        __init__(self) -> GameAction
        __init__(self, GameAction r) -> GameAction
        """
        this = _libgambit.new_GameAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_GameAction
    __del__ = lambda self : None;
    def __deref__(*args):
        """__deref__(self) -> GameActionRep"""
        return _libgambit.GameAction___deref__(*args)

    def __eq__(*args):
        """
        __eq__(self, GameAction r) -> bool
        __eq__(self, GameActionRep r) -> bool
        """
        return _libgambit.GameAction___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, GameAction r) -> bool
        __ne__(self, GameActionRep r) -> bool
        """
        return _libgambit.GameAction___ne__(*args)

    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GameAction_GetNumber(*args)

    def GetInfoset(*args):
        """GetInfoset(self) -> GameInfoset"""
        return _libgambit.GameAction_GetInfoset(*args)

    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GameAction_GetLabel(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GameAction_SetLabel(*args)

    def Precedes(*args):
        """Precedes(self, GameNode ?) -> bool"""
        return _libgambit.GameAction_Precedes(*args)

    def DeleteAction(*args):
        """DeleteAction(self)"""
        return _libgambit.GameAction_DeleteAction(*args)

    def IsValid(*args):
        """IsValid(self) -> bool"""
        return _libgambit.GameAction_IsValid(*args)

    def Invalidate(*args):
        """Invalidate(self)"""
        return _libgambit.GameAction_Invalidate(*args)

    def IncRef(*args):
        """IncRef(self)"""
        return _libgambit.GameAction_IncRef(*args)

    def DecRef(*args):
        """DecRef(self)"""
        return _libgambit.GameAction_DecRef(*args)

    def RefCount(*args):
        """RefCount(self) -> int"""
        return _libgambit.GameAction_RefCount(*args)

GameAction_swigregister = _libgambit.GameAction_swigregister
GameAction_swigregister(GameAction)

class GameInfoset(_object):
    """Proxy of C++ GameInfoset class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameInfoset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameInfoset, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GameInfosetRep r=0) -> GameInfoset
        __init__(self) -> GameInfoset
        __init__(self, GameInfoset r) -> GameInfoset
        """
        this = _libgambit.new_GameInfoset(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_GameInfoset
    __del__ = lambda self : None;
    def __deref__(*args):
        """__deref__(self) -> GameInfosetRep"""
        return _libgambit.GameInfoset___deref__(*args)

    def __eq__(*args):
        """
        __eq__(self, GameInfoset r) -> bool
        __eq__(self, GameInfosetRep r) -> bool
        """
        return _libgambit.GameInfoset___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, GameInfoset r) -> bool
        __ne__(self, GameInfosetRep r) -> bool
        """
        return _libgambit.GameInfoset___ne__(*args)

    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.GameInfoset_GetGame(*args)

    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GameInfoset_GetNumber(*args)

    def GetPlayer(*args):
        """GetPlayer(self) -> GamePlayer"""
        return _libgambit.GameInfoset_GetPlayer(*args)

    def SetPlayer(*args):
        """SetPlayer(self, GamePlayer p)"""
        return _libgambit.GameInfoset_SetPlayer(*args)

    def IsChanceInfoset(*args):
        """IsChanceInfoset(self) -> bool"""
        return _libgambit.GameInfoset_IsChanceInfoset(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GameInfoset_SetLabel(*args)

    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GameInfoset_GetLabel(*args)

    def InsertAction(*args):
        """
        InsertAction(self, GameAction p_where=0) -> GameAction
        InsertAction(self) -> GameAction
        """
        return _libgambit.GameInfoset_InsertAction(*args)

    def NumActions(*args):
        """NumActions(self) -> int"""
        return _libgambit.GameInfoset_NumActions(*args)

    def GetAction(*args):
        """GetAction(self, int p_index) -> GameAction"""
        return _libgambit.GameInfoset_GetAction(*args)

    def Actions(*args):
        """Actions(self) -> GameActionIterator"""
        return _libgambit.GameInfoset_Actions(*args)

    def NumMembers(*args):
        """NumMembers(self) -> int"""
        return _libgambit.GameInfoset_NumMembers(*args)

    def GetMember(*args):
        """GetMember(self, int p_index) -> GameNode"""
        return _libgambit.GameInfoset_GetMember(*args)

    def Precedes(*args):
        """Precedes(self, GameNode ?) -> bool"""
        return _libgambit.GameInfoset_Precedes(*args)

    def SetActionProb(*args):
        """SetActionProb(self, int i, string p_value)"""
        return _libgambit.GameInfoset_SetActionProb(*args)

    def Reveal(*args):
        """Reveal(self, GamePlayer ?)"""
        return _libgambit.GameInfoset_Reveal(*args)

    def IsValid(*args):
        """IsValid(self) -> bool"""
        return _libgambit.GameInfoset_IsValid(*args)

    def Invalidate(*args):
        """Invalidate(self)"""
        return _libgambit.GameInfoset_Invalidate(*args)

    def IncRef(*args):
        """IncRef(self)"""
        return _libgambit.GameInfoset_IncRef(*args)

    def DecRef(*args):
        """DecRef(self)"""
        return _libgambit.GameInfoset_DecRef(*args)

    def RefCount(*args):
        """RefCount(self) -> int"""
        return _libgambit.GameInfoset_RefCount(*args)

GameInfoset_swigregister = _libgambit.GameInfoset_swigregister
GameInfoset_swigregister(GameInfoset)

class GameNode(_object):
    """Proxy of C++ GameNode class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GameNodeRep r=0) -> GameNode
        __init__(self) -> GameNode
        __init__(self, GameNode r) -> GameNode
        """
        this = _libgambit.new_GameNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_GameNode
    __del__ = lambda self : None;
    def __deref__(*args):
        """__deref__(self) -> GameNodeRep"""
        return _libgambit.GameNode___deref__(*args)

    def __eq__(*args):
        """
        __eq__(self, GameNode r) -> bool
        __eq__(self, GameNodeRep r) -> bool
        """
        return _libgambit.GameNode___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, GameNode r) -> bool
        __ne__(self, GameNodeRep r) -> bool
        """
        return _libgambit.GameNode___ne__(*args)

    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.GameNode_GetGame(*args)

    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GameNode_GetLabel(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GameNode_SetLabel(*args)

    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GameNode_GetNumber(*args)

    def NumberInInfoset(*args):
        """NumberInInfoset(self) -> int"""
        return _libgambit.GameNode_NumberInInfoset(*args)

    def NumChildren(*args):
        """NumChildren(self) -> int"""
        return _libgambit.GameNode_NumChildren(*args)

    def GetInfoset(*args):
        """GetInfoset(self) -> GameInfoset"""
        return _libgambit.GameNode_GetInfoset(*args)

    def SetInfoset(*args):
        """SetInfoset(self, GameInfoset ?)"""
        return _libgambit.GameNode_SetInfoset(*args)

    def LeaveInfoset(*args):
        """LeaveInfoset(self) -> GameInfoset"""
        return _libgambit.GameNode_LeaveInfoset(*args)

    def IsTerminal(*args):
        """IsTerminal(self) -> bool"""
        return _libgambit.GameNode_IsTerminal(*args)

    def GetPlayer(*args):
        """GetPlayer(self) -> GamePlayer"""
        return _libgambit.GameNode_GetPlayer(*args)

    def GetPriorAction(*args):
        """GetPriorAction(self) -> GameAction"""
        return _libgambit.GameNode_GetPriorAction(*args)

    def GetChild(*args):
        """GetChild(self, int i) -> GameNode"""
        return _libgambit.GameNode_GetChild(*args)

    def GetParent(*args):
        """GetParent(self) -> GameNode"""
        return _libgambit.GameNode_GetParent(*args)

    def GetNextSibling(*args):
        """GetNextSibling(self) -> GameNode"""
        return _libgambit.GameNode_GetNextSibling(*args)

    def GetPriorSibling(*args):
        """GetPriorSibling(self) -> GameNode"""
        return _libgambit.GameNode_GetPriorSibling(*args)

    def GetOutcome(*args):
        """GetOutcome(self) -> GameOutcome"""
        return _libgambit.GameNode_GetOutcome(*args)

    def SetOutcome(*args):
        """SetOutcome(self, GameOutcome p_outcome)"""
        return _libgambit.GameNode_SetOutcome(*args)

    def IsSuccessorOf(*args):
        """IsSuccessorOf(self, GameNode from) -> bool"""
        return _libgambit.GameNode_IsSuccessorOf(*args)

    def IsSubgameRoot(*args):
        """IsSubgameRoot(self) -> bool"""
        return _libgambit.GameNode_IsSubgameRoot(*args)

    def DeleteParent(*args):
        """DeleteParent(self)"""
        return _libgambit.GameNode_DeleteParent(*args)

    def DeleteTree(*args):
        """DeleteTree(self)"""
        return _libgambit.GameNode_DeleteTree(*args)

    def CopyTree(*args):
        """CopyTree(self, GameNode src)"""
        return _libgambit.GameNode_CopyTree(*args)

    def MoveTree(*args):
        """MoveTree(self, GameNode src)"""
        return _libgambit.GameNode_MoveTree(*args)

    def AppendMove(*args):
        """
        AppendMove(self, GamePlayer p_player, int p_actions) -> GameInfoset
        AppendMove(self, GameInfoset p_infoset) -> GameInfoset
        """
        return _libgambit.GameNode_AppendMove(*args)

    def InsertMove(*args):
        """
        InsertMove(self, GamePlayer p_player, int p_actions) -> GameInfoset
        InsertMove(self, GameInfoset p_infoset) -> GameInfoset
        """
        return _libgambit.GameNode_InsertMove(*args)

    def IsValid(*args):
        """IsValid(self) -> bool"""
        return _libgambit.GameNode_IsValid(*args)

    def Invalidate(*args):
        """Invalidate(self)"""
        return _libgambit.GameNode_Invalidate(*args)

    def IncRef(*args):
        """IncRef(self)"""
        return _libgambit.GameNode_IncRef(*args)

    def DecRef(*args):
        """DecRef(self)"""
        return _libgambit.GameNode_DecRef(*args)

    def RefCount(*args):
        """RefCount(self) -> int"""
        return _libgambit.GameNode_RefCount(*args)

GameNode_swigregister = _libgambit.GameNode_swigregister
GameNode_swigregister(GameNode)

class GamePlayer(_object):
    """Proxy of C++ GamePlayer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GamePlayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GamePlayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GamePlayerRep r=0) -> GamePlayer
        __init__(self) -> GamePlayer
        __init__(self, GamePlayer r) -> GamePlayer
        """
        this = _libgambit.new_GamePlayer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_GamePlayer
    __del__ = lambda self : None;
    def __deref__(*args):
        """__deref__(self) -> GamePlayerRep"""
        return _libgambit.GamePlayer___deref__(*args)

    def __eq__(*args):
        """
        __eq__(self, GamePlayer r) -> bool
        __eq__(self, GamePlayerRep r) -> bool
        """
        return _libgambit.GamePlayer___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, GamePlayer r) -> bool
        __ne__(self, GamePlayerRep r) -> bool
        """
        return _libgambit.GamePlayer___ne__(*args)

    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GamePlayer_GetNumber(*args)

    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.GamePlayer_GetGame(*args)

    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GamePlayer_GetLabel(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GamePlayer_SetLabel(*args)

    def IsChance(*args):
        """IsChance(self) -> bool"""
        return _libgambit.GamePlayer_IsChance(*args)

    def NumInfosets(*args):
        """NumInfosets(self) -> int"""
        return _libgambit.GamePlayer_NumInfosets(*args)

    def GetInfoset(*args):
        """GetInfoset(self, int p_index) -> GameInfoset"""
        return _libgambit.GamePlayer_GetInfoset(*args)

    def Infosets(*args):
        """Infosets(self) -> GameInfosetIterator"""
        return _libgambit.GamePlayer_Infosets(*args)

    def NumStrategies(*args):
        """NumStrategies(self) -> int"""
        return _libgambit.GamePlayer_NumStrategies(*args)

    def GetStrategy(*args):
        """GetStrategy(self, int st) -> GameStrategy"""
        return _libgambit.GamePlayer_GetStrategy(*args)

    def Strategies(*args):
        """Strategies(self) -> GameStrategyIterator"""
        return _libgambit.GamePlayer_Strategies(*args)

    def NewStrategy(*args):
        """NewStrategy(self) -> GameStrategy"""
        return _libgambit.GamePlayer_NewStrategy(*args)

    def IsValid(*args):
        """IsValid(self) -> bool"""
        return _libgambit.GamePlayer_IsValid(*args)

    def Invalidate(*args):
        """Invalidate(self)"""
        return _libgambit.GamePlayer_Invalidate(*args)

    def IncRef(*args):
        """IncRef(self)"""
        return _libgambit.GamePlayer_IncRef(*args)

    def DecRef(*args):
        """DecRef(self)"""
        return _libgambit.GamePlayer_DecRef(*args)

    def RefCount(*args):
        """RefCount(self) -> int"""
        return _libgambit.GamePlayer_RefCount(*args)

GamePlayer_swigregister = _libgambit.GamePlayer_swigregister
GamePlayer_swigregister(GamePlayer)

class GameActionIterator(_object):
    """Proxy of C++ GameActionIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameActionIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameActionIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Gambit::Array<(p.Gambit::GameActionRep)> p_array) -> GameActionIterator"""
        this = _libgambit.new_GameActionIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def plusplus(*args):
        """
        plusplus(self)
        plusplus(self, int ?)
        """
        return _libgambit.GameActionIterator_plusplus(*args)

    def AtEnd(*args):
        """AtEnd(self) -> bool"""
        return _libgambit.GameActionIterator_AtEnd(*args)

    def GetIndex(*args):
        """GetIndex(self) -> int"""
        return _libgambit.GameActionIterator_GetIndex(*args)

    def __deref__(*args):
        """__deref__(self) -> GameAction"""
        return _libgambit.GameActionIterator___deref__(*args)

    def __iter__(self): return self
    def next(self):
      if self.AtEnd(): raise StopIteration
      value = self.__deref__()
      self.plusplus()       
      return value

    __swig_destroy__ = _libgambit.delete_GameActionIterator
    __del__ = lambda self : None;
    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GameActionIterator_GetNumber(*args)

    def GetInfoset(*args):
        """GetInfoset(self) -> GameInfoset"""
        return _libgambit.GameActionIterator_GetInfoset(*args)

    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GameActionIterator_GetLabel(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GameActionIterator_SetLabel(*args)

    def Precedes(*args):
        """Precedes(self, GameNode ?) -> bool"""
        return _libgambit.GameActionIterator_Precedes(*args)

    def DeleteAction(*args):
        """DeleteAction(self)"""
        return _libgambit.GameActionIterator_DeleteAction(*args)

    def IsValid(*args):
        """IsValid(self) -> bool"""
        return _libgambit.GameActionIterator_IsValid(*args)

    def Invalidate(*args):
        """Invalidate(self)"""
        return _libgambit.GameActionIterator_Invalidate(*args)

    def IncRef(*args):
        """IncRef(self)"""
        return _libgambit.GameActionIterator_IncRef(*args)

    def DecRef(*args):
        """DecRef(self)"""
        return _libgambit.GameActionIterator_DecRef(*args)

    def RefCount(*args):
        """RefCount(self) -> int"""
        return _libgambit.GameActionIterator_RefCount(*args)

GameActionIterator_swigregister = _libgambit.GameActionIterator_swigregister
GameActionIterator_swigregister(GameActionIterator)

class GameInfosetIterator(_object):
    """Proxy of C++ GameInfosetIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameInfosetIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameInfosetIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Gambit::Array<(p.Gambit::GameInfosetRep)> p_array) -> GameInfosetIterator"""
        this = _libgambit.new_GameInfosetIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def plusplus(*args):
        """
        plusplus(self)
        plusplus(self, int ?)
        """
        return _libgambit.GameInfosetIterator_plusplus(*args)

    def AtEnd(*args):
        """AtEnd(self) -> bool"""
        return _libgambit.GameInfosetIterator_AtEnd(*args)

    def GetIndex(*args):
        """GetIndex(self) -> int"""
        return _libgambit.GameInfosetIterator_GetIndex(*args)

    def __deref__(*args):
        """__deref__(self) -> GameInfoset"""
        return _libgambit.GameInfosetIterator___deref__(*args)

    def __iter__(self): return self
    def next(self):
      if self.AtEnd(): raise StopIteration
      value = self.__deref__()
      self.plusplus()       
      return value

    __swig_destroy__ = _libgambit.delete_GameInfosetIterator
    __del__ = lambda self : None;
    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.GameInfosetIterator_GetGame(*args)

    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GameInfosetIterator_GetNumber(*args)

    def GetPlayer(*args):
        """GetPlayer(self) -> GamePlayer"""
        return _libgambit.GameInfosetIterator_GetPlayer(*args)

    def SetPlayer(*args):
        """SetPlayer(self, GamePlayer p)"""
        return _libgambit.GameInfosetIterator_SetPlayer(*args)

    def IsChanceInfoset(*args):
        """IsChanceInfoset(self) -> bool"""
        return _libgambit.GameInfosetIterator_IsChanceInfoset(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GameInfosetIterator_SetLabel(*args)

    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GameInfosetIterator_GetLabel(*args)

    def InsertAction(*args):
        """
        InsertAction(self, GameAction p_where=0) -> GameAction
        InsertAction(self) -> GameAction
        """
        return _libgambit.GameInfosetIterator_InsertAction(*args)

    def NumActions(*args):
        """NumActions(self) -> int"""
        return _libgambit.GameInfosetIterator_NumActions(*args)

    def GetAction(*args):
        """GetAction(self, int p_index) -> GameAction"""
        return _libgambit.GameInfosetIterator_GetAction(*args)

    def Actions(*args):
        """Actions(self) -> GameActionIterator"""
        return _libgambit.GameInfosetIterator_Actions(*args)

    def NumMembers(*args):
        """NumMembers(self) -> int"""
        return _libgambit.GameInfosetIterator_NumMembers(*args)

    def GetMember(*args):
        """GetMember(self, int p_index) -> GameNode"""
        return _libgambit.GameInfosetIterator_GetMember(*args)

    def Precedes(*args):
        """Precedes(self, GameNode ?) -> bool"""
        return _libgambit.GameInfosetIterator_Precedes(*args)

    def SetActionProb(*args):
        """SetActionProb(self, int i, string p_value)"""
        return _libgambit.GameInfosetIterator_SetActionProb(*args)

    def Reveal(*args):
        """Reveal(self, GamePlayer ?)"""
        return _libgambit.GameInfosetIterator_Reveal(*args)

    def IsValid(*args):
        """IsValid(self) -> bool"""
        return _libgambit.GameInfosetIterator_IsValid(*args)

    def Invalidate(*args):
        """Invalidate(self)"""
        return _libgambit.GameInfosetIterator_Invalidate(*args)

    def IncRef(*args):
        """IncRef(self)"""
        return _libgambit.GameInfosetIterator_IncRef(*args)

    def DecRef(*args):
        """DecRef(self)"""
        return _libgambit.GameInfosetIterator_DecRef(*args)

    def RefCount(*args):
        """RefCount(self) -> int"""
        return _libgambit.GameInfosetIterator_RefCount(*args)

GameInfosetIterator_swigregister = _libgambit.GameInfosetIterator_swigregister
GameInfosetIterator_swigregister(GameInfosetIterator)

class GameStrategyIterator(_object):
    """Proxy of C++ GameStrategyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameStrategyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameStrategyIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Gambit::Array<(p.Gambit::GameStrategyRep)> p_array) -> GameStrategyIterator"""
        this = _libgambit.new_GameStrategyIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def plusplus(*args):
        """
        plusplus(self)
        plusplus(self, int ?)
        """
        return _libgambit.GameStrategyIterator_plusplus(*args)

    def AtEnd(*args):
        """AtEnd(self) -> bool"""
        return _libgambit.GameStrategyIterator_AtEnd(*args)

    def GetIndex(*args):
        """GetIndex(self) -> int"""
        return _libgambit.GameStrategyIterator_GetIndex(*args)

    def __deref__(*args):
        """__deref__(self) -> GameStrategy"""
        return _libgambit.GameStrategyIterator___deref__(*args)

    def __iter__(self): return self
    def next(self):
      if self.AtEnd(): raise StopIteration
      value = self.__deref__()
      self.plusplus()       
      return value

    __swig_destroy__ = _libgambit.delete_GameStrategyIterator
    __del__ = lambda self : None;
    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GameStrategyIterator_GetLabel(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GameStrategyIterator_SetLabel(*args)

    def GetPlayer(*args):
        """GetPlayer(self) -> GamePlayer"""
        return _libgambit.GameStrategyIterator_GetPlayer(*args)

    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GameStrategyIterator_GetNumber(*args)

    def GetId(*args):
        """GetId(self) -> int"""
        return _libgambit.GameStrategyIterator_GetId(*args)

    def DeleteStrategy(*args):
        """DeleteStrategy(self)"""
        return _libgambit.GameStrategyIterator_DeleteStrategy(*args)

    def IsValid(*args):
        """IsValid(self) -> bool"""
        return _libgambit.GameStrategyIterator_IsValid(*args)

    def Invalidate(*args):
        """Invalidate(self)"""
        return _libgambit.GameStrategyIterator_Invalidate(*args)

    def IncRef(*args):
        """IncRef(self)"""
        return _libgambit.GameStrategyIterator_IncRef(*args)

    def DecRef(*args):
        """DecRef(self)"""
        return _libgambit.GameStrategyIterator_DecRef(*args)

    def RefCount(*args):
        """RefCount(self) -> int"""
        return _libgambit.GameStrategyIterator_RefCount(*args)

GameStrategyIterator_swigregister = _libgambit.GameStrategyIterator_swigregister
GameStrategyIterator_swigregister(GameStrategyIterator)

class GamePlayerIterator(_object):
    """Proxy of C++ GamePlayerIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GamePlayerIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GamePlayerIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Gambit::Array<(p.Gambit::GamePlayerRep)> p_array) -> GamePlayerIterator"""
        this = _libgambit.new_GamePlayerIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def plusplus(*args):
        """
        plusplus(self)
        plusplus(self, int ?)
        """
        return _libgambit.GamePlayerIterator_plusplus(*args)

    def AtEnd(*args):
        """AtEnd(self) -> bool"""
        return _libgambit.GamePlayerIterator_AtEnd(*args)

    def GetIndex(*args):
        """GetIndex(self) -> int"""
        return _libgambit.GamePlayerIterator_GetIndex(*args)

    def __deref__(*args):
        """__deref__(self) -> GamePlayer"""
        return _libgambit.GamePlayerIterator___deref__(*args)

    def __iter__(self): return self
    def next(self):
      if self.AtEnd(): raise StopIteration
      value = self.__deref__()
      self.plusplus()       
      return value

    __swig_destroy__ = _libgambit.delete_GamePlayerIterator
    __del__ = lambda self : None;
    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.GamePlayerIterator_GetNumber(*args)

    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.GamePlayerIterator_GetGame(*args)

    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.GamePlayerIterator_GetLabel(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.GamePlayerIterator_SetLabel(*args)

    def IsChance(*args):
        """IsChance(self) -> bool"""
        return _libgambit.GamePlayerIterator_IsChance(*args)

    def NumInfosets(*args):
        """NumInfosets(self) -> int"""
        return _libgambit.GamePlayerIterator_NumInfosets(*args)

    def GetInfoset(*args):
        """GetInfoset(self, int p_index) -> GameInfoset"""
        return _libgambit.GamePlayerIterator_GetInfoset(*args)

    def Infosets(*args):
        """Infosets(self) -> GameInfosetIterator"""
        return _libgambit.GamePlayerIterator_Infosets(*args)

    def NumStrategies(*args):
        """NumStrategies(self) -> int"""
        return _libgambit.GamePlayerIterator_NumStrategies(*args)

    def GetStrategy(*args):
        """GetStrategy(self, int st) -> GameStrategy"""
        return _libgambit.GamePlayerIterator_GetStrategy(*args)

    def Strategies(*args):
        """Strategies(self) -> GameStrategyIterator"""
        return _libgambit.GamePlayerIterator_Strategies(*args)

    def NewStrategy(*args):
        """NewStrategy(self) -> GameStrategy"""
        return _libgambit.GamePlayerIterator_NewStrategy(*args)

    def IsValid(*args):
        """IsValid(self) -> bool"""
        return _libgambit.GamePlayerIterator_IsValid(*args)

    def Invalidate(*args):
        """Invalidate(self)"""
        return _libgambit.GamePlayerIterator_Invalidate(*args)

    def IncRef(*args):
        """IncRef(self)"""
        return _libgambit.GamePlayerIterator_IncRef(*args)

    def DecRef(*args):
        """DecRef(self)"""
        return _libgambit.GamePlayerIterator_DecRef(*args)

    def RefCount(*args):
        """RefCount(self) -> int"""
        return _libgambit.GamePlayerIterator_RefCount(*args)

GamePlayerIterator_swigregister = _libgambit.GamePlayerIterator_swigregister
GamePlayerIterator_swigregister(GamePlayerIterator)

class Game(_object):
    """Proxy of C++ Game class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Game, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Game, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GameRep r=0) -> Game
        __init__(self) -> Game
        __init__(self, Game r) -> Game
        """
        this = _libgambit.new_Game(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_Game
    __del__ = lambda self : None;
    def __deref__(*args):
        """__deref__(self) -> GameRep"""
        return _libgambit.Game___deref__(*args)

    def __eq__(*args):
        """
        __eq__(self, Game r) -> bool
        __eq__(self, GameRep r) -> bool
        """
        return _libgambit.Game___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, Game r) -> bool
        __ne__(self, GameRep r) -> bool
        """
        return _libgambit.Game___ne__(*args)

    def contingencies(self):
      return StrategyIterator(StrategySupport(self))

    def mixed_strategy(self, rational=False):
      if rational:
        return self.NewMixedStrategyRational()
      else:
        return self.NewMixedStrategyDouble()

    def behavior_strategy(self, rational=False):
      if rational:
        return self.NewMixedBehavRational()
      else:
        return self.NewMixedBehavDouble()

    def __str__(self):
      if self.IsTree():
        return "Gambit extensive game '%s'" % self.GetTitle()
      else:
        return "Gambit strategic game '%s'" % self.GetTitle()

    def __repr__(self):  return str(self)

    def Copy(*args):
        """Copy(self) -> Game"""
        return _libgambit.Game_Copy(*args)

    def IsTree(*args):
        """IsTree(self) -> bool"""
        return _libgambit.Game_IsTree(*args)

    def GetTitle(*args):
        """GetTitle(self) -> string"""
        return _libgambit.Game_GetTitle(*args)

    def SetTitle(*args):
        """SetTitle(self, string p_title)"""
        return _libgambit.Game_SetTitle(*args)

    def GetComment(*args):
        """GetComment(self) -> string"""
        return _libgambit.Game_GetComment(*args)

    def SetComment(*args):
        """SetComment(self, string p_comment)"""
        return _libgambit.Game_SetComment(*args)

    def IsConstSum(*args):
        """IsConstSum(self) -> bool"""
        return _libgambit.Game_IsConstSum(*args)

    def GetMinPayoff(*args):
        """
        GetMinPayoff(self, int pl=0) -> Rational
        GetMinPayoff(self) -> Rational
        """
        return _libgambit.Game_GetMinPayoff(*args)

    def GetMaxPayoff(*args):
        """
        GetMaxPayoff(self, int pl=0) -> Rational
        GetMaxPayoff(self) -> Rational
        """
        return _libgambit.Game_GetMaxPayoff(*args)

    def IsPerfectRecall(*args):
        """
        IsPerfectRecall(self, GameInfoset ?, GameInfoset ?) -> bool
        IsPerfectRecall(self) -> bool
        """
        return _libgambit.Game_IsPerfectRecall(*args)

    def Canonicalize(*args):
        """Canonicalize(self)"""
        return _libgambit.Game_Canonicalize(*args)

    def ClearComputedValues(*args):
        """ClearComputedValues(self)"""
        return _libgambit.Game_ClearComputedValues(*args)

    def BuildComputedValues(*args):
        """BuildComputedValues(self)"""
        return _libgambit.Game_BuildComputedValues(*args)

    def HasComputedValues(*args):
        """HasComputedValues(self) -> bool"""
        return _libgambit.Game_HasComputedValues(*args)

    def WriteEfgFile(*args):
        """
        WriteEfgFile(self, ostream ?)
        WriteEfgFile(self, ostream ?, GameNode p_node)
        """
        return _libgambit.Game_WriteEfgFile(*args)

    def WriteNfgFile(*args):
        """WriteNfgFile(self, ostream ?)"""
        return _libgambit.Game_WriteNfgFile(*args)

    def NumActions(*args):
        """NumActions(self) -> Gambit::PVector<(int)>"""
        return _libgambit.Game_NumActions(*args)

    def NumMembers(*args):
        """NumMembers(self) -> Gambit::PVector<(int)>"""
        return _libgambit.Game_NumMembers(*args)

    def NumStrategies(*args):
        """NumStrategies(self) -> Gambit::Array<(int)>"""
        return _libgambit.Game_NumStrategies(*args)

    def GetStrategy(*args):
        """GetStrategy(self, int p_index) -> GameStrategy"""
        return _libgambit.Game_GetStrategy(*args)

    def BehavProfileLength(*args):
        """BehavProfileLength(self) -> int"""
        return _libgambit.Game_BehavProfileLength(*args)

    def MixedProfileLength(*args):
        """MixedProfileLength(self) -> int"""
        return _libgambit.Game_MixedProfileLength(*args)

    def NumPlayers(*args):
        """NumPlayers(self) -> int"""
        return _libgambit.Game_NumPlayers(*args)

    def GetPlayer(*args):
        """GetPlayer(self, int pl) -> GamePlayer"""
        return _libgambit.Game_GetPlayer(*args)

    def Players(*args):
        """Players(self) -> GamePlayerIterator"""
        return _libgambit.Game_Players(*args)

    def GetChance(*args):
        """GetChance(self) -> GamePlayer"""
        return _libgambit.Game_GetChance(*args)

    def NewPlayer(*args):
        """NewPlayer(self) -> GamePlayer"""
        return _libgambit.Game_NewPlayer(*args)

    def GetInfoset(*args):
        """GetInfoset(self, int iset) -> GameInfoset"""
        return _libgambit.Game_GetInfoset(*args)

    def NumInfosets(*args):
        """NumInfosets(self) -> Gambit::Array<(int)>"""
        return _libgambit.Game_NumInfosets(*args)

    def GetAction(*args):
        """GetAction(self, int act) -> GameAction"""
        return _libgambit.Game_GetAction(*args)

    def NumOutcomes(*args):
        """NumOutcomes(self) -> int"""
        return _libgambit.Game_NumOutcomes(*args)

    def GetOutcome(*args):
        """GetOutcome(self, int index) -> GameOutcome"""
        return _libgambit.Game_GetOutcome(*args)

    def NewOutcome(*args):
        """NewOutcome(self) -> GameOutcome"""
        return _libgambit.Game_NewOutcome(*args)

    def DeleteOutcome(*args):
        """DeleteOutcome(self, GameOutcome ?)"""
        return _libgambit.Game_DeleteOutcome(*args)

    def GetRoot(*args):
        """GetRoot(self) -> GameNode"""
        return _libgambit.Game_GetRoot(*args)

    def NumNodes(*args):
        """NumNodes(self) -> int"""
        return _libgambit.Game_NumNodes(*args)

    def efg_file(*args):
        """efg_file(self, void ?) -> string"""
        return _libgambit.Game_efg_file(*args)

    def nfg_file(*args):
        """nfg_file(self, void ?) -> string"""
        return _libgambit.Game_nfg_file(*args)

    def NewMixedStrategyDouble(*args):
        """NewMixedStrategyDouble(self, void ?) -> MixedStrategyDouble"""
        return _libgambit.Game_NewMixedStrategyDouble(*args)

    def NewMixedStrategyRational(*args):
        """NewMixedStrategyRational(self, void ?) -> MixedStrategyRational"""
        return _libgambit.Game_NewMixedStrategyRational(*args)

    def NewMixedBehavDouble(*args):
        """NewMixedBehavDouble(self, void ?) -> MixedBehavDouble"""
        return _libgambit.Game_NewMixedBehavDouble(*args)

    def NewMixedBehavRational(*args):
        """NewMixedBehavRational(self, void ?) -> MixedBehavRational"""
        return _libgambit.Game_NewMixedBehavRational(*args)

    def IsValid(*args):
        """IsValid(self) -> bool"""
        return _libgambit.Game_IsValid(*args)

    def Invalidate(*args):
        """Invalidate(self)"""
        return _libgambit.Game_Invalidate(*args)

    def IncRef(*args):
        """IncRef(self)"""
        return _libgambit.Game_IncRef(*args)

    def DecRef(*args):
        """DecRef(self)"""
        return _libgambit.Game_DecRef(*args)

    def RefCount(*args):
        """RefCount(self) -> int"""
        return _libgambit.Game_RefCount(*args)

Game_swigregister = _libgambit.Game_swigregister
Game_swigregister(Game)


def ReadGameString(*args):
  """ReadGameString(string p_string) -> Game"""
  return _libgambit.ReadGameString(*args)
def ReadGame(x):
  if isinstance(x, str):
    try:
      return ReadGameString(x)
    except RuntimeError:
      pass

    try:
      return ReadGameString(file(x).read())
    except:
      raise RuntimeError

  return ReadGameString(x.read())

class MixedStrategyDouble(VectorDouble):
    """Proxy of C++ MixedStrategyDouble class"""
    __swig_setmethods__ = {}
    for _s in [VectorDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedStrategyDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedStrategyDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, StrategySupport ?) -> MixedStrategyDouble
        __init__(self, MixedBehavDouble ?) -> MixedStrategyDouble
        """
        this = _libgambit.new_MixedStrategyDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args):
        """__eq__(self, MixedStrategyDouble p_profile) -> bool"""
        return _libgambit.MixedStrategyDouble___eq__(*args)

    def __ne__(*args):
        """__ne__(self, MixedStrategyDouble p_profile) -> bool"""
        return _libgambit.MixedStrategyDouble___ne__(*args)

    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.MixedStrategyDouble_GetGame(*args)

    def GetSupport(*args):
        """GetSupport(self) -> StrategySupport"""
        return _libgambit.MixedStrategyDouble_GetSupport(*args)

    def SetCentroid(*args):
        """SetCentroid(self)"""
        return _libgambit.MixedStrategyDouble_SetCentroid(*args)

    def MixedProfileLength(*args):
        """MixedProfileLength(self) -> int"""
        return _libgambit.MixedStrategyDouble_MixedProfileLength(*args)

    def ToFullSupport(*args):
        """ToFullSupport(self) -> MixedStrategyDouble"""
        return _libgambit.MixedStrategyDouble_ToFullSupport(*args)

    def GetPayoff(*args):
        """
        GetPayoff(self, int pl) -> double
        GetPayoff(self, GamePlayer p_player) -> double
        """
        return _libgambit.MixedStrategyDouble_GetPayoff(*args)

    def GetPayoffDeriv(*args):
        """
        GetPayoffDeriv(self, int pl, GameStrategy ?) -> double
        GetPayoffDeriv(self, int pl, GameStrategy ?, GameStrategy ?) -> double
        """
        return _libgambit.MixedStrategyDouble_GetPayoffDeriv(*args)

    def GetStrategyValue(*args):
        """GetStrategyValue(self, GameStrategy p_strategy) -> double"""
        return _libgambit.MixedStrategyDouble_GetStrategyValue(*args)

    def GetLiapValue(*args):
        """GetLiapValue(self) -> double"""
        return _libgambit.MixedStrategyDouble_GetLiapValue(*args)

    def behavior(*args):
        """behavior(self) -> MixedBehavDouble"""
        return _libgambit.MixedStrategyDouble_behavior(*args)

    def __len__(*args):
        """__len__(self) -> int"""
        return _libgambit.MixedStrategyDouble___len__(*args)

    def __getitem__(*args):
        """
        __getitem__(self, int i) -> double
        __getitem__(self, GameStrategy s) -> double
        """
        return _libgambit.MixedStrategyDouble___getitem__(*args)

    def __setitem__(*args):
        """
        __setitem__(self, int i, double value)
        __setitem__(self, GameStrategy s, double value)
        """
        return _libgambit.MixedStrategyDouble___setitem__(*args)

    def __repr__(self):
      return "Mixed strategy profile on '%s': [%s]" % \
             (self.GetGame().GetTitle(),
       ", ".join([ str(self[i]) for i in xrange(len(self)) ]))	

    def __str__(self):   return repr(self)

    __swig_destroy__ = _libgambit.delete_MixedStrategyDouble
    __del__ = lambda self : None;
MixedStrategyDouble_swigregister = _libgambit.MixedStrategyDouble_swigregister
MixedStrategyDouble_swigregister(MixedStrategyDouble)

class MixedStrategyRational(VectorRational):
    """Proxy of C++ MixedStrategyRational class"""
    __swig_setmethods__ = {}
    for _s in [VectorRational]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedStrategyRational, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorRational]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedStrategyRational, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, StrategySupport ?) -> MixedStrategyRational
        __init__(self, MixedBehavRational ?) -> MixedStrategyRational
        """
        this = _libgambit.new_MixedStrategyRational(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args):
        """__eq__(self, MixedStrategyRational p_profile) -> bool"""
        return _libgambit.MixedStrategyRational___eq__(*args)

    def __ne__(*args):
        """__ne__(self, MixedStrategyRational p_profile) -> bool"""
        return _libgambit.MixedStrategyRational___ne__(*args)

    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.MixedStrategyRational_GetGame(*args)

    def GetSupport(*args):
        """GetSupport(self) -> StrategySupport"""
        return _libgambit.MixedStrategyRational_GetSupport(*args)

    def SetCentroid(*args):
        """SetCentroid(self)"""
        return _libgambit.MixedStrategyRational_SetCentroid(*args)

    def MixedProfileLength(*args):
        """MixedProfileLength(self) -> int"""
        return _libgambit.MixedStrategyRational_MixedProfileLength(*args)

    def ToFullSupport(*args):
        """ToFullSupport(self) -> MixedStrategyRational"""
        return _libgambit.MixedStrategyRational_ToFullSupport(*args)

    def GetPayoff(*args):
        """
        GetPayoff(self, int pl) -> Rational
        GetPayoff(self, GamePlayer p_player) -> Rational
        """
        return _libgambit.MixedStrategyRational_GetPayoff(*args)

    def GetPayoffDeriv(*args):
        """
        GetPayoffDeriv(self, int pl, GameStrategy ?) -> Rational
        GetPayoffDeriv(self, int pl, GameStrategy ?, GameStrategy ?) -> Rational
        """
        return _libgambit.MixedStrategyRational_GetPayoffDeriv(*args)

    def GetStrategyValue(*args):
        """GetStrategyValue(self, GameStrategy p_strategy) -> Rational"""
        return _libgambit.MixedStrategyRational_GetStrategyValue(*args)

    def GetLiapValue(*args):
        """GetLiapValue(self) -> Rational"""
        return _libgambit.MixedStrategyRational_GetLiapValue(*args)

    def behavior(*args):
        """behavior(self) -> MixedBehavRational"""
        return _libgambit.MixedStrategyRational_behavior(*args)

    def __len__(*args):
        """__len__(self) -> int"""
        return _libgambit.MixedStrategyRational___len__(*args)

    def __getitem__(*args):
        """
        __getitem__(self, int i) -> Rational
        __getitem__(self, GameStrategy s) -> Rational
        """
        return _libgambit.MixedStrategyRational___getitem__(*args)

    def __setitem__(*args):
        """
        __setitem__(self, int i, Rational value)
        __setitem__(self, GameStrategy s, Rational value)
        """
        return _libgambit.MixedStrategyRational___setitem__(*args)

    def __repr__(self):
      return "Mixed strategy profile on '%s': [%s]" % \
             (self.GetGame().GetTitle(),
       ", ".join([ str(self[i]) for i in xrange(len(self)) ]))	

    def __str__(self):   return repr(self)

    __swig_destroy__ = _libgambit.delete_MixedStrategyRational
    __del__ = lambda self : None;
MixedStrategyRational_swigregister = _libgambit.MixedStrategyRational_swigregister
MixedStrategyRational_swigregister(MixedStrategyRational)

class SupportStrategyIterator(_object):
    """Proxy of C++ SupportStrategyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SupportStrategyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SupportStrategyIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Gambit::Array<(Gambit::GameStrategy)> p_support) -> SupportStrategyIterator"""
        this = _libgambit.new_SupportStrategyIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def plusplus(*args):
        """
        plusplus(self)
        plusplus(self, int ?)
        """
        return _libgambit.SupportStrategyIterator_plusplus(*args)

    def AtEnd(*args):
        """AtEnd(self) -> bool"""
        return _libgambit.SupportStrategyIterator_AtEnd(*args)

    def GetIndex(*args):
        """GetIndex(self) -> int"""
        return _libgambit.SupportStrategyIterator_GetIndex(*args)

    def __ref__(*args):
        """__ref__(self) -> GameStrategy"""
        return _libgambit.SupportStrategyIterator___ref__(*args)

    def __deref__(*args):
        """__deref__(self) -> GameStrategy"""
        return _libgambit.SupportStrategyIterator___deref__(*args)

    def __iter__(self): return self
    def next(self):
      if self.AtEnd(): raise StopIteration
      value = self.__deref__()
      self.plusplus()       
      return value

    __swig_destroy__ = _libgambit.delete_SupportStrategyIterator
    __del__ = lambda self : None;
    def GetLabel(*args):
        """GetLabel(self) -> string"""
        return _libgambit.SupportStrategyIterator_GetLabel(*args)

    def SetLabel(*args):
        """SetLabel(self, string p_label)"""
        return _libgambit.SupportStrategyIterator_SetLabel(*args)

    def GetPlayer(*args):
        """GetPlayer(self) -> GamePlayer"""
        return _libgambit.SupportStrategyIterator_GetPlayer(*args)

    def GetNumber(*args):
        """GetNumber(self) -> int"""
        return _libgambit.SupportStrategyIterator_GetNumber(*args)

    def GetId(*args):
        """GetId(self) -> int"""
        return _libgambit.SupportStrategyIterator_GetId(*args)

    def DeleteStrategy(*args):
        """DeleteStrategy(self)"""
        return _libgambit.SupportStrategyIterator_DeleteStrategy(*args)

    def IsValid(*args):
        """IsValid(self) -> bool"""
        return _libgambit.SupportStrategyIterator_IsValid(*args)

    def Invalidate(*args):
        """Invalidate(self)"""
        return _libgambit.SupportStrategyIterator_Invalidate(*args)

    def IncRef(*args):
        """IncRef(self)"""
        return _libgambit.SupportStrategyIterator_IncRef(*args)

    def DecRef(*args):
        """DecRef(self)"""
        return _libgambit.SupportStrategyIterator_DecRef(*args)

    def RefCount(*args):
        """RefCount(self) -> int"""
        return _libgambit.SupportStrategyIterator_RefCount(*args)

SupportStrategyIterator_swigregister = _libgambit.SupportStrategyIterator_swigregister
SupportStrategyIterator_swigregister(SupportStrategyIterator)

class StrategySupport(_object):
    """Proxy of C++ StrategySupport class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrategySupport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrategySupport, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Game ?) -> StrategySupport"""
        this = _libgambit.new_StrategySupport(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args):
        """__eq__(self, StrategySupport p_support) -> bool"""
        return _libgambit.StrategySupport___eq__(*args)

    def __ne__(*args):
        """__ne__(self, StrategySupport p_support) -> bool"""
        return _libgambit.StrategySupport___ne__(*args)

    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.StrategySupport_GetGame(*args)

    def NumStrategies(*args):
        """
        NumStrategies(self, int pl) -> int
        NumStrategies(self) -> Gambit::Array<(int)>
        """
        return _libgambit.StrategySupport_NumStrategies(*args)

    def MixedProfileLength(*args):
        """MixedProfileLength(self) -> int"""
        return _libgambit.StrategySupport_MixedProfileLength(*args)

    def GetStrategy(*args):
        """GetStrategy(self, int pl, int st) -> GameStrategy"""
        return _libgambit.StrategySupport_GetStrategy(*args)

    def Players(*args):
        """Players(self) -> GamePlayerIterator"""
        return _libgambit.StrategySupport_Players(*args)

    def Strategies(*args):
        """Strategies(self, GamePlayer p_player) -> SupportStrategyIterator"""
        return _libgambit.StrategySupport_Strategies(*args)

    def GetIndex(*args):
        """GetIndex(self, GameStrategy s) -> int"""
        return _libgambit.StrategySupport_GetIndex(*args)

    def Contains(*args):
        """Contains(self, GameStrategy s) -> bool"""
        return _libgambit.StrategySupport_Contains(*args)

    def IsSubsetOf(*args):
        """IsSubsetOf(self, StrategySupport ?) -> bool"""
        return _libgambit.StrategySupport_IsSubsetOf(*args)

    def AddStrategy(*args):
        """AddStrategy(self, GameStrategy ?)"""
        return _libgambit.StrategySupport_AddStrategy(*args)

    def RemoveStrategy(*args):
        """RemoveStrategy(self, GameStrategy ?) -> bool"""
        return _libgambit.StrategySupport_RemoveStrategy(*args)

    def Dominates(*args):
        """Dominates(self, GameStrategy s, GameStrategy t, bool p_strict) -> bool"""
        return _libgambit.StrategySupport_Dominates(*args)

    def IsDominated(*args):
        """
        IsDominated(self, GameStrategy s, bool p_strict, bool p_external=False) -> bool
        IsDominated(self, GameStrategy s, bool p_strict) -> bool
        """
        return _libgambit.StrategySupport_IsDominated(*args)

    def Undominated(*args):
        """
        Undominated(self, bool p_strict, bool p_external=False) -> StrategySupport
        Undominated(self, bool p_strict) -> StrategySupport
        Undominated(self, bool strong, Gambit::Array<(int)> players) -> StrategySupport
        """
        return _libgambit.StrategySupport_Undominated(*args)

    def Overwhelms(*args):
        """Overwhelms(self, GameStrategy s, GameStrategy t, bool p_strict) -> bool"""
        return _libgambit.StrategySupport_Overwhelms(*args)

    def NewMixedStrategyDouble(*args):
        """NewMixedStrategyDouble(self, void ?) -> MixedStrategyDouble"""
        return _libgambit.StrategySupport_NewMixedStrategyDouble(*args)

    __swig_destroy__ = _libgambit.delete_StrategySupport
    __del__ = lambda self : None;
StrategySupport_swigregister = _libgambit.StrategySupport_swigregister
StrategySupport_swigregister(StrategySupport)

class MixedBehavDouble(DVectorDouble):
    """Proxy of C++ MixedBehavDouble class"""
    __swig_setmethods__ = {}
    for _s in [DVectorDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedBehavDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [DVectorDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedBehavDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, BehavSupport ?) -> MixedBehavDouble
        __init__(self, MixedBehavDouble ?) -> MixedBehavDouble
        __init__(self, MixedStrategyDouble ?) -> MixedBehavDouble
        """
        this = _libgambit.new_MixedBehavDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_MixedBehavDouble
    __del__ = lambda self : None;
    def __eq__(*args):
        """
        __eq__(self, MixedBehavDouble ?) -> bool
        __eq__(self, DVectorDouble x) -> bool
        """
        return _libgambit.MixedBehavDouble___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, MixedBehavDouble x) -> bool
        __ne__(self, DVectorDouble x) -> bool
        """
        return _libgambit.MixedBehavDouble___ne__(*args)

    def __call__(*args):
        """
        __call__(self, GameAction p_action) -> double
        __call__(self, GameAction p_action) -> double
        __call__(self, int a, int b, int c) -> double
        __call__(self, int a, int b, int c) -> double
        """
        return _libgambit.MixedBehavDouble___call__(*args)

    def __iadd__(*args):
        """
        __iadd__(self, MixedBehavDouble x) -> MixedBehavDouble
        __iadd__(self, DVectorDouble x) -> MixedBehavDouble
        """
        return _libgambit.MixedBehavDouble___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, MixedBehavDouble x) -> MixedBehavDouble"""
        return _libgambit.MixedBehavDouble___isub__(*args)

    def __imul__(*args):
        """__imul__(self, double x) -> MixedBehavDouble"""
        return _libgambit.MixedBehavDouble___imul__(*args)

    def Invalidate(*args):
        """Invalidate(self)"""
        return _libgambit.MixedBehavDouble_Invalidate(*args)

    def Centroid(*args):
        """Centroid(self)"""
        return _libgambit.MixedBehavDouble_Centroid(*args)

    def Length(*args):
        """Length(self) -> int"""
        return _libgambit.MixedBehavDouble_Length(*args)

    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.MixedBehavDouble_GetGame(*args)

    def GetSupport(*args):
        """GetSupport(self) -> BehavSupport"""
        return _libgambit.MixedBehavDouble_GetSupport(*args)

    def IsDefinedAt(*args):
        """IsDefinedAt(self, GameInfoset p_infoset) -> bool"""
        return _libgambit.MixedBehavDouble_IsDefinedAt(*args)

    def GetPayoff(*args):
        """GetPayoff(self, int p_player) -> double"""
        return _libgambit.MixedBehavDouble_GetPayoff(*args)

    def GetLiapValue(*args):
        """
        GetLiapValue(self, bool p_definedOnly=False) -> double
        GetLiapValue(self) -> double
        """
        return _libgambit.MixedBehavDouble_GetLiapValue(*args)

    def GetRealizProb(*args):
        """GetRealizProb(self, GameNode node) -> double"""
        return _libgambit.MixedBehavDouble_GetRealizProb(*args)

    def GetBeliefProb(*args):
        """GetBeliefProb(self, GameNode node) -> double"""
        return _libgambit.MixedBehavDouble_GetBeliefProb(*args)

    def GetNodeValue(*args):
        """GetNodeValue(self, GameNode node) -> VectorDouble"""
        return _libgambit.MixedBehavDouble_GetNodeValue(*args)

    def GetInfosetProb(*args):
        """GetInfosetProb(self, GameInfoset iset) -> double"""
        return _libgambit.MixedBehavDouble_GetInfosetProb(*args)

    def GetInfosetValue(*args):
        """GetInfosetValue(self, GameInfoset iset) -> double"""
        return _libgambit.MixedBehavDouble_GetInfosetValue(*args)

    def GetActionProb(*args):
        """GetActionProb(self, GameAction act) -> double"""
        return _libgambit.MixedBehavDouble_GetActionProb(*args)

    def GetActionValue(*args):
        """GetActionValue(self, GameAction act) -> double"""
        return _libgambit.MixedBehavDouble_GetActionValue(*args)

    def GetRegret(*args):
        """GetRegret(self, GameAction act) -> double"""
        return _libgambit.MixedBehavDouble_GetRegret(*args)

    def DiffActionValue(*args):
        """DiffActionValue(self, GameAction action, GameAction oppAction) -> double"""
        return _libgambit.MixedBehavDouble_DiffActionValue(*args)

    def DiffRealizProb(*args):
        """DiffRealizProb(self, GameNode node, GameAction oppAction) -> double"""
        return _libgambit.MixedBehavDouble_DiffRealizProb(*args)

    def DiffNodeValue(*args):
        """DiffNodeValue(self, GameNode node, GamePlayer player, GameAction oppAction) -> double"""
        return _libgambit.MixedBehavDouble_DiffNodeValue(*args)

    def __len__(*args):
        """__len__(self) -> int"""
        return _libgambit.MixedBehavDouble___len__(*args)

    def __getitem__(*args):
        """
        __getitem__(self, int i) -> double
        __getitem__(self, GameAction s) -> double
        """
        return _libgambit.MixedBehavDouble___getitem__(*args)

    def __setitem__(*args):
        """
        __setitem__(self, int i, double value)
        __setitem__(self, GameAction s, double value)
        """
        return _libgambit.MixedBehavDouble___setitem__(*args)

    def __repr__(self):
      return "Behavior strategy profile on '%s': [%s]" % \
             (self.GetGame().GetTitle(),
       ", ".join([ str(self[i]) for i in xrange(len(self)) ]))	

    def __str__(self):   return repr(self)

MixedBehavDouble_swigregister = _libgambit.MixedBehavDouble_swigregister
MixedBehavDouble_swigregister(MixedBehavDouble)

class MixedBehavRational(DVectorRational):
    """Proxy of C++ MixedBehavRational class"""
    __swig_setmethods__ = {}
    for _s in [DVectorRational]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedBehavRational, name, value)
    __swig_getmethods__ = {}
    for _s in [DVectorRational]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedBehavRational, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, BehavSupport ?) -> MixedBehavRational
        __init__(self, MixedBehavRational ?) -> MixedBehavRational
        __init__(self, MixedStrategyRational ?) -> MixedBehavRational
        """
        this = _libgambit.new_MixedBehavRational(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_MixedBehavRational
    __del__ = lambda self : None;
    def __eq__(*args):
        """
        __eq__(self, MixedBehavRational ?) -> bool
        __eq__(self, DVectorRational x) -> bool
        """
        return _libgambit.MixedBehavRational___eq__(*args)

    def __ne__(*args):
        """
        __ne__(self, MixedBehavRational x) -> bool
        __ne__(self, DVectorRational x) -> bool
        """
        return _libgambit.MixedBehavRational___ne__(*args)

    def __call__(*args):
        """
        __call__(self, GameAction p_action) -> Rational
        __call__(self, GameAction p_action) -> Rational
        __call__(self, int a, int b, int c) -> Rational
        __call__(self, int a, int b, int c) -> Rational
        """
        return _libgambit.MixedBehavRational___call__(*args)

    def __iadd__(*args):
        """
        __iadd__(self, MixedBehavRational x) -> MixedBehavRational
        __iadd__(self, DVectorRational x) -> MixedBehavRational
        """
        return _libgambit.MixedBehavRational___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, MixedBehavRational x) -> MixedBehavRational"""
        return _libgambit.MixedBehavRational___isub__(*args)

    def __imul__(*args):
        """__imul__(self, Rational x) -> MixedBehavRational"""
        return _libgambit.MixedBehavRational___imul__(*args)

    def Invalidate(*args):
        """Invalidate(self)"""
        return _libgambit.MixedBehavRational_Invalidate(*args)

    def Centroid(*args):
        """Centroid(self)"""
        return _libgambit.MixedBehavRational_Centroid(*args)

    def Length(*args):
        """Length(self) -> int"""
        return _libgambit.MixedBehavRational_Length(*args)

    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.MixedBehavRational_GetGame(*args)

    def GetSupport(*args):
        """GetSupport(self) -> BehavSupport"""
        return _libgambit.MixedBehavRational_GetSupport(*args)

    def IsDefinedAt(*args):
        """IsDefinedAt(self, GameInfoset p_infoset) -> bool"""
        return _libgambit.MixedBehavRational_IsDefinedAt(*args)

    def GetPayoff(*args):
        """GetPayoff(self, int p_player) -> Rational"""
        return _libgambit.MixedBehavRational_GetPayoff(*args)

    def GetLiapValue(*args):
        """
        GetLiapValue(self, bool p_definedOnly=False) -> Rational
        GetLiapValue(self) -> Rational
        """
        return _libgambit.MixedBehavRational_GetLiapValue(*args)

    def GetRealizProb(*args):
        """GetRealizProb(self, GameNode node) -> Rational"""
        return _libgambit.MixedBehavRational_GetRealizProb(*args)

    def GetBeliefProb(*args):
        """GetBeliefProb(self, GameNode node) -> Rational"""
        return _libgambit.MixedBehavRational_GetBeliefProb(*args)

    def GetNodeValue(*args):
        """GetNodeValue(self, GameNode node) -> VectorRational"""
        return _libgambit.MixedBehavRational_GetNodeValue(*args)

    def GetInfosetProb(*args):
        """GetInfosetProb(self, GameInfoset iset) -> Rational"""
        return _libgambit.MixedBehavRational_GetInfosetProb(*args)

    def GetInfosetValue(*args):
        """GetInfosetValue(self, GameInfoset iset) -> Rational"""
        return _libgambit.MixedBehavRational_GetInfosetValue(*args)

    def GetActionProb(*args):
        """GetActionProb(self, GameAction act) -> Rational"""
        return _libgambit.MixedBehavRational_GetActionProb(*args)

    def GetActionValue(*args):
        """GetActionValue(self, GameAction act) -> Rational"""
        return _libgambit.MixedBehavRational_GetActionValue(*args)

    def GetRegret(*args):
        """GetRegret(self, GameAction act) -> Rational"""
        return _libgambit.MixedBehavRational_GetRegret(*args)

    def DiffActionValue(*args):
        """DiffActionValue(self, GameAction action, GameAction oppAction) -> Rational"""
        return _libgambit.MixedBehavRational_DiffActionValue(*args)

    def DiffRealizProb(*args):
        """DiffRealizProb(self, GameNode node, GameAction oppAction) -> Rational"""
        return _libgambit.MixedBehavRational_DiffRealizProb(*args)

    def DiffNodeValue(*args):
        """DiffNodeValue(self, GameNode node, GamePlayer player, GameAction oppAction) -> Rational"""
        return _libgambit.MixedBehavRational_DiffNodeValue(*args)

    def __len__(*args):
        """__len__(self) -> int"""
        return _libgambit.MixedBehavRational___len__(*args)

    def __getitem__(*args):
        """
        __getitem__(self, int i) -> Rational
        __getitem__(self, GameAction s) -> Rational
        """
        return _libgambit.MixedBehavRational___getitem__(*args)

    def __setitem__(*args):
        """
        __setitem__(self, int i, Rational value)
        __setitem__(self, GameAction s, Rational value)
        """
        return _libgambit.MixedBehavRational___setitem__(*args)

    def __repr__(self):
      return "Behavior strategy profile on '%s': [%s]" % \
             (self.GetGame().GetTitle(),
       ", ".join([ str(self[i]) for i in xrange(len(self)) ]))	

    def __str__(self):   return repr(self)

MixedBehavRational_swigregister = _libgambit.MixedBehavRational_swigregister
MixedBehavRational_swigregister(MixedBehavRational)

class BehavSupport(_object):
    """Proxy of C++ BehavSupport class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BehavSupport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BehavSupport, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Game ?) -> BehavSupport"""
        this = _libgambit.new_BehavSupport(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libgambit.delete_BehavSupport
    __del__ = lambda self : None;
    def __eq__(*args):
        """__eq__(self, BehavSupport ?) -> bool"""
        return _libgambit.BehavSupport___eq__(*args)

    def __ne__(*args):
        """__ne__(self, BehavSupport p_support) -> bool"""
        return _libgambit.BehavSupport___ne__(*args)

    def GetGame(*args):
        """GetGame(self) -> Game"""
        return _libgambit.BehavSupport_GetGame(*args)

    def NumActions(*args):
        """
        NumActions(self, GameInfoset p_infoset) -> int
        NumActions(self, int pl, int iset) -> int
        NumActions(self) -> Gambit::PVector<(int)>
        """
        return _libgambit.BehavSupport_NumActions(*args)

    def GetAction(*args):
        """
        GetAction(self, GameInfoset p_infoset, int p_act) -> GameAction
        GetAction(self, int pl, int iset, int act) -> GameAction
        """
        return _libgambit.BehavSupport_GetAction(*args)

    def GetIndex(*args):
        """GetIndex(self, GameAction ?) -> int"""
        return _libgambit.BehavSupport_GetIndex(*args)

    def Contains(*args):
        """Contains(self, GameAction p_action) -> bool"""
        return _libgambit.BehavSupport_Contains(*args)

    def NumDegreesOfFreedom(*args):
        """NumDegreesOfFreedom(self) -> int"""
        return _libgambit.BehavSupport_NumDegreesOfFreedom(*args)

    def HasActiveActionAt(*args):
        """HasActiveActionAt(self, GameInfoset ?) -> bool"""
        return _libgambit.BehavSupport_HasActiveActionAt(*args)

    def HasActiveActionsAtAllInfosets(*args):
        """HasActiveActionsAtAllInfosets(self) -> bool"""
        return _libgambit.BehavSupport_HasActiveActionsAtAllInfosets(*args)

    def NumSequences(*args):
        """
        NumSequences(self) -> int
        NumSequences(self, int pl) -> int
        """
        return _libgambit.BehavSupport_NumSequences(*args)

    def NumActiveMembers(*args):
        """NumActiveMembers(self, GameInfoset ?) -> int"""
        return _libgambit.BehavSupport_NumActiveMembers(*args)

    def IsActive(*args):
        """
        IsActive(self, GameInfoset ?) -> bool
        IsActive(self, GameNode ?) -> bool
        """
        return _libgambit.BehavSupport_IsActive(*args)

    def HasActiveActionsAtActiveInfosets(*args):
        """HasActiveActionsAtActiveInfosets(self) -> bool"""
        return _libgambit.BehavSupport_HasActiveActionsAtActiveInfosets(*args)

    def HasActiveActionsAtActiveInfosetsAndNoOthers(*args):
        """HasActiveActionsAtActiveInfosetsAndNoOthers(self) -> bool"""
        return _libgambit.BehavSupport_HasActiveActionsAtActiveInfosetsAndNoOthers(*args)

    def AddAction(*args):
        """AddAction(self, GameAction ?)"""
        return _libgambit.BehavSupport_AddAction(*args)

    def RemoveAction(*args):
        """
        RemoveAction(self, GameAction ?) -> bool
        RemoveAction(self, GameAction ?, List<(Gambit::GameInfoset)> ?) -> bool
        """
        return _libgambit.BehavSupport_RemoveAction(*args)

    def ReachableNonterminalNodes(*args):
        """
        ReachableNonterminalNodes(self) -> List<(Gambit::GameNode)>
        ReachableNonterminalNodes(self, GameNode ?) -> List<(Gambit::GameNode)>
        """
        return _libgambit.BehavSupport_ReachableNonterminalNodes(*args)

    def ReachableInfosets(*args):
        """
        ReachableInfosets(self, GameNode p_node, Gambit::PVector<(int)> p_reachable)
        ReachableInfosets(self, GamePlayer ?) -> List<(Gambit::GameInfoset)>
        """
        return _libgambit.BehavSupport_ReachableInfosets(*args)

    def MayReach(*args):
        """
        MayReach(self, GameNode ?) -> bool
        MayReach(self, GameInfoset ?) -> bool
        """
        return _libgambit.BehavSupport_MayReach(*args)

    def ReachableMembers(*args):
        """ReachableMembers(self, GameInfoset ?) -> List<(Gambit::GameNode)>"""
        return _libgambit.BehavSupport_ReachableMembers(*args)

    def Dominates(*args):
        """Dominates(self, GameAction a, GameAction b, bool p_strict, bool p_conditional) -> bool"""
        return _libgambit.BehavSupport_Dominates(*args)

    def IsDominated(*args):
        """IsDominated(self, GameAction a, bool p_strict, bool p_conditional) -> bool"""
        return _libgambit.BehavSupport_IsDominated(*args)

    def Undominated(*args):
        """
        Undominated(self, bool p_strict, bool p_conditional, Gambit::Array<(int)> players, 
            ostream ?) -> BehavSupport
        """
        return _libgambit.BehavSupport_Undominated(*args)

BehavSupport_swigregister = _libgambit.BehavSupport_swigregister
BehavSupport_swigregister(BehavSupport)

class BehavIterator(_object):
    """Proxy of C++ BehavIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BehavIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BehavIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, BehavSupport ?) -> BehavIterator
        __init__(self, BehavSupport ?, GameAction ?) -> BehavIterator
        """
        this = _libgambit.new_BehavIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def plusplus(*args):
        """
        plusplus(self)
        plusplus(self, int ?)
        """
        return _libgambit.BehavIterator_plusplus(*args)

    def AtEnd(*args):
        """AtEnd(self) -> bool"""
        return _libgambit.BehavIterator_AtEnd(*args)

    def __ref__(*args):
        """__ref__(self) -> PureBehavProfile"""
        return _libgambit.BehavIterator___ref__(*args)

    def __iter__(self): return self
    def next(self):
      if self.AtEnd(): raise StopIteration
      value = self.__ref__()
      self.plusplus()       
      return value

    __swig_destroy__ = _libgambit.delete_BehavIterator
    __del__ = lambda self : None;
BehavIterator_swigregister = _libgambit.BehavIterator_swigregister
BehavIterator_swigregister(BehavIterator)

class StrategyIterator(_object):
    """Proxy of C++ StrategyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrategyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrategyIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, StrategySupport ?) -> StrategyIterator
        __init__(self, StrategySupport s, int pl, int st) -> StrategyIterator
        __init__(self, StrategySupport ?, GameStrategy ?) -> StrategyIterator
        __init__(self, StrategySupport s, int pl1, int st1, int pl2, int st2) -> StrategyIterator
        """
        this = _libgambit.new_StrategyIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def plusplus(*args):
        """
        plusplus(self)
        plusplus(self, int ?)
        """
        return _libgambit.StrategyIterator_plusplus(*args)

    def AtEnd(*args):
        """AtEnd(self) -> bool"""
        return _libgambit.StrategyIterator_AtEnd(*args)

    def __ref__(*args):
        """
        __ref__(self) -> PureStrategyProfile
        __ref__(self) -> PureStrategyProfile
        """
        return _libgambit.StrategyIterator___ref__(*args)

    def __iter__(self): return self
    def next(self):
      if self.AtEnd(): raise StopIteration
      value = self.__ref__()
      self.plusplus()       
      return value

    __swig_destroy__ = _libgambit.delete_StrategyIterator
    __del__ = lambda self : None;
StrategyIterator_swigregister = _libgambit.StrategyIterator_swigregister
StrategyIterator_swigregister(StrategyIterator)



