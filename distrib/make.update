#
# $Id$
#

# An update script/makefile combination to create/update GAMBIT components
# and automatically place them onto the primary GAMBIT ftp site.

# Usage: 
# make -f make.update TARGET=[gambit, src, guidoc, gcldoc, all] 
#                     SYSTYPE=[Linux, SunOS_5_6, HPUX, all] 
#                     GUI=[motif, xt, all] 
#
# This can be started on any of the hss machines and it will update the files
# on the appropriate platform using rsh.  Since the GUI argument is not 
# used for any target except gui, it may be left out in other cases.  However,
# to save a LOT of disk space and some time by avoiding recompiling all the
# on-gui common files, it is better to set GUI=motif if it is not used.

# Note that specifying 'all' for any of the parameters will attempt to build
# targets with the parameter set to each of its possible values succesively.
# This may produce some duplicate combinations if more than one of the 
# parameters is set to all.  Duplicate builds take very little time and are
# not a problem.  Thus, to rebuild ALL of the components the command would be:
# update SYSTYPE=all TARGET=all GUI=all

#
# Default machines for each platform 
#

#MACHINE_sun4      = dosh.hum.caltech.edu
#MACHINE_rs6000    = billandal.hum.caltech.edu
#MACHINE_HPUX      = jilt.hum.caltech.edu
MACHINE_SunOS_5_6 = koo.caltech.edu
MACHINE_Linux     = mill.caltech.edu
MACHINE_latex     = mill.caltech.edu

#
# Default values -- these must be specified on the command line.
#

SYSNAME   =  none
GUI       =  none
TARGET    =  none

#
# Distribution directory.
#

DISTRIBDIR = /home/mill/gambit/distrib96/distrib

all:
# Check which targets we are building, if all, build all
ifeq ($(TARGET),none)
	@make -f make.update error \
		ERRORNAME='Must specify a TARGET [gambit, gcl, src, guidoc, gcldoc]'
endif
	
ifeq ($(TARGET),all)
	@make  -f make.update TARGET=gambit SYSNAME=$(SYSNAME) GUI=$(GUI) 
	@make  -f make.update TARGET=gcl    SYSNAME=$(SYSNAME) GUI=none 
	@make  -f make.update TARGET=src    SYSNAME=Linux      GUI=none 
	@make  -f make.update TARGET=gcldoc SYSNAME=Linux      GUI=none 
	@make  -f make.update TARGET=guidoc SYSNAME=Linux      GUI=none 
endif

#
# Check GUI target options.
#

ifeq ($(TARGET),gambit)
# Check if a valid GUI type is specified for a gambit target.
ifeq ($(GUI),none)
	@make -f make.update error \
		ERRORNAME='Must specify a GUI type [motif, xt]'
endif
# Check which gui platforms to build.
ifeq ($(GUI),all)
	@make -f make.update TARGET=gambit SYSNAME=$(SYSNAME) GUI=motif 
	@make -f make.update TARGET=gambit SYSNAME=Linux      GUI=xt
endif
endif
# Check which SYSNAMEs to build on.
ifeq ($(SYSNAME),none)
	@make -f make.update error \
		ERRORNAME='Must specify a SYSNAME [Linux, SunOS_5_6, HPUX]'
endif
ifeq ($(SYSNAME),all)
	@make -f make.update TARGET=$(TARGET) SYSNAME=Linux     GUI=$(GUI)
	@make -f make.update TARGET=$(TARGET) SYSNAME=SunOS_5_6 GUI=$(GUI)
	#@make -f make.update TARGET=$(TARGET) SYSNAME=HPUX      GUI=$(GUI) 
endif

# Do the actual building.
ifneq ($(SYSNAME),all)
ifeq ($(TARGET),gambit)
	rsh $(MACHINE_$(SYSNAME)) "cd $(DISTRIBDIR); \
	make -f make.distr gambit SYSNAME=$(SYSNAME) GUI=$(GUI)"
endif
ifeq ($(TARGET),gcl)
	rsh $(MACHINE_$(SYSNAME)) "cd $(DISTRIBDIR); \
	make -f make.distr gcl SYSNAME=$(SYSNAME) GUI=$(GUI)"
endif
endif

ifeq ($(TARGET),src) # Build sources only on mill.
	rsh $(MACHINE_Linux) "cd $(DISTRIBDIR); make -f make.distr src"
endif

# FIXME! this is outdated.
ifeq ($(TARGET),gcldoc) # Build manuals only on mill.
	rsh $(MACHINE_latex) "cd /home/ironbark/gambit/distrib/manuals/gclman;\
				make"
endif

error:
	@echo $(ERRORNAME)
	@exit 1

