//
// FILE: efgcsum.imp -- Constant Sum Extensive Form Game Solution Module
//
// $Id$
//

#include "gwatch.h"
#include "gpvector.h"
#include "efgutils.h"

#include "efgcsum.h"

//-------------------------------------------------------------------------
//                    CSSeqFormModule<T>: Member functions
//-------------------------------------------------------------------------

template <class T> class CSSeqFormModule  {
private:
  const Efg &EF;
  const CSSeqFormParams &params;
  const EFSupport &support;
  gMatrix<T> *A;
  gVector<T> *b, *c;
  T maxpay, minpay;
  long npivots;
  double time;
  int ns1,ns2,ni1,ni2;
  gList<BFS<T> > List;
  gArray<gNumber> values;

  void FillTableau(const Node *, T ,int ,int , int ,int );

public:
  CSSeqFormModule(const EFSupport &, const gArray<gNumber> &v,
		  const CSSeqFormParams &p);
  virtual ~CSSeqFormModule();

  bool IsConstSum();
  
  int CSSeqForm(int dup = 0);

  void Make_Abc();
  
  int Add_BFS(const LPSolve<T> &B);
  long NumPivots(void) const;
  double Time(void) const;
  
  void GetProfile(gDPVector<T> &v, const BFS<T> &sol,
		  const Node *n, int s1,int s2) const;
  void GetSolutions(gList<BehavSolution> &) const;
};


template <class T>
CSSeqFormModule<T>::CSSeqFormModule(const EFSupport &S,
				    const gArray<gNumber> &v,
				    const CSSeqFormParams &p)
				    
  : EF(S.Game()), params(p), support(S), A(0), b(0), c(0), npivots(0), 
    ns1(S.NumSequences(1)), ns2(S.NumSequences(2)),
    ni1(EF.Players()[1]->NumInfosets()+1),  
    ni2(EF.Players()[2]->NumInfosets()+1), values(v)
{ }

template <class T> CSSeqFormModule<T>::~CSSeqFormModule()
{ if(A) delete A; if(b) delete b; if(c) delete c;}

template <class T> bool CSSeqFormModule<T>::IsConstSum()
{ 
  return EF.IsConstSum();
}

template <class T> void CSSeqFormModule<T>::Make_Abc()
{
  A = new gMatrix<T>(1,ns1+ni2,1,ns2+ni1);
  b = new gVector<T>(1,ns1+ni2);
  c = new gVector<T>(1,ns2+ni1);

  maxpay = (T)EF.MaxPayoff(values)+(T)1;
  minpay = (T)EF.MinPayoff(values)-(T)1;

  (*A) = (T)0;
  T prob = (T)1;
  FillTableau(EF.RootNode(),prob,1,1,0,0);
  (*A)(1,ns2+1) = -(T)1;
  (*A)(ns1+1,1) = (T)1;

  (*b) = (T)0;
  (*b)[ns1+1] = (T)1;

  (*c) = (T)0;
  (*c)[ns2+1] = -(T)1;

//  gout.SetWidth(1).SetPrec(1);
//  gout << "\nA";
//  A->Dump(gout);
//  gout << "\nb";
//  b->Dump(gout);
//  gout << "\nc";
//  c->Dump(gout);
}

template <class T> int CSSeqFormModule<T>::CSSeqForm(int /*dup*/)
{
  BFS<T> cbfs((T) 0);
  
  if (EF.NumPlayers() != 2 || !params.tracefile)   return 0;
  if(!IsConstSum()) return 0;
  Infoset *bad1, *bad2;
  if(!IsPerfectRecall(EF,bad1,bad2)) return 0;
  gWatch watch;
  
  List.Flush();
  
  Make_Abc();
  LPSolve<T> LP(*A,*b,*c,ni2,params.status);
  if(!LP.IsAborted()) 
    Add_BFS(LP); 
  
  npivots = LP.NumPivots();
  time = watch.Elapsed();
  return List.Length();
}


template <class T> int CSSeqFormModule<T>::Add_BFS(const LPSolve<T> &lp)
{
  BFS<T> cbfs((T) 0);
//  T value = (T)0;

  lp.OptBFS(cbfs);
//  value=cbfs(EF.NumStrats(1)+1)+maxpay;
//  cbfs.Dump(gout);
//  gout << "\nvalue =" << value << "\n\n";
  if (List.Contains(cbfs))  return 0;
//  if(params.trace >=2) (*params.tracefile) << "\nFound CBFS";
//  (*params.tracefile)  << "\nB = ";
//  B.Dump(*params.tracefile);
//  (*params.tracefile)  << "\ncbfs = ";
//  cbfs.Dump(*params.tracefile );
  List.Append(cbfs);
  
  return 1;
}



template <class T> void CSSeqFormModule<T>
::GetProfile(gDPVector<T> &v, const BFS<T> &sol,
	       const Node *n, int s1,int s2) const
{
  
  int i,pl,inf,snew;
  T eps = (T)0;
//  eps = tab->Epsilon();
//  gout << "\nv = " << v;
  if(n->GetInfoset()) {
    if(n->GetPlayer()->IsChance()) {
      for(i=1;i<=n->NumChildren();i++)
	GetProfile(v,sol,n->GetChild(i),s1,s2);
    }
    pl = n->GetPlayer()->GetNumber();
    inf= n->GetInfoset()->GetNumber();
//    gout << "\niset: (" << pl << "," << inf << ")"; 
    if(pl==2) {
      snew=1;
      for(i=1;i<inf;i++)
	snew+=n->GetPlayer()->Infosets()[i]->NumActions(); 
      for(i=1;i<=n->NumChildren();i++) {
	v(pl,inf,i) = (T)0;
//	gout << "\npl1 ";
//	gout << "\n  v = " << v;
	if(sol.IsDefined(s1)) {
	  if(sol(s1)>eps) {
	    if(sol.IsDefined(snew+i)) {
	      if(sol(snew+i)>eps)
		v(pl,inf,i) = sol(snew+i)/sol(s1);
//	      gout << "\nnum: " << s1 << " " << sol(s1) << " ";
//	      gout << "\nden: " << snew+i << " " << sol(snew+i) << " ";
//	      gout << "\n  v = " << v;
	    }
	  } 
	} 
	GetProfile(v,sol,n->GetChild(i),snew+i,s2);
      }
    }
    if(pl==1) {
      snew=1;
      for(i=1;i<inf;i++)
	snew+=n->GetPlayer()->Infosets()[i]->NumActions(); 
      for(i=1;i<=n->NumChildren();i++) {
	v(pl,inf,i) = (T)0;
//	gout << "\npl2 ";
//	gout << "\n  v = " << v;
	if(sol.IsDefined(-s2)) {
	  if(sol(-s2)>eps) {
	    if(sol.IsDefined(-(snew+i))) {
	      if(sol(-(snew+i))>eps)
		v(pl,inf,i) = sol(-(snew+i))/sol(-s2);
//	      gout << "\nnum: " << snew+i << " " << sol(-(snew+i)) << " ";
//	      gout << "\nden: " << s2 << " " << sol(-s2) << " ";
//	      gout << "\n  v = " << v;
	    }
	  } 
	} 
	GetProfile(v,sol,n->GetChild(i),s1,snew+i);
      }
    }
  }
}


template <class T> void CSSeqFormModule<T>
::FillTableau(const Node *n, T prob,int s1,int s2, int i1,int i2)
{
//  gout << "\ns1,s2,i1,i2: " << s1 << " " << s2  << " " << i1  << " " << i2;
//  gout << " prob = " << prob;
  int i,snew;
  if(n->GetOutcome()) {
//    (*A)(s1,s2) = (*A)(s1,s2) -
//       prob*(((OutcomeVector<T> &) *n->GetOutcome())[1]-minpay);
    gArray<gNumber> values(EF.Parameters()->Dmnsn());
    for (int j = 1; j <= values.Length(); values[j++] = gNumber(0));
    (*A)(s1,s2) = (*A)(s1,s2) +
       prob * (T) EF.Payoff(n->GetOutcome(), 1).Evaluate(values) - minpay;
  }
  if(n->GetInfoset()) {
    if(n->GetPlayer()->IsChance()) {
      for(i=1;i<=n->NumChildren();i++)
	FillTableau(n->GetChild(i),
		    prob*(T)EF.GetChanceProb(n->GetInfoset(), i),
		    s1,s2,i1,i2);
    }
    int pl = n->GetPlayer()->GetNumber();
    if(pl==1) {
      i1=n->GetInfoset()->GetNumber();
      snew=1;
      for(i=1;i<i1;i++)
	snew+=n->GetPlayer()->Infosets()[i]->NumActions();
      (*A)(s1,ns2+i1+1) = (T) +1;
      for(i=1;i<=n->NumChildren();i++) {
	(*A)(snew+i,ns2+i1+1) = (T) -1;
	FillTableau(n->GetChild(i),prob,snew+i,s2,i1,i2);
      }
    }
    if(pl==2) {
      i2=n->GetInfoset()->GetNumber();
      snew=1;
      for(i=1;i<i2;i++)
	snew+=n->GetPlayer()->Infosets()[i]->NumActions();
      (*A)(ns1+i2+1,s2) = (T) -1;
      for(i=1;i<=n->NumChildren();i++) {
	(*A)(ns1+i2+1,snew+i) = (T) +1;
	FillTableau(n->GetChild(i),prob,s1,snew+i,i1,i2);
      }
    }
  }
}

template <class T>
void CSSeqFormModule<T>::GetSolutions(gList<BehavSolution> &solutions) const
{
  solutions.Flush();

  int index;
  for (int i = 1; i <= List.Length(); i++)    {
    BehavProfile<T> profile(support, values);
    GetProfile(profile,List[i],EF.RootNode(),1,1);
    index = solutions.Append(BehavSolution(profile, EfgAlg_CSSEQFORM));
    solutions[index].SetIsNash(T_YES);
  }

}

template <class T> long CSSeqFormModule<T>::NumPivots(void) const
{
  return npivots;
}

template <class T> double CSSeqFormModule<T>::Time(void) const
{
  return time;
}



//-----------------------------------
// Interfacing to solve-by-subgame
//-----------------------------------

int _CSSeqForm(const EFSupport &, const gArray<gNumber> &, 
	       const CSSeqFormParams &,
	       gList<BehavSolution> &, int &npivots, double &time);

int CSSeqFormBySubgame::SolveSubgame(const Efg &/*E*/, const EFSupport &sup,
				     gList<BehavSolution> &solns)
{
  int npiv;
  double time;
  _CSSeqForm(sup, values, params, solns, npiv, time);
  npivots += npiv;
  return 1;
}

CSSeqFormBySubgame::CSSeqFormBySubgame(const EFSupport &S,
				       const gArray<gNumber> &v,
				       const CSSeqFormParams &p,
				       int max)
  : SubgameSolver(S, v, max), npivots(0), params(p), values(v)
{ }

CSSeqFormBySubgame::~CSSeqFormBySubgame()   { }


