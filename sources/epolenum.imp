//
// FILE: epolenum.imp -- Polynomial Nash Enum module for Extensive form games
//
// $Id$ 
//

#include "gwatch.h"
#include "efg.h"
#include "sfg.h"

#include "epolenum.h"
#include "quiksolv.h"
#include "odometer.h"

template <class T> class EfgPolEnumModule  {
private:
  T eps;
  const Efg &EF;
  const EFSupport &support;
  EfgPolEnumParams params;
  gSpace Space;
  term_order Lex;
  int num_vars;
  long count,nevals;
  double time;
  gList<BehavSolution> solutions;
  const Sfg SF;

  bool EqZero(T x) const;
  
  // p_i_j as a gPoly, with last prob in terms of previous probs
  gPoly<T> Prob(int i,int j,int k) const;

  // equation for when player i sets strat1 = strat2
  // with last probs for each player substituted out.  
//  gPoly<T> Equation(int i, int strat2, int strat2) const;

//  int SaveSolutions(const gList<gVector<gDouble> > &list);
public:
  EfgPolEnumModule(const EFSupport &, const EfgPolEnumParams &p,
	     const gArray<gNumber> &values);

  int EfgPolEnum(void);
  
  long NumEvals(void) const;
  double Time(void) const;
  
  EfgPolEnumParams &Parameters(void);
//   void SequenceForm(const Node *, gNumber,gArray<int>, gArray<int>);

//  const gList<BehavSolution> &GetSolutions(void) const;
};

//-------------------------------------------------------------------------
//                    EfgPolEnumModule<T>: Member functions
//-------------------------------------------------------------------------

template <class T>
EfgPolEnumModule<T>::EfgPolEnumModule(const EFSupport &S, const EfgPolEnumParams &p,
		 const gArray<gNumber> &v)
  : EF(S.Game()), support(S), params(p), 
    Space(support.TotalNumSequences()-EF.TotalNumInfosets()-EF.NumPlayers()), 
    Lex(&Space, &lex), 
    num_vars(support.TotalNumSequences()-EF.TotalNumInfosets()-EF.NumPlayers()), 
    count(0), nevals(0), SF(S,v)
{ 
//  gEpsilon(eps,12);

}

template <class T> int EfgPolEnumModule<T>::EfgPolEnum(void)
{
  int i,j,k;


  gWatch watch;
  gPolyList<T> equations(&Space,&Lex);

  // equations for equality of strat j to strat j+1
 /*
  for( i=1;i<=EF.NumPlayers();i++) 
    for(j=1;j<support.NumSequences(i);j++) 
      equations+=Equation(i,j,j+1);
  */

  for( i=1;i<=EF.NumPlayers();i++) 
    for(j=1;j<EF.NumInfosets()[i];j++) 
      for(k=1;k<support.NumActions(i,j);k++) 
      equations+=Prob(i,j,k);

  // set up the rectangle of search
  gVector<T> bottoms(num_vars), tops(num_vars);
  bottoms = (T)0;
  tops = (T)1;
 
  gRectangle<T> Cube(bottoms, tops); 

  // start QuikSolv
  gWatch timer;
  timer.Start();

  QuikSolv<T> quickie(equations);
  if(params.trace>0) {
    (*params.tracefile) << "\nThe equilibrium equations are \n" 
      << quickie.UnderlyingEquations() ;
  }  

/*
  if(quickie.FindRoots(Cube,2000)) {
    if(params.trace>0) {
      (*params.tracefile) << "\nThe system has the following roots in [0,1]^"
	<< num_vars << " :\n" << quickie.RootList();
    }
  }
  else
    if(params.trace>0) {
      (*params.tracefile) << "The system\n" << quickie.UnderlyingEquations()
	<< " could not be resolved by FindRoots.\n";
    }
  timer.Stop();
  if(params.trace>0) {
    (*params.tracefile)  << "The QuikSolv computation of roots took " 
      << (int)timer.Elapsed() << " seconds.\n\n";
  }
//  int index = SaveSolutions(quickie.RootList());
  time = watch.Elapsed();

  */

  return 1;	 

}

/*
template <class T> int 
EfgPolEnumModule<T>::SaveSolutions(const gList<gVector<gDouble> > &list)
{
  BehavProfile<double> profile(support, values);
  int i,j,k,kk,index;
  double sum;

  for(k=1;k<=list.Length();k++) {
    kk=0;
    for(i=1;i<=EF.NumPlayers();i++) {
      sum=0;
      for(j=1;j<support.NumStrats(i);j++) {
	profile(i,j) = (list[k][j+kk]).ToDouble();
	sum+=profile(i,j);
      }
      profile(i,j) = (double)1.0 - sum;
      kk+=(support.NumStrats(i)-1);
    }
    index = solutions.Append(BehavSolution(profile, EfgAlg_POLENUM));
    if(params.status.Get() != 1) {
      solutions[index].SetEpsilon(0);
      solutions[index].SetIsNash(T_YES);
    }
  }
  return index;
}
*/

template <class T> bool EfgPolEnumModule<T>::EqZero(T x) const
{
  if(x <= eps && x >= -eps) return 1;
  return 0;
}     

template <class T> long EfgPolEnumModule<T>::NumEvals(void) const
{
  return nevals;
}

template <class T> double EfgPolEnumModule<T>::Time(void) const
{
  return time;
}

template <class T> EfgPolEnumParams &EfgPolEnumModule<T>::Parameters(void)
{
  return params;
}

/*
template <class T>
const gList<BehavSolution> &EfgPolEnumModule<T>::GetSolutions(void) const
{
  return solutions;
}


template <class T> gPoly<T> EfgPolEnumModule<T>::Prob(int p, int strat) const
{
  gPoly<T> equation(&Space,&Lex);
  gVector<int> exps(num_vars);
  int i,j,kk = 0;
  
  for(i=1;i<p;i++) 
    kk+=(support.NumStrats(i)-1);

  if(strat<support.NumStrats(p)) {
    exps=0;
    exps[strat+kk]=1;
    exp_vect const_exp(&Space,exps);
    gMono<T> const_term((T)1,const_exp);
    gPoly<T> new_term(&Space,const_term,&Lex);
    equation+=new_term;
  }
  else {
    for(j=1;j<support.NumStrats(p);j++) {
      exps=0;
      exps[j+kk]=1;
      exp_vect exponent(&Space,exps);
      gMono<T> term((T)(-1),exponent);
      gPoly<T> new_term(&Space,term,&Lex);
      equation+=new_term;
    }
    exps=0;
    exp_vect const_exp(&Space,exps);
    gMono<T> const_term((T)1,const_exp);
    gPoly<T> new_term(&Space,const_term,&Lex);
    equation+=new_term;
  }
  return equation;
}

template <class T> gPoly<T> 
EfgPolEnumModule<T>::Equation(int i, int strat1, int strat2) const
{
  StrategyProfile profile(EF);

  EfgContIter A(support), B(support);
  A.Freeze(i);
  A.Set(i, strat1);
  B.Freeze(i);
  B.Set(i, strat2);
  gPoly<T> equation(&Space,&Lex);
  do {
    gPoly<T> term(&Space,(T)1,&Lex);
    profile = A.Profile();
    int k;
    for(k=1;k<=EF.NumPlayers();k++) 
      if(i!=k) 
	term*=Prob(k,support.Find(profile[k]));
    T coeff,ap,bp;
    ap = (T)EF.Payoff(A.GetOutcome(), i).Evaluate(values);
    bp = (T)EF.Payoff(B.GetOutcome(), i).Evaluate(values);
    coeff = ap - bp;
    term*=coeff;
    equation+=term;
    A.NextContingency();
  } while (B.NextContingency());
  return equation;
}
*/



