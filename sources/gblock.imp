//#
//# FILE: gblock.imp -- Implementation of gBlock type
//#
//# $Id$
//#

#include <stdlib.h>
#include <assert.h>
#include "gblock.h"

template <class T> gBlock<T>::gBlock(int len) : gArray<T>(len)   { }

template <class T> gBlock<T>::gBlock(int lo, int hi) : gArray<T>(lo,hi)   { }

template <class T> gBlock<T>::gBlock(const gBlock<T> &b) : gArray<T>(b)  { }

template <class T> gBlock<T>::~gBlock()   { }

template <class T> gBlock<T> &gBlock<T>::operator=(const gBlock<T> &b)
{
  gArray<T>::operator=(b);
  return *this;
}

template <class T> int gBlock<T>::operator==(const gBlock<T> &b) const
{
  if (min != b.min || max != b.max) return 0;
  for (int i = min; i <= max; i++) 
    if (data[i] != b.data[i]) return 0;
  return 1;
}

template <class T> int gBlock<T>::operator!=(const gBlock<T> &b) const
{
  return !(*this == b);
}

template <class T> gBlock<T> gBlock<T>::operator+(const gBlock<T>& b) const
{
  gBlock<T> result(*this);
  for (int i = b.min; i <= b.max; i++)
    result.Append(b[i]);
  return result;
}

template <class T> gBlock<T> gBlock<T>::operator+(const T &e) const
{
  gBlock<T> result(*this);
  result.Append(e);
  return result;
}

template <class T> gBlock<T> &gBlock<T>::operator+=(const T &e)
{
  Append(e);
  return *this;
}

template <class T> gBlock<T> &gBlock<T>::operator+=(const gBlock<T> &b)
{
  *this = *this + b;
  return *this;
}

template <class T> int gBlock<T>::InsertAt(const T &t, int n)
{
  assert(min <=n && n <=max+1);
  T *new_data = new T[++max-min+1] - min;

  for (int i = min; i <= n - 1; i++)       new_data[i] = data[i];
  new_data[i++] = t;
  for (; i <= max; i++)       new_data[i] = data[i - 1];

  if (data)   delete [] (data + min);
  data = new_data;

  return n;
}

template <class T> int gBlock<T>::Append(const T &t)
{
  return InsertAt(t, max + 1);
}

template <class T> int gBlock<T>::Insert(const T &t, int n)
{
  return InsertAt(t, (n < min) ? min : ((n > max + 1) ? max + 1 : n));
}

template <class T> T gBlock<T>::Remove(int n)
{
  assert(n >= min && n <= max);

  T ret(data[n]);

  T *new_data = (--max>=min) ? new T[max-min+1] - min : 0;

  for (int i = min; i < n; i++)      new_data[i] = data[i];
  for (; i <= max; i++)         new_data[i] = data[i + 1];

  delete [] (data + min);
  data = new_data;

  return ret;
}

template <class T> int gBlock<T>::Find(const T &t) const
{
  for (int i = min; i <= max && data[i] != t; i++);
  return (i <= max) ? i : 0;
} 

template <class T> int gBlock<T>::Contains(const T &t) const
{ return Find(t); }

template <class T> void gBlock<T>::Flush(void)
{ max=min;  delete [] (data + min);  data = 0; }

//
// Uses the Dump function to output the gBlock.  Uses the << operator
// overload to use output streams, gout.
//
template <class T> gOutput &operator<<(gOutput &f, const gBlock<T> &b)
{
  b.Dump(f);   return f;
}


