//
// $Source$
// $Date$
// $Revision$
//
// DESCRIPTION:
// Implementation of doubly-partitioned vector class
//
// This file is part of Gambit
// Copyright (c) 2002, The Gambit Project
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include "gdpvect.h"

//--------------------------------------------------------------------------
//          gbtDPVector<T>: Private and protected member functions
//--------------------------------------------------------------------------

template <class T>
int gbtDPVector<T>::sum(int part, const gbtPVector<int> &v) const
{
  int s = 0;

  gbtArray<int> len(v.Lengths());
  for (int j = 1; j <= len[part]; j++)
    s += v(part, j);

  return s;
}

template <class T> void gbtDPVector<T>::setindex(void)
{
  int index = 1;
  
  for (int i = 1; i <= dvlen.Length(); i++)  {
    dvptr[i] = this->svptr + index - 1;
    dvidx[i] = index;
    index += dvlen[i];
  }
}

template <class T> bool gbtDPVector<T>::Check(const gbtDPVector<T> &v) const
{
  for (int i = 1; i <= dvlen.Length(); i++)
    if (dvlen[i] != v.dvlen[i])   return false;
  return true;
}
    
//--------------------------------------------------------------------------
//    gbtDPVector<T>: Constructors, destructor, and constructive operators
//--------------------------------------------------------------------------

template <class T> gbtDPVector<T>::gbtDPVector(void) : dvptr(0)
{ }

template <class T> gbtDPVector<T>::gbtDPVector(const gbtPVector<int> &sig)
  : gbtPVector<T>((gbtArray<int>)sig), dvlen(sig.Lengths().Length()),
    dvidx(sig.Lengths().Length())
{
  dvptr = new T **[dvlen.Length()];
  dvptr -= 1;

  for (int i = 1; i <= dvlen.Length(); i++)
    dvlen[i] = sig.Lengths()[i];

  setindex();
}

template <class T> gbtDPVector<T>::gbtDPVector(const Gambit::Vector<T> &val,
					   const gbtPVector<int> &sig)
  : gbtPVector<T>(val, sig), dvlen(sig.Lengths().Length()),
    dvidx(sig.Lengths().Length())
{
  dvptr = new T **[dvlen.Length()];
  dvptr -= 1;

  for (int i = 1; i <= dvlen.Length(); i++)
    dvlen[i] = sig.Lengths()[i];

  setindex();
}

template <class T> gbtDPVector<T>::gbtDPVector(const gbtDPVector<T> &v)
  : gbtPVector<T>(v), dvlen(v.dvlen), dvidx(v.dvidx)
{
  dvptr = new T **[dvlen.Length()];
  dvptr -= 1;

  setindex();
}

template <class T> gbtDPVector<T>::~gbtDPVector()
{
  if (dvptr)  delete [] (dvptr + 1);
}

template <class T> gbtDPVector<T> &gbtDPVector<T>::operator=(const gbtDPVector<T> &v)
{
  if (!Check(v)) {
    throw gbtDimensionException();
  }

  gbtPVector<T>::operator=(v);
  return *this;
}

template <class T> gbtDPVector<T> &gbtDPVector<T>::operator=(const gbtPVector<T> &v)
{
  gbtPVector<T>::operator=(v);
  return *this;
}

template <class T> gbtDPVector<T> &gbtDPVector<T>::operator=(const Gambit::Vector<T> &v)
{
  gbtPVector<T>::operator=(v);
  return *this;
}

template <class T> gbtDPVector<T> &gbtDPVector<T>::operator=(T c)
{
  gbtPVector<T>::operator=(c);
  return *this;
}



//--------------------------------------------------------------------------
//                    gbtDPVector<T>: Operator definitions
//--------------------------------------------------------------------------

template <class T> T &gbtDPVector<T>::operator()(int a, int b, int c)
{
  if (dvlen.First() > a || a > dvlen.Last()) {
    throw gbtIndexException();
  }
  if (1 > b || b > dvlen[a]) {
    throw gbtIndexException();
  }
  if (1 > c || c > this->svlen[dvidx[a] + b - 1]) {
    throw gbtIndexException();
  }
  return dvptr[a][b][c];
}

template <class T> const T &gbtDPVector<T>::operator()(int a, int b, int c) const
{
  if (dvlen.First() > a || a > dvlen.Last()) {
    throw gbtIndexException();
  }
  if (1 > b || b > dvlen[a]) {
    throw gbtIndexException();
  }
  if (1 > c || c > this->svlen[dvidx[a] + b - 1]) {
    throw gbtIndexException();
  }
  return dvptr[a][b][c];
}

template <class T>
gbtDPVector<T> gbtDPVector<T>::operator+(const gbtDPVector<T> &v) const
{
  if (!Check(v)) {
    throw gbtDimensionException();
  }

  gbtDPVector<T> tmp(*this);
  tmp.gbtPVector<T>::operator+=(v);
  return tmp;
}

template <class T>
gbtDPVector<T> &gbtDPVector<T>::operator+=(const gbtDPVector<T> &v)
{
  if (!Check(v)) {
    throw gbtDimensionException();
  }
  gbtPVector<T>::operator+=(v);
  return *this;
}

template <class T> gbtDPVector<T> gbtDPVector<T>::operator-(void) const
{
  gbtDPVector<T> tmp(*this);
  for (int i = this->First(); i <= this->Last(); i++)
    tmp[i] = -tmp[i];
  return tmp;
}

template <class T>
gbtDPVector<T> gbtDPVector<T>::operator-(const gbtDPVector<T> &v) const
{
  if (!Check(v)) {
    throw gbtDimensionException();
  }
  gbtDPVector<T> tmp(*this);
  tmp.gbtPVector<T>::operator-=(v);
  return tmp;
}

template <class T>
gbtDPVector<T> &gbtDPVector<T>::operator-=(const gbtDPVector<T> &v)
{
  if (!Check(v)) {
    throw gbtDimensionException();
  }
  gbtPVector<T>::operator-=(v);
  return *this;
}

template <class T> T gbtDPVector<T>::operator*(const gbtDPVector<T> &v) const
{
  if (!Check(v)) {
    throw gbtDimensionException();
  }
  return (*this).gbtPVector<T>::operator*(v);
}

template <class T> gbtDPVector<T> &gbtDPVector<T>::operator*=(const T &c)
{
  gbtPVector<T>::operator*=(c);
  return *this;
}

template <class T> gbtDPVector<T> gbtDPVector<T>::operator/(const T &c) const
{
  gbtDPVector<T> tmp(*this);
  tmp = tmp.gbtPVector<T>::operator/(c);
  return tmp;
}

template <class T> bool gbtDPVector<T>::operator==(const gbtDPVector<T> &v) const
{
  if (!Check(v)) {
    throw gbtDimensionException();
  }
  return gbtPVector<T>::operator==(v);
}

template <class T> bool gbtDPVector<T>::operator!=(const gbtDPVector<T> &v) const
{
  return !(*this == v);
}

//-------------------------------------------------------------------------
//                 gbtDPVector<T>: General data access
//-------------------------------------------------------------------------

template <class T>
void gbtDPVector<T>::CopySubRow(int row, int col, const gbtDPVector<T> &v)
{
  if (!Check(v)) {
    throw gbtDimensionException();
  }
  if (dvlen.First() > row || row > dvlen.Last()) {
    throw gbtIndexException();
  }
  if (1 > col || col > dvlen[row]) {
    throw gbtIndexException();
  }

  for (int i = 1; i <= this->svlen[dvidx[row]+col-1]; i++)
    dvptr[row][col][i] = v.dvptr[row][col][i];
}



template <class T> const gbtArray<int> &gbtDPVector<T>::DPLengths(void) const
{
  return dvlen;
}

