//
// $Source$
// $Date$
// $Revision$
//
// DESCRIPTION:
// Implementation of algorithm to solve efgs via linear programming
//
// This file is part of Gambit
// Copyright (c) 2002, The Gambit Project
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include "efglp.h"

//-------------------------------------------------------------------------
//                     gbtEfgNashLp<T>: Member functions
//-------------------------------------------------------------------------

template <class T>
gbtEfgNashLp<T>::gbtEfgNashLp(void)
{ }

template <class T> 
gbtList<BehavSolution> gbtEfgNashLp<T>::Solve(const gbtEfgSupport &p_support,
					    gbtStatus &p_status)
{
  gbtBasicFeasibleSolution<T> cbfs((T) 0);
  
  ns1 = p_support.NumSequences(1);
  ns2 = p_support.NumSequences(2);
  ni1 = p_support.GetPlayer(1)->NumInfosets()+1;  
  ni2 = p_support.GetPlayer(2)->NumInfosets()+1; 
  isets1 = p_support.ReachableInfosets(p_support.GetPlayer(1));
  isets2 = p_support.ReachableInfosets(p_support.GetPlayer(2)); 

  if (p_support.NumPlayers() != 2 ||
      !p_support.IsConstSum() ||
      !p_support.IsPerfectRecall()) {
    return gbtList<BehavSolution>();
  }
  
  List.Flush();
  
  gbtMatrix<T> A(1,ns1+ni2,1,ns2+ni1);
  gbtVector<T> b(1,ns1+ni2);
  gbtVector<T> c(1,ns2+ni1);

  maxpay = p_support.MaxPayoff() + gbtNumber(1);
  minpay = p_support.MinPayoff() - gbtNumber(1);

  A = (T)0;
  T prob = (T)1;
  FillTableau(p_support, A, p_support.GetRoot(),prob,1,1,0,0);
  A(1,ns2+1) = -(T)1;
  A(ns1+1,1) = (T)1;

  b = (T)0;
  b[ns1+1] = (T)1;

  c = (T)0;
  c[ns2+1] = -(T)1;

  gbtLPSolver<T> LP(A,b,c,ni2,p_status);
  if (!LP.IsAborted()) {
    Add_BFS(LP); 
  }

  gbtList<BehavSolution> solutions;
  GetSolutions(p_support, solutions);
  return solutions;
}


template <class T> int gbtEfgNashLp<T>::Add_BFS(/*const*/ gbtLPSolver<T> &lp)
{
  gbtBasicFeasibleSolution<T> cbfs((T) 0);

  // gbtLPSolver<T>::GetAll() does not currently work correctly; for now,
  // LpSolve is restricted to returning only one equilibrium 
  lp.OptBFS(cbfs);
  if (List.Contains(cbfs))  return 0;
  List.Append(cbfs);
  return 1;
}



template <class T> void gbtEfgNashLp<T>::GetProfile(const gbtEfgSupport &p_support,
						    gbtDPVector<T> &v,
						    const gbtBasicFeasibleSolution<T> &sol,
						    const gbtGameNode &n,
						    int s1,int s2) const
{
  
  int i,pl,inf,snew;
  T eps = (T)0;
//  eps = tab->Epsilon();
  if (!n->GetInfoset().IsNull()) {
    if(n->GetPlayer()->IsChance()) {
      for(i=1;i<=n->NumChildren();i++)
	GetProfile(p_support,v,sol,n->GetChild(i),s1,s2);
    }
    pl = n->GetPlayer()->GetId();
    if(pl==2) {
    inf= isets2.Find(n->GetInfoset());
      snew=1;
      for(i=1;i<inf;i++)
	snew+=p_support.NumActions(isets2[i]); 
      for(i=1;i<=p_support.NumActions(n->GetInfoset());i++) {
	v(pl,inf,i) = (T)0;
	if(sol.IsDefined(s1)) {
	  if(sol(s1)>eps) {
	    if(sol.IsDefined(snew+i)) {
	      if(sol(snew+i)>eps)
		v(pl,inf,i) = sol(snew+i)/sol(s1);
	    }
	  } 
	} 
	GetProfile(p_support,v,sol,n->GetChild(p_support.GetAction(n->GetInfoset(), i)->GetId()),snew+i,s2);
      }
    }
    if(pl==1) {
    inf= isets1.Find(n->GetInfoset());
      snew=1;
      for(i=1;i<inf;i++)
	snew+=p_support.NumActions(isets1[i]); 
      for(i=1;i<=p_support.NumActions(n->GetInfoset());i++) {
	v(pl,inf,i) = (T)0;
	if(sol.IsDefined(-s2)) {
	  if(sol(-s2)>eps) {
	    if(sol.IsDefined(-(snew+i))) {
	      if(sol(-(snew+i))>eps)
		v(pl,inf,i) = sol(-(snew+i))/sol(-s2);
	    }
	  } 
	} 
	GetProfile(p_support,v,sol,n->GetChild(p_support.GetAction(n->GetInfoset(), i)->GetId()),s1,snew+i);
      }
    }
  }
}


template <class T>
void gbtEfgNashLp<T>::FillTableau(const gbtEfgSupport &p_support,
				  gbtMatrix<T> &A, const gbtGameNode &n, T prob,
				  int s1, int s2, int i1, int i2)
{
  int i,snew;
  if (!n->GetOutcome().IsNull()) {
    A(s1,s2) = gbtNumber(A(s1,s2)) +
      gbtNumber(prob) * n->GetOutcome()->GetPayoff(n->GetGame()->GetPlayer(1)) - gbtNumber(minpay);
  }
  if (!n->GetInfoset().IsNull()) {
    if (n->GetPlayer()->IsChance()) {
      for(i=1;i<=n->NumChildren();i++)
	FillTableau(p_support, A, n->GetChild(i),
		    gbtNumber(prob) * n->GetInfoset()->GetChanceProb(i),
		    s1,s2,i1,i2);
    }
    int pl = n->GetPlayer()->GetId();
    if(pl==1) {
      i1=isets1.Find(n->GetInfoset());
      snew=1;
      for(i=1;i<i1;i++)
	snew+=p_support.NumActions(isets1[i]);
      A(s1,ns2+i1+1) = (T) +1;
      for(i=1;i<=p_support.NumActions(n->GetInfoset());i++) {
	A(snew+i,ns2+i1+1) = (T) -1;
	FillTableau(p_support, A, n->GetChild(p_support.GetAction(n->GetInfoset(), i)->GetId()),prob,snew+i,s2,i1,i2);
      }
    }
    if(pl==2) {
      i2=isets2.Find(n->GetInfoset());
      snew=1;
      for(i=1;i<i2;i++)
	snew+=p_support.NumActions(isets2[i]);
      A(ns1+i2+1,s2) = (T) -1;
      for(i=1;i<=p_support.NumActions(n->GetInfoset());i++) {
	A(ns1+i2+1,snew+i) = (T) +1;
	FillTableau(p_support, A, n->GetChild(p_support.GetAction(n->GetInfoset(), i)->GetId()),prob,s1,snew+i,i1,i2);
      }
    }
  }
}

template <class T>
void gbtEfgNashLp<T>::GetSolutions(const gbtEfgSupport &p_support,
				   gbtList<BehavSolution> &solutions) const
{
  for (int i = 1; i <= List.Length(); i++)    {
    gbtBehavProfile<T> profile = p_support.NewBehavProfile((T) 0);
    GetProfile(p_support, profile->GetDPVector(), List[i],
	       p_support.GetRoot(), 1, 1);
    solutions.Append(BehavSolution(profile, "Lp[EFG]"));
  }

}
