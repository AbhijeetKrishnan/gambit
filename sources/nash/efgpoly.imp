//
// $Source$
// $Date$
// $Revision$
//
// DESCRIPTION:
// Compute Nash equilibria via solving gbtPolyUni equations
//
// This file is part of Gambit
// Copyright (c) 2002, The Gambit Project
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include "base/gnullstatus.h"
#include "base/odometer.h"
#include "game/game.h"
#include "game/sfg.h"

#include "efgpoly.h"
#include "poly/quiksolv.h"

#include "behavextend.h"

class EfgPolEnumParams {
public:
  int stopAfter;
  
  EfgPolEnumParams(void);
};

template <class T> class EfgPolEnumModule  {
private:
  T eps;
  const gbtEfgSupport &support;
  EfgPolEnumParams params;
  gbtPolySpace *Space;
  gbtPolyTermOrder *Lex;
  int num_vars;
  long count,nevals;
  double time;
  gbtBehavNashSet solutions;
  const gbtSfgGame SF;
  bool is_singular;
  gbtArray<gbtArray<int> * > var;

  // The strategy is to develop the gbtPolyUni for each agent's expected
  // payoff as a function of the behavior strategies on the support,
  // eliminating the last last action probability for each information set.
  // The system is obtained by requiring that all of the partial
  // derivatives vanish, and that the sum of action probabilities at
  // each information set be less than one.
  gbtPolyMulti<T>     ProbOfSequence(int pl,int seq)          const;
  gbtPolyMulti<T>     Payoff(int pl)                          const;
  gbtPolyMultiList<T> IndifferenceEquations()                 const;
  gbtPolyMultiList<T> LastActionProbPositiveInequalities()    const;
  gbtPolyMultiList<T> NashOnSupportEquationsAndInequalities() const;
  gbtList<gbtVector<gbtDouble> > 
               NashOnSupportSolnVectors(const gbtPolyMultiList<T> &equations,
					const gRectangle<T> &Cube,
					gbtStatus &p_status);

  // Pass to the sequence form variables from the solution variables
  double NumProbOfSequence(int pl,int seq, const gbtVector<gbtDouble> &x) const;
  gbtPVector<double> SeqFormVectorFromSolFormVector(const gbtVector<gbtDouble> &x)
                                                                      const;

  bool ExtendsToANFNash(const gbtBehavProfile<gbtNumber> &, gbtStatus &) const;
  int SaveANFNashSolutions(const gbtList<gbtVector<gbtDouble> > &list, gbtStatus &);
  bool ExtendsToNash(const gbtBehavProfile<gbtNumber> &, gbtStatus &) const;
  int SaveNashSolutions(const gbtList<gbtVector<gbtDouble> > &list, gbtStatus &);

public:
  EfgPolEnumModule(const gbtEfgSupport &, const EfgPolEnumParams &p);
  ~EfgPolEnumModule();

  int EfgPolEnum(gbtStatus &);

  EfgPolEnumParams &Parameters(void);
  long             NumEvals(void)   const;
  double           Time(void)       const;
  bool             IsSingular(void) const;

  const gbtBehavNashSet &GetSolutions(void) const;

  // Passing between variables of polynomials and sequence form probs
  gbtPVector<double> SeqFormProbsFromSolVars(const gbtVector<gbtDouble> &) const;
  gbtVector<gbtDouble> SolVarsFromSeqFormProbs(const gbtPVector<double> &) const;
  gbtVector<gbtDouble> SolVarsFromBehavProfile(const gbtBehavProfile<gbtNumber> &) 
                                                                     const;

  const int PolishKnownRoot(gbtVector<gbtDouble> &) const;

  gbtBehavProfile<gbtNumber> ReturnPolishedSolution(const gbtVector<gbtDouble> &) const;
};

//-------------------------------------------------------------------------
//                    EfgPolEnumModule<T>: Member functions
//-------------------------------------------------------------------------

template <class T>
EfgPolEnumModule<T>::EfgPolEnumModule(const gbtEfgSupport &S,
				      const EfgPolEnumParams &p)
  : support(S), params(p), count(0), nevals(0), SF(S),
    is_singular(false), var(S->NumPlayers())
{ 
//  gEpsilon(eps,12);

  num_vars = SF.TotalNumSequences()-SF.NumPlayerInfosets()-SF.NumPlayers();

  Space = new gbtPolySpace(num_vars);
  Lex = new gbtPolyTermOrder(Space, lex);

  int kk=0;
  int tnv = 0;

  for(int i=1;i<=support->NumPlayers();i++) {
    var[i] = new gbtArray<int>(SF.NumSequences(i));
    (*(var[i]))[1] = 0;
    for(int seq = 2;seq<=SF.NumSequences(i);seq++) {
      int act  = SF.ActionNumber(i,seq);
      if(act < SF.GetInfoset(i, seq)->NumActions())
	(*(var[i]))[seq] = ++tnv;
      else
	(*(var[i]))[seq] = 0;

    }
    kk+=(SF.NumSequences(i)-SF.NumInfosets(i)-1);
  }
  assert(tnv==num_vars);
}

template <class T>
EfgPolEnumModule<T>::~EfgPolEnumModule()
{ 
  for(int i=1;i<=support->NumPlayers();i++)
    delete var[i];
  delete Lex;
  delete Space;
}

template <class T> 
gbtPolyMulti<T> EfgPolEnumModule<T>::ProbOfSequence(int p, int seq) const
{
  gbtPolyMulti<T> equation(Space,Lex);
  gbtVector<int> exps(num_vars);
  int j = 0;
  
  int isetrow = SF.InfosetRowNumber(p,seq);
  int act  = SF.ActionNumber(p,seq);
  int varno = (*(var[p]))[seq];

  if(seq==1) {
    exps=0;
    gbtPolyExponent const_exp(Space,exps);
    gbtMonomial<T> const_term((T)1,const_exp);
    gbtPolyMulti<T> new_term(Space,const_term,Lex);
    equation+=new_term;
  }
  else if(act< SF.GetInfoset(p, seq)->NumActions()) { 
    assert (varno>=exps.First());
    assert (varno<=exps.Last());
    exps=0;
    exps[varno]=1;
    gbtPolyExponent const_exp(Space,exps);
    gbtMonomial<T> const_term((T)1,const_exp);
    gbtPolyMulti<T> new_term(Space,const_term,Lex);
    equation+=new_term;
  }
  else {
    for(j=1;j<seq;j++) {
      if((SF.Constraints(p))(isetrow,j)==(gbtNumber)-1)
	equation-=ProbOfSequence(p,j);
      if((SF.Constraints(p))(isetrow,j)==(gbtNumber)1)
	equation+=ProbOfSequence(p,j);
    }
  }
  return equation;
}

template <class T> gbtPolyMulti<T> 
EfgPolEnumModule<T>::Payoff(int pl) const
{
  gbtIndexOdometer index(SF.NumSequences());
  gbtNumber pay;

  gbtPolyMulti<T> equation(Space,Lex);
  while (index.Turn()) {
    pay=SF.Payoff(index.CurrentIndices(),pl);
    if( pay !=(gbtNumber)0) {
      gbtPolyMulti<T> term(Space,(T)pay,Lex);
      int k;
      for(k=1;k<=support->NumPlayers();k++) 
	term*=ProbOfSequence(k,(index.CurrentIndices())[k]);
      equation+=term;
    }
  }
  return equation;
}

template <class T>  
gbtPolyMultiList<T> EfgPolEnumModule<T>::IndifferenceEquations() const
{
  gbtPolyMultiList<T> equations(Space,Lex);

  int kk = 0;
  for (int pl = 1; pl <= SF.NumPlayers(); pl++) {
    gbtPolyMulti<T> payoff = Payoff(pl);
    int n_vars = SF.NumSequences(pl) - SF.NumInfosets(pl) - 1; 
    for (int j = 1; j <= n_vars; j++) 
      equations += payoff.PartialDerivative(kk+j);
    kk+=n_vars;
  }

  return equations;
}

template <class T>  
gbtPolyMultiList<T> EfgPolEnumModule<T>::LastActionProbPositiveInequalities() const
{
  gbtPolyMultiList<T> equations(Space,Lex);

  for (int i = 1; i <= SF.NumPlayers(); i++) 
    for (int j = 2; j <= SF.NumSequences(i); j++) {
      int act_num = SF.ActionNumber(i,j);
      if ( act_num == SF.GetInfoset(i, j)->NumActions() && act_num > 1 ) 
	equations += ProbOfSequence(i,j);
    }

  return equations;
}

template <class T>  
gbtPolyMultiList<T> EfgPolEnumModule<T>::NashOnSupportEquationsAndInequalities() const
{
  gbtPolyMultiList<T> equations(Space,Lex);
  
  equations += IndifferenceEquations();
  equations += LastActionProbPositiveInequalities();

  return equations;
}


template <class T> gbtList<gbtVector<gbtDouble> > 
EfgPolEnumModule<T>::NashOnSupportSolnVectors(const gbtPolyMultiList<T> &equations,
					      const gRectangle<T> &Cube,
					      gbtStatus &p_status)
{
  gbtPolyQuickSolve<T> quickie(equations, p_status);

  try {
    if(quickie.FindCertainNumberOfRoots(Cube,2147483647,params.stopAfter)) {

    }

  }
  catch (gbtSignalBreak &) { }
  catch (gbtSquareMatrix<gbtDouble>::MatrixSingular) {
    is_singular = true;
  }
  
  return quickie.RootList();
}

template <class T> int EfgPolEnumModule<T>::EfgPolEnum(gbtStatus &p_status)
{
  gbtPolyMultiList<T> equations = NashOnSupportEquationsAndInequalities();

  // set up the rectangle of search
  gbtVector<T> bottoms(num_vars), tops(num_vars);
  bottoms = (T)0;
  tops = (T)1;
  gRectangle<T> Cube(bottoms, tops); 

  gbtList<gbtVector<gbtDouble> > solutionlist = 
    NashOnSupportSolnVectors(equations, Cube,p_status);

  int index = SaveNashSolutions(solutionlist, p_status);
  return index;	 
}

template <class T> gbtPVector<double> 
EfgPolEnumModule<T>::SeqFormVectorFromSolFormVector(const gbtVector<gbtDouble> &v)
                                                                      const
{
  gbtPVector<double> x(SF.NumSequences());

  for (int i = 1; i <= support->NumPlayers(); i++) 
    for (int j = 1; j <= SF.NumSequences()[i]; j++)
      x(i,j) = NumProbOfSequence(i,j,v);
  
  return x;
}

template <class T> bool 
EfgPolEnumModule<T>::ExtendsToANFNash(const gbtBehavProfile<gbtNumber> &bs, 
				      gbtStatus &m_status) const
{
  algExtendsToAgentNash algorithm;
  return algorithm.ExtendsToAgentNash(bs, bs->NewEfgSupport(),
				      bs->NewEfgSupport(),
				      m_status);
}

template <class T> int 
EfgPolEnumModule<T>::SaveANFNashSolutions(const gbtList<gbtVector<gbtDouble> > &list,
					  gbtStatus &p_status)
{
  int index=0;
  for (int k = 1; k <= list.Length(); k++) {
    gbtPVector<double> y = SeqFormVectorFromSolFormVector(list[k]);

    gbtBehavProfile<gbtNumber> sol = SF.ToBehav(y);

    if (ExtendsToNash(sol,p_status)) { 
      solutions.Append(sol);
    }
  }
  return index;
}

template <class T> bool 
EfgPolEnumModule<T>::ExtendsToNash(const gbtBehavProfile<gbtNumber> &bs, 
				   gbtStatus &m_status) const
{
  algExtendsToNash algorithm;
  return algorithm.ExtendsToNash(bs, bs->NewEfgSupport(), bs->NewEfgSupport(),
				 m_status);
}

template <class T> int 
EfgPolEnumModule<T>::SaveNashSolutions(const gbtList<gbtVector<gbtDouble> > &list,
				       gbtStatus &p_status)
{
  int index=0;
  for (int k = 1; k <= list.Length(); k++) {
    gbtPVector<double> y = SeqFormVectorFromSolFormVector(list[k]);

    gbtBehavProfile<gbtNumber> sol = SF.ToBehav(y);

    if (ExtendsToNash(sol,p_status)) { 
      solutions.Append(sol);
    }
  }
  return index;
}


template <class T> long EfgPolEnumModule<T>::NumEvals(void) const
{
  return nevals;
}

template <class T> double EfgPolEnumModule<T>::Time(void) const
{
  return time;
}

template <class T> bool EfgPolEnumModule<T>::IsSingular(void) const
{
  return is_singular;
}

template <class T> EfgPolEnumParams &EfgPolEnumModule<T>::Parameters(void)
{
  return params;
}

template <class T>
const gbtBehavNashSet &EfgPolEnumModule<T>::GetSolutions(void) const
{
  return solutions;
}

template <class T> double EfgPolEnumModule<T>::
NumProbOfSequence(int p,int seq, const gbtVector<gbtDouble> &x) const
{
  int j = 0;
  double value=0;

  int isetrow = SF.InfosetRowNumber(p,seq);
  int act  = SF.ActionNumber(p,seq);
  int varno = (*(var[p]))[seq];

  if(seq==1)
    return (double)1;
  else if(act<SF.GetInfoset(p, seq)->NumActions()) 
    return x[varno].ToDouble();
  else {    
    for(j=1;j<seq;j++) {
      if((SF.Constraints(p))(isetrow,j)==-(gbtNumber)1)
	value-=NumProbOfSequence(p,j,x);
      if((SF.Constraints(p))(isetrow,j)==(gbtNumber)1)
	value+=NumProbOfSequence(p,j,x);
    }
    return value;
  }
}

template <class T> gbtPVector<double> 
EfgPolEnumModule<T>::SeqFormProbsFromSolVars(const gbtVector<gbtDouble> &v) const
{
  gbtPVector<double> x(SF.NumSequences());

  for(int pl=1;pl<=support->NumPlayers();pl++) 
    for(int seq=1;seq<=SF.NumSequences()[pl];seq++)
      x(pl,seq) = NumProbOfSequence(pl,seq,v);

  return x;
}

template <class T> gbtVector<gbtDouble> 
EfgPolEnumModule<T>::SolVarsFromBehavProfile(const gbtBehavProfile<gbtNumber> &sol)
  const
{
  int numvars(0);

  for (int pl = 1; pl <= support->NumPlayers(); pl++) {
    gbtGamePlayer player = support->GetPlayer(pl);
    for (int iset = 1; iset <= player->NumInfosets(); iset++) {
      gbtGameInfoset infoset = player->GetInfoset(iset);
      if ( support->MayReach(infoset) )
	numvars += infoset->NumActions() - 1;
    }
  }

  gbtVector<gbtDouble> answer(numvars);
  int count(0);

  for (int pl = 1; pl <= support->NumPlayers(); pl++) {
    gbtGamePlayer player = support->GetPlayer(pl);
    for (int iset = 1; iset <= player->NumInfosets(); iset++) {
      gbtGameInfoset infoset = player->GetInfoset(iset);
      if ( support->MayReach(infoset) ) {
	for (int act = 1; act <= infoset->NumActions() - 1; act++) {
	  count++;
	  answer[count] = (gbtDouble)sol->GetActionProb(support->GetAction(infoset, act));
	}
      }
    }
  }

  return answer;
}

template <class T> gbtVector<gbtDouble> 
EfgPolEnumModule<T>::SolVarsFromSeqFormProbs(const gbtPVector<double> &x) const
{
  

  // Old version that doesn't work 
  int numvars = 0;
  for(int pl=1;pl<=support->NumPlayers();pl++) 
    for(int seq=2;seq<=SF.NumSequences()[pl];seq++) {
      int act  = SF.ActionNumber(pl,seq);
      if(act<SF.GetInfoset(pl, seq)->NumActions())
	numvars++;
    }
  gbtVector<gbtDouble> v(numvars);
  //  gbtVector<gbtDouble> v(SF.NumIndepVars());

  int count = 0;
  for(int pl=1;pl<=support->NumPlayers();pl++) 
    for(int seq=2;seq<=SF.NumSequences()[pl];seq++) {
      int act  = SF.ActionNumber(pl,seq);
      if(act<SF.GetInfoset(pl, seq)->NumActions()) {
	count++;
	int varno = (*(var[pl]))[seq];
	v[count] = (gbtDouble)x[varno];
      }
    }

  return v;
}

template <class T> 
const int EfgPolEnumModule<T>::PolishKnownRoot(gbtVector<gbtDouble> &point) const
{
  //DEBUG
  //  gout << "Prior to Polishing point is " << point << ".\n";

  if (point.Length() > 0) {
    int i,j;
    
    gbtPolyMultiList<T> equations(Space,Lex);
    
    // equations for equality of strat j to strat j+1
    
    int kk=0;
    for( i=1;i<=SF.NumPlayers();i++) {
      int n_vars=SF.NumSequences(i)-SF.NumInfosets(i)-1; 
      for(j=1;j<=n_vars;j++) 
	equations+=(Payoff(i)).PartialDerivative(kk+j);
      kk+=n_vars;
    }

    //DEBUG
    //    gout << "We are about to construct quickie with Dmnsn() = "
    //  << Space->Dmnsn() << " and equations = \n"
    //	 << equations << "\n";
    
    // start gbtPolyQuickSolve
    gbtNullStatus gstatus;
    gbtPolyQuickSolve<T> quickie(equations, gstatus);
    
    //DEBUG
    //    gout << "We constructed quickie.\n";
    
    try { 
      point = quickie.NewtonPolishedRoot(point);
    }
    catch (gbtSignalBreak &) { }
    catch (gbtSquareMatrix<gbtDouble>::MatrixSingular &) {
      return 0;
    }

    //DEBUG
    //    gout << "After Polishing point = " << point << ".\n";

  }

  return 1;	 
}

template <class T> gbtBehavProfile<gbtNumber>
EfgPolEnumModule<T>::ReturnPolishedSolution(const gbtVector<gbtDouble> &root) const
{
  gbtPVector<double> x(SF.NumSequences());

  for(int i=1;i<=support->NumPlayers();i++) 
    for(int j=1;j<=SF.NumSequences()[i];j++) 
      x(i,j) = NumProbOfSequence(i,j,root);

  return SF.ToBehav(x);
}
