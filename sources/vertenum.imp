//
// FILE: vertenum.imp -- Implementation of Vertex Enumerator
//
// $Id$ 
//

#include "vertenum.h"

template <class T>
VertEnum<T>::VertEnum(const gMatrix<T> &A, const gVector<T> &b, 
		      gStatus &status_)
  : mult_opt(0), depth(0), A(A), b(b), btemp(b), c(A.MinCol(),A.MaxCol()), 
    npivots(0), nodes(0), status(status_) 
{
  Enum();
}


template <class T> VertEnum<T>::~VertEnum()
{ }


template <class T> void VertEnum<T>::Enum()
{
      // Check dimensions
  assert(A.NumRows() == b.Length() && A.NumColumns() == c.Length());

      // Initialize the tableau
  int i;

  for(i=b.First();i<=b.Last();i++)
    if(b[i]==(T)0)
      mult_opt=1;

  btemp = -(T)1;
  c = (T)1;

  LPTableau<T> tab(A,b);
  tab.SetCost(c);
  
  // gout << "\nInitial Tableau = \n";
  // tab.Dump(gout);

  DualSearch(tab);
}
  

template <class T> void VertEnum<T>::Report()
{
  int i = 1;
  double x, estNodes;

  estNodes=x=(double)1;
  
  while(i<=visits.Length()) {
    if(visits[i]) {
      x*=(double)branches[i]/(double)visits[i];
      estNodes+=x;
    }
    i++;
  }
  status.SetProgress((double)nodes/estNodes);
}

template <class T> void VertEnum<T>::Deeper()
{
  depth++;
  if(visits.Length()<depth) {
    visits.Append(0);
    branches.Append(0);
  }
  visits[depth]+=1;
  nodes++;
}

template <class T> void VertEnum<T>::Search(LPTableau<T> &tab)
{
  int k;
  Deeper();
  gList<gArray<int> > PivotList;
  gArray<int> pivot(2);
  if(tab.IsLexMin()) 
    List.Append(tab.GetBFS1());
  assert(PivotList.Length()==0);
  tab.ReversePivots(PivotList);  // get list of reverse pivots
  if(PivotList.Length()) {
    branches[depth]+=PivotList.Length();
    LPTableau<T> tab2(tab);
    for(k=1;k<=PivotList.Length() && !status.Get();k++) {
      pivot = PivotList[k];
      npivots++;
      tab2=tab;
      tab2.Pivot(pivot[1],pivot[2]);
      Search(tab2);
    }
  }
  else Report();  // Report progress at terminal leafs
  depth--;
}
  
template <class T> void VertEnum<T>::DualSearch(LPTableau<T> &tab)
{
  int i,j;
  Deeper();
  branches[depth]+=1;

//  gList<gArray<int> > PivotList;
//  gArray<int> pivot(2);

  // gout << "\nin DualSearch";
  if(mult_opt) {
    tab.SetConst(btemp);    // install artifical constraint vector
    LPTableau<T> tab2(tab);
    for(i=b.First();i<=b.Last() && !status.Get();i++)
      if(b[i]==(T)0)
	for(j=-b.Last();j<=c.Last() && !status.Get();j++) 
	  if(j && !tab.Member(j))
	    if(tab.IsDualReversePivot(i,j)) {
	      branches[depth]+=1;
	      npivots++;
	      tab2=tab;
	      tab2.Pivot(i,j);
	      DualSearch(tab2);
	    }
  }
  tab.SetConst(b);     // install original constraint vector
  Search(tab);         // do primal search
  depth--;
}
  
template <class T> const gList<BFS<T> > &VertEnum<T>::VertexList() const
{ 
  return List;
}

template <class T> long VertEnum<T>::NumPivots() const
{
  return npivots;
}

template <class T> void VertEnum<T>::Dump(gOutput &to) const
{
  // gout << "\nin VertEnum::Dump()";
  for(int i=1;i<=List.Length();i++) {
    to << "\n";
    List[i].Dump(to);
  }
}



