//
//# FILE: vertenum.imp -- Implementation of Vertex Enumerator
//#
//# $Id$ 
//#

#include "vertenum.h"

template <class T>
VertEnum<T>::VertEnum(const gMatrix<T> &A, const gVector<T> &b) 
  : A(A), b(b), btemp(b), c(A.MinCol(),A.MaxCol()), npivots(0) ,
    status(gstatus)
{
  Enum();
}	


template <class T>
VertEnum<T>::VertEnum(const gMatrix<T> &A, const gVector<T> &b, 
		      gStatus &status)
  : A(A), b(b), btemp(b), c(A.MinCol(),A.MaxCol()), npivots(0), 
    status(status) 
{
  Enum();
}


template <class T> VertEnum<T>::~VertEnum()
{ }


template <class T> void VertEnum<T>::Enum()
{
      // Check dimensions
  assert(A.NumRows() == b.Length() && A.NumColumns() == c.Length());

      // Initialize the tableau
  int i,mult_opt=0;

  for(i=b.First();i<=b.Last();i++)
    if(b[i]==(T)0)
      mult_opt=1;

  btemp = -(T)1;
  c = (T)1;

  LPTableau<T> tab(A,b);
  tab.SetCost(c);
  
  // gout << "\nInitial Tableau = \n";
  // tab.Dump(gout);

  DualSearch(tab);
}
  
template <class T> void VertEnum<T>::Search(LPTableau<T> &tab)
{
  int k;
  gList<gArray<int> > PivotList;
  gArray<int> pivot;
  if(tab.IsLexMin()) 
    List.Append(tab.GetBFS1());
  tab.ReversePivots(PivotList);  // get list of reverse pivots
  for(k=1;k<=PivotList.Length();k++) {
    pivot = PivotList[k];
    LPTableau<T> tab2(tab);
    npivots++;
    tab2.Pivot(pivot[1],pivot[2]);
    Search(tab2);
  }
}
  
template <class T> void VertEnum<T>::DualSearch(LPTableau<T> &tab)
{
  int i,j;

//  gList<gArray<int> > PivotList;
//  gArray<int> pivot;

  // gout << "\nin DualSearch";
  tab.SetConst(b);     // install original constraint vector
  Search(tab);         // do primal search
  if(mult_opt) {
    tab.SetConst(btemp);    // install artifical constraint vector
    for(i=b.First();i<=b.Last();i++)
      if(b[i]==0)
	for(j=-b.Last();j<=c.Last();j++) 
	  if(j && !tab.Member(j))
	    if(tab.IsDualReversePivot(i,j)) {
	      LPTableau<T> tab2(tab);
	      npivots++;
	      tab2.Pivot(i,j);
	      DualSearch(tab2);
	    }
  }
}
  
template <class T> BFS_List VertEnum<T>::VertexList() const
{ 
  return List;
}

template <class T> long VertEnum<T>::NumPivots() const
{
  return npivots;
}

template <class T> void VertEnum<T>::Dump(gOutput &to) const
{
  // gout << "\nin VertEnum::Dump()";
  for(int i=List.First();i<=List.Last();i++) {
    to << "\n";
    List[i].Dump(to);
  }
}



