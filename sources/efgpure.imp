//
// FILE: efgpure.cc -- Find all pure strategy Nash equilibria
//
// $Id$
//

#include "glist.h"

#include "efg.h"
#include "efgiter.h"
#include "efgciter.h"
#include "behavsol.h"

#include "efgpure.h"

int FindPureNash(const Efg &efg, const EFSupport &sup,
		 gList<BehavSolution> &eqs)
{
  int index;
  EfgContIter<double> citer(sup);
  gPVector<double> probs(efg.NumInfosets());

  do  {
    int flag = 1;
    citer.GetProfile().InfosetProbs(probs);

    EfgIter<double> eiter(citer);

    for (int pl = 1; flag && pl <= efg.NumPlayers(); pl++)  {
      double current = citer.Payoff(pl);
      for (int iset = 1; flag && iset <= efg.Players()[pl]->NumInfosets();
	         iset++)  {
      	if (probs(pl, iset) == 0)   continue;
	      Infoset *s = efg.Players()[pl]->Infosets()[iset];
       	for (int act = 1; act <= s->NumActions(); act++)  {
	        eiter.Next(pl, iset);
	        if (eiter.Payoff(pl) > current)  {
	          flag = 0;
	          break;
	        }
      	}
      }
    }

    if (flag)  {
      BehavProfile<double> temp(efg);
      // zero out all the entries, since any equlibria are pure
      ((gVector<double> &) temp).operator=(0);
      const PureBehavProfile<double> &profile = citer.GetProfile();
      for (int pl = 1; pl <= efg.NumPlayers(); pl++)  {
	      for (int iset = 1; iset <= efg.Players()[pl]->NumInfosets();
	           iset++)
	        temp(pl, iset, profile.Get(efg.Players()[pl]->Infosets()[iset])->GetNumber()) = 1;
      }

      index = eqs.Append(BehavSolution(temp, EfgAlg_PURENASH));
      eqs[index].SetIsNash(T_YES);
    }
  }  while (citer.NextContingency());

  return eqs.Length();
}




//-----------------------------------
// Interfacing to solve-by-subgame
//-----------------------------------


template <class T> class EfgPSNEBySubgame : public SubgameSolver<T>  {
  private:
    int SolveSubgame(const Efg &, const EFSupport &,
		     gList<BehavSolution> &);
    EfgAlgType AlgorithmID() const { return EfgAlg_PURENASHSUB; }    

  public:
    EfgPSNEBySubgame(const Efg &E, const EFSupport &, int max = 0);
    virtual ~EfgPSNEBySubgame();
};

template <class T>
int EfgPSNEBySubgame<T>::SolveSubgame(const Efg &E, const EFSupport &sup,
				      gList<BehavSolution> &solns)
{
  FindPureNash(E, sup, solns);

  return 0;
}

template <class T>
EfgPSNEBySubgame<T>::EfgPSNEBySubgame(const Efg &E, const EFSupport &S,
				      int max)
  : SubgameSolver<T>(E, S, max)
{ }

template <class T> EfgPSNEBySubgame<T>::~EfgPSNEBySubgame()   { }
  

