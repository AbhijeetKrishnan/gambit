//
// FILE: efgpure.imp -- Find all pure strategy Nash equilibria
//
// $Id$
//

#include "glist.h"

#include "efg.h"
#include "efgiter.h"
#include "efgciter.h"
#include "behavsol.h"

#include "efgpure.h"

int FindPureNash(const EFSupport &sup, gList<BehavSolution> &eqs)
{
  int index;
  EfgContIter citer(sup);
  gPVector<gNumber> probs(sup.Game().NumInfosets());

  do  {
    int flag = 1;
    citer.GetProfile().InfosetProbs(probs);

    EfgIter eiter(citer);

    for (int pl = 1; flag && pl <= sup.Game().NumPlayers(); pl++)  {
      gNumber current = citer.Payoff(pl);
      for (int iset = 1; flag && iset <= sup.Game().Players()[pl]->NumInfosets();
	         iset++)  {
      	if (probs(pl, iset) == gNumber(0))   continue;
	      Infoset *s = sup.Game().Players()[pl]->Infosets()[iset];
       	for (int act = 1; act <= s->NumActions(); act++)  {
	  eiter.Next(pl, iset);
	  if (eiter.Payoff(pl) > current)  {
	    flag = 0;
	    break;
	  }
      	}
      }
    }

    if (flag)  {
      BehavProfile<double> temp(sup);
      // zero out all the entries, since any equlibria are pure
      ((gVector<double> &) temp).operator=(0);
      const PureBehavProfile<gNumber> &profile = citer.GetProfile();
      for (int pl = 1; pl <= sup.Game().NumPlayers(); pl++)  {
	for (int iset = 1; iset <= sup.Game().Players()[pl]->NumInfosets();
	     iset++)
	  temp(pl, iset, profile.GetAction(sup.Game().Players()[pl]->Infosets()[iset])->GetNumber()) = 1;
      }

      index = eqs.Append(BehavSolution(temp, EfgAlg_PURENASH));
      eqs[index].SetIsNash(triTRUE);
    }
  }  while (citer.NextContingency());

  return eqs.Length();
}

  

