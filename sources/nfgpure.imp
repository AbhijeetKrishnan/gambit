//
// FILE: nfgpure.imp -- Find all pure strategy Nash equilibria
//
// $Id$
//

#include "nfgpure.h"

#include "gstream.h"
#include "nfg.h"
#include "nfgiter.h"
#include "nfgciter.h"
#include "glist.h"
#include "mixed.h"

int FindPureNash(const Nfg &N, const NFSupport &S, gList<MixedSolution> &eqs)
{
  int index;
  NfgContIter citer(S);

  gArray<gNumber> values(N.Parameters()->Dmnsn());
  for (int i = 1; i <= values.Length(); values[i++] = gNumber(0));
  do  {
    int flag = 1;
    NfgIter niter(citer);
    
    for (int pl = 1; flag && pl <= N.NumPlayers(); pl++)  {
      double current = N.Payoff(citer.GetOutcome(), pl).Evaluate(values);
      for (int i = 1; i <= S.NumStrats(pl); i++)  {
	niter.Next(pl);
	if (N.Payoff(niter.GetOutcome(), pl).Evaluate(values) > (gNumber)current)  {
	  flag = 0;
	  break;
	}
      }
    }
    
    if (flag)  {
      MixedProfile<double> temp(S, values);
      // zero out all the entries, since any equlibria are pure
      ((gVector<double> &) temp).operator=(0);
      gArray<int> profile = citer.Get();
      for (int i = 1; i <= profile.Length(); i++)
	temp(i, profile[i]) = 1;

      index = eqs.Append(MixedSolution(temp, NfgAlg_PURENASH));
      eqs[index].SetIsNash(T_YES);
    }
  }  while (citer.NextContingency());
  
  return eqs.Length();
}

