//
// $Source$
// $Date$
// $Revision$
//
// DESCRIPTION:
// Implementation of mixed strategy profile classes
//
// This file is part of Gambit
// Copyright (c) 2002, The Gambit Project
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include "nfgsupport.h"
#include "nfgcont.h"
#include "mixed.h"
#include "gamebase.h"

template <class T> void gbtMixedProfileRep<T>::SetCentroid(void) 
{
  for (int pl = 1; pl <= NumPlayers(); pl++)  {
    gbtGamePlayer player = GetPlayer(pl);
    T center = ((T) 1) / ((T) player->NumStrategies());
    for (int st = 1; st <= player->NumStrategies(); 
	 (*this)(pl, st++) = center);
  }
}

template <class T> T gbtMixedProfileRep<T>::GetLiapValue(void) const
{
  static const T BIG1 = (T) 100;
  static const T BIG2 = (T) 100;

  gbtMixedProfile<T> p(Copy());
  gbtMixedProfile<T> tmp(p->Copy());
  gbtPVector<T> payoff(NumStrategies());
  T x, result((T) 0), avg, sum;
  payoff = (T) 0;

  for (int i = 1; i <= NumPlayers(); i++) {
    gbtGamePlayer player = GetPlayer(i);
    tmp->CopyStrategy(GetPlayer(i), payoff);
    avg = sum = (T) 0;
    // then for each strategy for that player set it to 1 and evaluate
    int j;
    for (j = 1; j <= player->NumStrategies(); j++) {
      tmp(i, j) = (T) 1;
      x = p(i, j);
      payoff(i, j) = tmp->GetPayoff(tmp->GetPlayer(i));
      avg += x * payoff(i, j);
      sum += x;
      if (x>(T)0) x=0;
      result += BIG1*x*x;         // add penalty for neg probabilities
      tmp(i,j) = (T) 0;
    }
    tmp->CopyStrategy(tmp->GetPlayer(i), p);
    for (j = 1; j <= player->NumStrategies(); j++) {
      x=payoff(i,j)-avg;
      if (x<=(T)0) x=(T)0;
      result += x*x;          // add penalty if not best response
    }
    x=sum - ((T) 1);
    result += BIG2*x*x ;          // add penalty for sum not equal to 1
  }
  return result;
}

template <class T> 
void gbtMixedProfileRep<T>::GetRegret(gbtPVector<T> &value) const
{
  for (int i = 1; i <= NumPlayers(); i++) {
    T pay = GetPayoff(GetPlayer(i));
    for (int j = 1; j <= GetPlayer(i)->NumStrategies(); j++) {
      T x = GetStrategyValue(GetPlayer(i)->GetStrategy(j));
      if (x > pay) {
	value(i, j) = x - pay;
      }
      else {
	// use pay - pay instead of zero for correct precision
	value(i,j) = pay - pay; 
      }
    }
  }
}

template <class T> gbtOutput &operator<<(gbtOutput &f, 
					 const gbtMixedProfile<T> &p)
{ return f; }


