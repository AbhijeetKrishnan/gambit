//
// $Source$
// $Date$
// $Revision$
//
// DESCRIPTION:
// Implementation of gbtBlock type
//
// This file is part of Gambit
// Copyright (c) 2002, The Gambit Project
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include <stdlib.h>
#include "gblock.h"

template <class T> gbtBlock<T>::gbtBlock(unsigned int len) : gbtArray<T>(len)   { }

template <class T> gbtBlock<T>::gbtBlock(int lo, int hi) : gbtArray<T>(lo, hi)  { }

template <class T> gbtBlock<T>::gbtBlock(const gbtBlock<T> &b) : gbtArray<T>(b)  { }

template <class T> gbtBlock<T>::~gbtBlock()   { }

template <class T> gbtBlock<T> &gbtBlock<T>::operator=(const gbtBlock<T> &b)
{
  gbtArray<T>::operator=(b);
  return *this;
}

template <class T> bool gbtBlock<T>::operator==(const gbtBlock<T> &b) const
{
  if (mindex != b.mindex || maxdex != b.maxdex) return false;
  for (int i = mindex; i <= maxdex; i++) 
    if (data[i] != b.data[i]) return false;
  return true;
}

template <class T> bool gbtBlock<T>::operator!=(const gbtBlock<T> &b) const
{
  return !(*this == b);
}

template <class T> gbtBlock<T> gbtBlock<T>::operator+(const gbtBlock<T>& b) const
{
  gbtBlock<T> result(*this);
  for (int i = b.mindex; i <= b.maxdex; i++)
    result.Append(b[i]);
  return result;
}

template <class T> gbtBlock<T> gbtBlock<T>::operator+(const T &e) const
{
  gbtBlock<T> result(*this);
  result.Append(e);
  return result;
}

template <class T> gbtBlock<T> &gbtBlock<T>::operator+=(const T &e)
{
  Append(e);
  return *this;
}

template <class T> gbtBlock<T> &gbtBlock<T>::operator+=(const gbtBlock<T> &b)
{
  *this = *this + b;
  return *this;
}

template <class T> int gbtBlock<T>::InsertAt(const T &t, int n)
{
  if (mindex > n || n > maxdex + 1)   throw gbtIndexException();
    
  T *new_data = new T[++maxdex - mindex + 1] - mindex;

  int i;
  for (i = mindex; i <= n - 1; i++)       new_data[i] = data[i];
  new_data[i++] = t;
  for (; i <= maxdex; i++)       new_data[i] = data[i - 1];

  if (data)   delete [] (data + mindex);
  data = new_data;

  return n;
}

template <class T> int gbtBlock<T>::Append(const T &t)
{
  return InsertAt(t, maxdex + 1);
}

template <class T> int gbtBlock<T>::Insert(const T &t, int n)
{
  return InsertAt(t, (n < mindex) ? mindex : ((n > maxdex + 1) ? maxdex + 1 : n));
}

template <class T> T gbtBlock<T>::Remove(int n)
{
  if (n < mindex || n > maxdex)    throw gbtIndexException();

  T ret(data[n]);
  T *new_data = (--maxdex>=mindex) ? new T[maxdex-mindex+1] - mindex : 0;

  int i;
  for (i = mindex; i < n; i++)      new_data[i] = data[i];
  for (; i <= maxdex; i++)         new_data[i] = data[i + 1];

  delete [] (data + mindex);
  data = new_data;

  return ret;
}

template <class T> int gbtBlock<T>::Find(const T &t) const
{
  int i;
  for (i = mindex; i <= maxdex && data[i] != t; i++);
  return (i <= maxdex) ? i : 0;
} 

template <class T> int gbtBlock<T>::Contains(const T &t) const
{ return Find(t); }

template <class T> void gbtBlock<T>::Flush(void)
{ maxdex = mindex - 1;  if (data)  delete [] (data + mindex);  data = 0; }


