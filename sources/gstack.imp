//#
//# FILE: gstack.imp -- Implementation of stack type
//#
//# @(#)gstack.imp	2.1 03/24/97
//#

#include "gstack.h"
#include <assert.h>

template <class T> gStack<T>::gStack(int md) : depth(0), max_depth(md)
{
  assert(md > 0);
  contents = new T[md];
  assert(contents != 0);
}

template <class T> gStack<T>::~gStack()
{
  delete [] contents;
}

template <class T> int gStack<T>::Depth(void) const
{ return depth; }

template <class T> int gStack<T>::MaxDepth(void) const
{ return max_depth; }

template <class T> void gStack<T>::Push(T new_el)
{
  if (depth >= max_depth)
    Resize(max_depth + 10);

  contents[depth++] = new_el;
}

template <class T> T gStack<T>::Pop(void)
{
  assert(depth > 0);
  return contents[--depth];
}

template <class T> T& gStack<T>::Peek(void)
{
  assert(depth > 0);
  return contents[depth - 1];
}

template <class T> T gStack<T>::Peek(void) const
{
  assert(depth > 0);
  return contents[depth - 1];
}

template <class T> void gStack<T>::Flush(void)
{
  depth = 0;
}

template <class T> void gStack<T>::Resize( int new_max_depth )
{
  int i;
  T*  new_contents;

  if( new_max_depth > depth )
  {
    new_contents = new T[ new_max_depth ];
    for( i = 0; i < depth; i++ )
    {
      new_contents[ i ] = contents[ i ];
    }
    delete[] contents;
    contents = new_contents;
    max_depth = new_max_depth;
  }
}

