//#
//# FILE: grarray.imp -- Implementation of base rectangular array class
//#
//# $Id$
//#

#include "grarray.h"

#include <assert.h>

//------------------------------------------------------------------------
//                   Private/protected member functions
//------------------------------------------------------------------------

template <class T> bool gRectArray<T>::Check(int row, int col) const
{
  return (row >= minrow && row <= maxrow && col >= mincol && col <= maxcol);
}

//------------------------------------------------------------------------
//            Constructors, destructor, constructive operators
//------------------------------------------------------------------------

template <class T> gRectArray<T>::gRectArray(void)
  : minrow(1), maxrow(0), mincol(1), maxcol(0), data(0)
{ }

template <class T> gRectArray<T>::gRectArray(int rows, int cols)
  : minrow(1), maxrow(rows), mincol(1), maxcol(cols)
{
  assert(rows > 0 && cols > 0);
  data = new T *[maxrow] - 1;
  for (int i = 1; i <= maxrow; data[i++] = new T[maxcol] - 1);
}

template <class T>
gRectArray<T>::gRectArray(int minr, int maxr, int minc, int maxc)
  : minrow(minr), maxrow(maxr), mincol(minc), maxcol(maxc)
{
  assert(maxrow >= minrow && maxcol >= mincol);
  data = new T *[maxrow - minrow + 1] - minrow;
  for (int i = minrow; i <= maxrow;
       data[i++] = new T[maxcol - mincol + 1] - mincol);
}

template <class T> gRectArray<T>::gRectArray(const gRectArray<T> &a)
  : minrow(a.minrow), maxrow(a.maxrow), mincol(a.mincol), maxcol(a.maxcol)
{
  data = (maxrow >= minrow) ? new T *[maxrow - minrow + 1] - minrow : 0;
  for (int i = minrow; i <= maxrow; i++)  {
    data[i] = new T[maxcol - mincol + 1] - mincol;
    for (int j = mincol; j <= maxcol; j++)
      data[i][j] = a.data[i][j];
  }
}

template <class T> gRectArray<T>::~gRectArray()
{
  for (int i = minrow; i <= maxrow; delete [] (data[i++] + mincol));
  if (data)  delete [] (data + minrow);
}

template <class T>
gRectArray<T> &gRectArray<T>::operator=(const gRectArray<T> &a)
{
  for (int i = minrow; i <= maxrow; delete [] (data[i++] + mincol));
  if (data)  delete [] (data + minrow);

  minrow = a.minrow;
  maxrow = a.maxrow;
  mincol = a.mincol;
  maxcol = a.maxcol;

  data = (maxrow >= minrow) ? new T *[maxrow - minrow + 1] - minrow : 0;
  
  for (i = minrow; i <= maxrow; i++)  {
    data[i] = new T[maxcol - mincol + 1] - mincol;
    for (int j = mincol; j <= maxcol; j++)
      data[i][j] = a.data[i][j];
  }

  return *this;
}

//------------------------------------------------------------------------
//                          Data access members
//------------------------------------------------------------------------

template <class T> int gRectArray<T>::NumRows(void) const
{ return maxrow - minrow + 1; }

template <class T> int gRectArray<T>::NumColumns(void) const
{ return maxcol - mincol + 1; }

template <class T> int gRectArray<T>::MinRow(void) const    { return minrow; }
template <class T> int gRectArray<T>::MaxRow(void) const    { return maxrow; }
template <class T> int gRectArray<T>::MinColumn(void) const { return mincol; }
template <class T> int gRectArray<T>::MaxColumn(void) const { return maxcol; }

template <class T> T &gRectArray<T>::operator()(int r, int c)
{
  assert(Check(r, c));
  return data[r][c];
}

template <class T> const T &gRectArray<T>::operator()(int r, int c) const
{
  assert(Check(r, c));
  return data[r][c];
}

template <class T> void gRectArray<T>::Dump(gOutput &f) const
{
  f << "{ ";
  for (int i = minrow; i <= maxrow; i++)  {
    if (i > 1)  f << "\n  ";
    f << "{ ";
    for (int j = mincol; j <= maxcol; j++)
      f << data[i][j] << ' ';
    f << "}";
  }
  f << " }\n";
}

template <class T> gOutput &operator<<(gOutput &f, const gRectArray<T> &a)
{
  a.Dump(f);   return f;
}

//------------------------------------------------------------------------
//                       Row rotation and swapping
//------------------------------------------------------------------------

template <class T> void gRectArray<T>::RotateUp(int lo, int hi)
{
  assert(lo >= minrow && hi >= lo && maxrow >= hi);
  T *temp = data[lo];
  for (int k = lo; k < hi; k++)
    data[k] = data[k + 1];
  data[hi] = temp;
}

template <class T> void gRectArray<T>::RotateDown(int lo, int hi)
{
  assert(lo >= minrow && hi >= lo && maxrow >= hi);
  T *temp = data[hi];
  for (int k = hi; k > lo; k--)
    data[k] = data[k - 1];
  data[lo] = temp;
}

template <class T> void gRectArray<T>::RotateLeft(int lo, int hi)
{
  assert(lo >= mincol && hi >= lo && maxcol >= hi);
  
  T temp;
  for (int i = minrow; i <= maxrow; i++)  {
    T *row = data[i];
    temp = row[lo];
    for (int j = lo; j < hi; j++)
      row[j] = row[j + 1];
    row[hi] = temp;
  }
}

template <class T> void gRectArray<T>::RotateRight(int lo, int hi)
{
  assert(lo >= mincol && hi >= lo && maxcol >= hi);

  T temp;
  for (int i = minrow; i <= maxrow; i++)  {
    T *row = data[i];
    temp = row[hi];
    for (int j = hi; j > lo; j--)
      row[j] = row[j - 1];
    row[lo] = row[hi];
  }
}

template <class T> void gRectArray<T>::SwitchRows(int i, int j)
{
  assert(i >= minrow && i <= maxrow && j >= minrow && j <= maxrow);
  T *temp = data[j];
  data[j] = data[i];
  data[i] = temp;
}

