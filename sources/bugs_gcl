GCL Bugs

//------------------------------

Bug C5: Incorrect solutions, and crashing with large integers:

  46 mill:/home/mill/rdm/gambit/test newgcl
  Include["gclini.gcl"]
  Include["stdudfs.gcl"]
  GCL1:= << p:={ { { 343519405, 57518365 }, { 905196150, 857537702 } },{ { 500889218, 1982990232 }, { 83903549, 1493083335 } } }
  { { { 343519405, 57518365 }, { 905196150, 857537702 } },
    { { 500889218, 1982990232 }, { 83903549, 1493083335 } } }
  GCL2:= << n:=Nfg[p]
  (Nfg) ""
  GCL3:= << AllNash[n]
  {  (MIXED) }
  GCL4:= << LcpSolve[n]
  gcl_mill: lemketab.cc:166: int LTableau<double>::ExitIndex(int): Assertion `c <= MaxRow()' failed.
  A segmentation fault has occurred

This looks like an algorithm bug.  I'll see if I can track it down
(rdm).  The following bug looks like the same thing: 

RDM: This was moved here from the GUI bug list (9/3/98).  The file is
in ~rdm/gambit/nfg/osborne.nfg

  222 mill:/home/mill/rdm/gambit/test newgcl
  Include["gclini.gcl"]
  Include["/home/mill/rdm/gambit/bin/stdudfs.gcl"]
  GCL1:= << n:=LoadNfg["../nfg/osborne.nfg"]
  (Nfg) "4 actions; minimal action 0.00; maximal action 0.50"
  GCL2:= << LcpSolve[n]
  gcl_mill: lemketab.cc:166: int LTableau<double>::ExitIndex(int): Assertion `c <= MaxRow()' failed.
  A segmentation fault has occurred



//------------------------------

Bug C8:  Bug in mixed dominance elimination.  

  311 mill:/home/mill/rdm/gambit/test2 newgcl
  Include["gclini.gcl"]
  Include["stdudfs.gcl"]
  GCL1:= << e:=LoadEfg["poker.efg"]
  (Efg) "A simple Poker game"
  GCL2:= << n := Nfg[e];
  (Nfg) "A simple Poker game"
  GCL3:= << s:=ElimAllDom[n,strong->True,mixed->True];
  gcl_mill: tableau.imp:385: void LPTableau<gRational>::SetCost(const class gVector<gRational> &): Assertion `c.Last()==(cost.Last()+unitcost.Length())' failed.
  A segmentation fault has occurred

//------------------------------

Bug C9a: The Include["x"] bug on billandal is fixed, but the other IO functions
are still having the same problem there:

  43 billandal:/home/mill/rdm/gambit/sources gcl_AIX
  Include["gclini.gcl"]
  Include["stdudfs.gcl"]
  GCL1:= << LoadNfg["x"]
  A segmentation fault has occurred

Also, when you quit the gcl on billandal, it seg faults.  As before,
none of these are a problem on mill or koo.  

COMMENT (magyar 8/29/98)  Appears to be a compiler bug with g++ 2.8.1 on
RS6k and catching exceptions.

//------------------------------

Bug C17  Bad line numbers for parse errors.  

  148 mill:/home/mill/rdm/gambit/test newgcl
  Include["gclini.gcl"]
  Include["stdudfs.gcl"]
  GCL1:= << Include["bcp.gcl"]    
  True
  parse error at line 56 in file bcp.gcl: identifier size

but line 56 is a comment.  

//------------------------------

Bug C18: Bug in LPSolve[] (or use the script gambit/test/csumsolve.gcl):

  GCL1:= << n:=LoadNfg["../nfg/cs1.nfg"]
  (Nfg) ""
  GCL2:= << m:=LpSolve[n,stopAfter->0]

  c: { 0.000000 0.000000 0.000000 1.000000 }
  uc: { 0.000000 0.000000 0.000000 0.000000 }
  col: 1 cost: 0.000000 label: 4 x: 1.000000
  col: 2 cost: -1.000000 label: -2 x: In function LpSolve[], in file "stdudfs.gcl" at line 463:
  In function LpSolve[], in file "console" at line 2:
  GCL EXCEPTION:Bad index in gArray; Caught in gcl.cc, main()

//--------------------------------------

Bug C20: Read[StdIn,x] hangs the machine (it had to be killed remotely)

  GCL1:= << Read[StdIn,x]
  GCL: Parameter 2 undefined in call to Read
  GCL2:= << x:=0
  0
  GCL3:= << Read[StdIn,x]
  Killed

//------------------------------

Bug C21: Algorithms producing nonsense on games of imperfect recall

  GCL1:= << e:=LoadEfg["myerson.efg"]
  (Efg) "Myerson - Game with no solution in behavioral strategies"
  GCL2:= << IsPerfectRecall[e]       
  False
  GCL3:= << b:=LcpSolve[e]              
  { (Behav) { { 0.000000 1.000000 }{ 0.250000 0.750000 } }{ { 0.500000 0.500000 } } }
  GCL4:= << IsNash[b]
  { False }
  GCL5:= << OneNash[e]   
  { (Behav) { { 0.500000 0.500000 }{ 1.000000 1.000000 } }{ { 0.500000 0.500000 } } }
  GCL6:= << IsNash[GCL5] 
  { Maybe }

//------------------------------

Bug C25:  Saving games loses precision.  


  GCL1:= << n:=NewNfg[{2,2},True]
  (Nfg) ""
  GCL2:= << SetPayoffs[Outcomes[n]_1,{1.0123456789,0.0}]
  (NFOutcome) 0x83917b0 "11"
  GCL3:= << SetNumericFormat[precis->10]
  True
  GCL4:= << Payoffs[n]
  { { { 1.0123456789, 0.0000000000 }, { 0, 0 } },
    { { 0, 0 }, { 0, 0 } } }
  GCL5:= << SaveNfg[n,"junk"]
  (Nfg) ""
  GCL6:= << nn:=LoadNfg["junk"]
  (Nfg) ""
  GCL7:= << Payoffs[nn]        
  { { { 1.0123460000, 0.0000000000 }, { 0, 0 } },
    { { 0, 0 }, { 0, 0 } } }

//-----------------------------

Bug C26:  Incomplete profiles, LiapValue, and so forth

GCL1:= << LoadEfg["D:/gambit/efg/e02.efg"]
(Efg) "Selten (IJGT, 75), Figure 2"
GCL2:= << LcpSolve[GCL1]
{ (Behav) { { 1.000000 0.000000 }{ 0.000000 0.000000 } }{ { 0.500000 0.500000 } } }
GCL3:= << LiapValue[GCL2]
{ 100.000000 }

This is actually a symptom of the "incomplete" profiles generated by
LcpSolve[EFG], Behav[NFG], and so forth.  The fix is to improve
BehavProfile<T> and BehavSolution to be smart enough to realize when
action probabilities at certain information sets are not specified.
(This bug affects the GUI as well, of course.)

//-----------------------------

Bug C27: can't unassign a static variable

  GCL1:= << $a:=1
  1
  GCL2:= << $a:=
  EXCEPTION: Bad key passed to HashTable

//-----------------------------

Bug C28: Fails to resolve zero-parameter function calls to overloaded function:

GCL1:= << NewFunction[Foo[], 1]
True
GCL2:= << Foo[]
1
GCL3:= << NewFunction[Foo[x->NUMBER], 1]
True
GCL4:= << Foo[]
ERROR: No matching parameter specifications found for Foo[]
GCL5:= << Foo[1]
1


//---------------  These are not bugs but suggested improvements ------------

S1: A suggestion to add command line arguments.  Perhaps we should
have a -Ifilename flag to include a file?

On Mon, 11 May 1998, Olson Collin K wrote:

> One simple creature comfort that would make programming in Gambit zounds
> easier would be to take all of the command line arguemnts to gcl32 and
> automatically Include[] them.  So far as I can tell from the manual, there
> is no way to do this.
> 
> I prefer to code using my own text editor, and this feature would make it
> much easier to do my own coding from outside the gcl command console and
> allow me to write software that calls gcl iteratively, for example.


