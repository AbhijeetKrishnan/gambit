//#
//# FILE: tableau.imp: implementation of tableau and Tableau classes
//#
//# $Id$
//#

#include "tableau.h"

    // These are the values recommended by Murtagh (1981) for 15 digit 
    // accuracy in LP problems 
void Epsilon_T(double &v, int i)
{
  if(i==1)v=(double)1.0e-5;
  if(i==2)v=(double)1.0e-8;
  if(i==3)v=(double)1.0e-6;
}

void Epsilon_T(gRational &v, int) { v = (gRational)0;}

template <class T> 
Basis<T>::Basis(const gMatrix<T> &A)
  :  A(&A), label(A.MinRow(), A.MaxRow())
{
  for(int i=label.First(); i<=label.Last(); i++)
    label[i]= - i;
}


template <class T>
Basis<T>::Basis(const Basis<T> &bas)
  : A(bas.A), label(bas.label)
{ }

template <class T>
Basis<T>::~Basis()
{ }

template <class T>
Basis<T>& Basis<T>::operator=(const Basis<T> &code)
{
  if(this != &code) {
    A = code.A;
    label= code.label; }
  return *this;
}


//
// ordinary Basis methods:
//

template <class T>
int Basis<T>::Pivot(int outindex, int col)
{
  // gout << "\nPivot: comp = " << outindex << " out= ";
  // gout << label[outindex] << " in= " << col;
  if( col<0 ) 
    assert(A->CheckRow(-col) );
  else 
    assert( A->CheckColumn(col) );

//  label.Append(col);
//  return label.Remove(outindex);
//
//     with gBlocks, the following is faster than the above

  /*
    // this is for the old LUDecomp code
  int i;
  int outlabel = label[outindex];
  for(i=outindex;i<label.Last();i++)
    label[i]=label[i+1];
  label[i]=col;
  return outlabel;
  */

    // this is for the new LUDecomp code
  int outlabel = label[outindex];
  label[outindex] = col;
  return outlabel;
}

template <class T>
bool Basis<T>::Member(int col) const
{
  for(int i=label.First(); i<=label.Last(); i++)
    if(label[i]==col )
      return 1;
  return 0;
}

template <class T>
int Basis<T>::Find(int col) const
{
  for(int i=label.First(); i<=label.Last(); i++)
    if( label[i]==col )
      return i; // returns Tableau index
  assert(0); // couldn't find column (also, assumes there are no duplicates)
  return 0;
}

template <class T>
int Basis<T>::Label(int index) const
{
  return  label[index];
}

template <class T>
void Basis<T>::BasisSelect(const gVector<T> &rowv, gVector<T> &colv) const
{
  assert(A->CheckColumn(colv) && A->CheckRow(rowv));

  for(int i=label.First(); i<=label.Last(); i++) {
    if(label[i]<0)
      colv[i]= 0;
    else
      colv[i]= rowv[label[i]];
  }
}

template <class T>
void Basis<T>::BasisSelect(const gVector<T> &unitv,
			   const gVector<T> &rowv,
			   gVector<T> &colv ) const
{
  assert(A->CheckColumn(colv)
	 && A->CheckColumn(unitv)
	 && A->CheckRow(rowv) );
  
  for(int i=label.First(); i<=label.Last(); i++) {
    if(label[i]<0)
      colv[i]= unitv[-label[i]];
    else
      colv[i]= rowv[label[i]];
  }
}

template <class T> gOutput &operator<<(gOutput &to, const Basis<T> &v)
{
  v.Dump(to); return to;
}

template <class T>
void Basis<T>::Dump(gOutput &to) const
{ 
  to << "{";
  for(int i=label.First();i<=label.Last();i++) {
    to << "  " << label[i];  
  }
  to << " }";
}

//
// Tableau method definitions
//

// Constructors and Destructor

template <class T>
Tableau<T>::Tableau(const gMatrix<T> &A, const gVector<T> &b)
  : npivots(0), tmpcol(A.MinRow(),A.MaxRow()), A(&A), b(&b), 
    basis(A),  B(A),
    solution(A.MinRow(),A.MaxRow()) 
{
  Epsilon_T(eps1,1);
  Epsilon_T(eps2,2);
//  gout << "\nA = " << A << "\ndim A: " << A.MinRow() << " " << A.MaxRow();
//  gout << " " << A.MinCol() << " " << A.MaxCol();
//  gout << "\nbasis = ";
//  basis.Dump(gout);
//  B.refactor(A, basis.label);
  B.solve(b, solution);
};


template <class T> 
Tableau<T>::Tableau(const Tableau<T> &orig) 
  : npivots(0), eps1(orig.eps1), eps2(orig.eps2), tmpcol(orig.tmpcol),
    A(orig.A),b(orig.b), basis(orig.basis), B(orig.B),
    solution(orig.solution) 
{ }

template <class T> Tableau<T>::~Tableau()
{ }

template <class T>
Tableau<T>& Tableau<T>::operator=(const Tableau<T> &orig)
{
//  assert( A==orig.A );
  if(this!= &orig) {
    tmpcol = orig.tmpcol;
    A = orig.A;
    b = orig.b;
    basis= orig.basis;
    B= orig.B;
    solution= orig.solution;
    npivots = orig.npivots;
  }
  return *this;
}

//
// checking functions
//

// template <class T> BaseTableau<T>::~BaseTableau()
// { }

template <class T>
bool BaseTableau<T>::ColIndex(int x) const
{ return MinCol()<=x && x<=MaxCol(); }

template <class T>
bool BaseTableau<T>::RowIndex(int x) const
{ return MinRow()<=x && x<=MaxRow(); }

template <class T>
bool BaseTableau<T>::ValidIndex(int x) const
{ return (ColIndex(x) || RowIndex(-x)); }

template <class T>
void BaseTableau<T>::CompPivot(int outlabel, int col)
{
  Pivot(Find(outlabel),col);
  Pivot(Find(-col),-outlabel);
}

template <class T>
int Tableau<T>::MinRow() const { return A->MinRow(); }

template <class T>
int Tableau<T>::MaxRow() const { return A->MaxRow(); }

template <class T>
int Tableau<T>::MinCol() const { return A->MinCol(); }

template <class T>
int Tableau<T>::MaxCol() const { return A->MaxCol(); }


template <class T>
bool Tableau<T>::Member(int i) const
{ return basis.Member(i);}

template <class T>
int Tableau<T>::Label(int i) const
{ return basis.Label(i);}

template <class T>
int Tableau<T>::Find(int i) const
{ return basis.Find(i);}


//
// pivoting operations
//

template <class T>
int Tableau<T>::CanPivot(int outlabel, int col)
{
//  gVector<T> tmpcol(MinRow(),MaxRow());
//  gout << "\ndim tmpcol = " << tmpcol.First() << " " << tmpcol.Last();
//  gout << "\ntmpcol = " << tmpcol;
  SolveColumn(col,tmpcol);
  T val = tmpcol[basis.Find(outlabel)];
  if(val <=eps2 && val >= -eps2) return 0;
  return 1;  
}

template <class T>
void Tableau<T>::Pivot(int outrow,int col)
{
  assert( RowIndex(outrow) );
  assert( ValidIndex(col) );
  basis.Pivot(outrow,col);

  /*
  if( col<0 )
    { tmpcol=(T)0; tmpcol[-col]=(T)1; }
  else
    A->GetColumn(col, tmpcol);
  B.update(outrow, tmpcol);
  */
  
  B.update(outrow, col);
  B.solve(*b, solution);
  npivots++;
}

template <class T> long Tableau<T>::NumPivots() const
{ return npivots; }

template <class T> long &Tableau<T>::NumPivots()
{ return npivots; }

//
// raw Tableau functions
//

template <class T> void Tableau<T>::Refactor()
{
//  B.refactor(*A, basis.label);
  B.solve(*b, solution);
}

    // solve A x = b 
template <class T>
void Tableau<T>::Solve(const gVector<T> &b, gVector<T> &x) const
{
  B.solve(b,x);
}

    // solve y A = c 
template <class T>
void Tableau<T>::SolveT(const gVector<T> &c, gVector<T> &y) const
{
  B.solveT(c,y);
}

template <class T>
void Tableau<T>::BasisVector(gVector<T> &out) const
{
  out= solution;
}

template <class T>
void Tableau<T>::SolveColumn(int col, gVector<T> &out)
{
//  gout << "\nTableau<T>::SolveColumn  " << MinRow() << " " << MaxRow(); 
//  gout << " col: " << col;
  gVector<T> tmpcol2(MinRow(),MaxRow());
  if( col<0 ) {
    tmpcol2= (T)0;
    tmpcol2[-col]=1;
  }
  else
    A->GetColumn(col,tmpcol2);
  B.solve(tmpcol2,out);
}


template <class T>
void Tableau<T>::SetConst(const gVector<T> &bnew)
{
  assert(bnew.First()==b->First() && bnew.Last()==b->Last());
  b=&bnew;
  B.solve(*b, solution);
}

/*
template <class T>
void Tableau<T>::SetBasis(const Basis<T> &in)
{
  basis= in;
  B.refactor(template->A, code.basis);
  B.solve(template->b, solution);
  if( costdefined )
    SolveDual();
}
*/

template <class T>
void Tableau<T>::GetBasis(Basis<T> &out) const
{
  out= basis;
}

// miscellaneous functions

template <class T>
bool Tableau<T>::IsNash() const
{ for(int i=solution.First();i<=solution.Last();i++)
    if(solution[i]>(T) 0) return 0;
  return 1;
}

template <class T> bool Tableau<T>::EqZero(T x) const
{ 
  return (LeZero(x) && GeZero(x));
}

template <class T> bool Tableau<T>::LtZero(T x) const
{ 
  return !GeZero(x);
}

template <class T> bool Tableau<T>::GtZero(T x) const
{ 
  return !LeZero(x);
}

template <class T> bool Tableau<T>::LeZero(T x) const
{ 
  if(x <=eps2) return 1;
  return 0;
}

template <class T> bool Tableau<T>::GeZero(T x) const
{ 
  if(x >= -eps2) return 1;
  return 0;
}

template <class T> bool Tableau<T>::IsLexMin()
{
  int i,j;
  for(i=MinRow();i<=MaxRow();i++)
    if(EqZero(solution[i]))
      for(j=-MaxRow();j<Label(i);j++) if(j!=0){
	SolveColumn(j,tmpcol);
	if(LtZero(tmpcol[i]))
	  return 0;
      }
  return 1;
}

template <class T> BFS<T> Tableau<T>::GetBFS() const
{
  BFS<T> cbfs((T) 0);
  for(int i=MinCol();i<=MaxCol();i++) {
    if(Member(i)) 
      cbfs.Define(i,solution[basis.Find(i)]);
  }
  return cbfs;
}

template <class T> BFS<T> Tableau<T>::GetBFS1() const
{
  BFS<T> cbfs((T) 0);
int i;
  for(i=-MaxRow();i<=-MinRow();i++) {
    if(Member(i)) 
      cbfs.Define(i,solution[basis.Find(i)]);
  }
  for(i=MinCol();i<=MaxCol();i++) {
    if(Member(i)) 
      cbfs.Define(i,solution[basis.Find(i)]);
  }
  return cbfs;
}

template <class T> gOutput &operator<<(gOutput &to, const Tableau<T> &v)
{
  v.Dump(to); return to;
}

template <class T>
void Tableau<T>::Dump(gOutput &to) const
{ basis.Dump(to);to << "\n";solution.Dump(to); }


//
// LP Tableau member definitions 
// 


// template <class T> LPTableau<T>::LPTableau(void)
// : Tableau() , 
// { }


template <class T>
LPTableau<T>::LPTableau(const gMatrix<T> &A, const gVector<T> &b)
  : Tableau<T>(A,b), dual(A.MinRow(),A.MaxRow()),
    unitcost(A.MinRow(),A.MaxRow()),
    cost(A.MinCol(),A.MaxCol())
{
//  B.refactor(A, basis.label);
  B.solve(b, solution);
};


template <class T>
LPTableau<T>::LPTableau(const LPTableau<T> &orig)
  : Tableau<T>(orig), dual(orig.dual),  unitcost(orig.unitcost),
    cost(orig.cost)
{ }

template <class T> LPTableau<T>::~LPTableau()
{ }


template <class T>
LPTableau<T>& LPTableau<T>::operator=(const LPTableau<T> &orig)
{
//  assert( A==orig.A );
  Tableau<T>::operator=(orig);
  if(this!= &orig) {
    dual=orig.dual;
    unitcost= orig.unitcost;
    cost= orig.cost;
  }
  return *this;
}

// cost-based functions

template <class T>
void LPTableau<T>::SetCost(const gVector<T>& c)
{
  int i;
  if(cost.Check(c)) {
    unitcost= (T)0;
    cost= c;
    SolveDual();
    return;
  }
  assert(c.First()==cost.First());
  assert(c.Last()==(cost.Last()+unitcost.Length()));
  for(i=c.First();i<=cost.Last();i++)
    cost[i]=c[i];
  for(i=unitcost.First();i<=unitcost.Last();i++)
    unitcost[i]=c[cost.Length()+i-unitcost.First()+1];

  SolveDual();
}

template <class T>
void LPTableau<T>::SetCost(const gVector<T> &uc, const gVector<T> &c)
{
  assert(unitcost.Check(uc) && cost.Check(c));
  unitcost= uc;
  cost= c;
  SolveDual();
}


template <class T>
void LPTableau<T>::GetCost(gVector<T> &uc, gVector<T> &c) const
{
  uc= unitcost;
  c=cost; 
}

template <class T>
T LPTableau<T>::TotalCost()
{
//  gVector<T> tmpcol(MinRow(),MaxRow());
  basis.BasisSelect(unitcost,cost,tmpcol);
  return tmpcol*solution;
}

template <class T>
void LPTableau<T>::DualVector(gVector<T> &L) const
{
  L= dual;
}

template <class T>
T LPTableau<T>::RelativeCost(int col) const
{
  if( col<0 ) {
    return unitcost[-col] - dual[-col];
  }
  else {
//      gVector<T> tmpcol(MinRow(),MaxRow());
    A->GetColumn(col, (gArray<T> &)tmpcol);
    return cost[col] - dual*tmpcol;
  }
}
/*
template <class T>
void LPTableau<T>::RelativeCostVector(gVector<T> &relunitcost,
				      gVector<T> &relcost) const
{
  assert(A->CheckColumn(relunitcost));
  assert(A->CheckRow(relcost));
  
  relunitcost= unitcost - dual;
  relcost= cost - dual*A;  // pre multiplication not defined?  
}
*/

template <class T>
void LPTableau<T>::SolveDual()
{
  gVector<T> tmpcol1(MinRow(),MaxRow());
  basis.BasisSelect(unitcost,cost,tmpcol1);
  // gout << "\nIn SolveDual() tab = \n";
  // Dump(gout);
  // gout << "\n tmpcol1: " << tmpcol1;
  B.solveT(tmpcol1,dual);
  // gout << "\n dual: " << dual;
}

    // Redefined functions
template <class T> void LPTableau<T>::Refactor()
{
  Tableau<T>::Refactor();
  SolveDual();
}

template <class T>
void LPTableau<T>::Pivot(int outrow,int col)
{
  Tableau<T>::Pivot(outrow,col);
  SolveDual();
}

template <class T>
void LPTableau<T>::ReversePivots(gList<gArray<int> > &PivotList)
{
  bool flag;
  int i,j,k,enter;
  T ratio,a_ij,a_ik,b_i,b_k,c_j,c_k,c_jo,x;
  gList<int> BestSet;
  gArray<int> pivot(2);
  gVector<T> tmpdual(MinRow(),MaxRow());

  for(j=-MaxRow();j<=MaxCol();j++) if(j && !Member(j)) {
    SolveColumn(j,tmpcol);
    // gout << "\nColumn " << j;
    // gout << "\nPivCol = " << tmpcol;
    // gout << "\ncurrentSolCol = " << solution;
    
    // find all i where prior tableau is primal feasible
    
    BestSet.Flush();
    for(i=MinRow();i<=MaxRow();i++)
      if(GtZero(tmpcol[i])) BestSet.Append(i);
    if(BestSet.Length()>0) {
      ratio = solution[BestSet[1]]/tmpcol[BestSet[1]];
      // find max ratio
      for(i=2;i<=BestSet.Length();i++) {
	x = solution[BestSet[i]]/tmpcol[BestSet[i]];
	if(GtZero(x-ratio)) ratio = x;
      }
      // eliminate nonmaximizers
      for(i=BestSet.Length();i>=1;i--) {
	x = solution[BestSet[i]]/tmpcol[BestSet[i]];
	if(LtZero(x-ratio)) BestSet.Remove(i);
      }	

      // check that j would be the row to exit in prior tableau

      // first check that prior pivot entry > 0 
      for(i=BestSet.Length();i>=1;i--) {
	a_ij = (T)1/tmpcol[BestSet[i]];
	if(LeZero(a_ij)) {
	  // gout << "\nj not row to exit in prior tableau: a_ij <= 0";
	  BestSet.Remove(i);
	}
	else {
	  // next check that prior pivot entry attains max ratio
	  b_i = solution[BestSet[i]]/tmpcol[BestSet[i]];
	  ratio = b_i/a_ij;
  
	  flag = 0;
	  for(k=tmpcol.First();k<=tmpcol.Last() && !flag;k++) 
	    if(k!=BestSet[i]) {
	      a_ik = - a_ij * tmpcol[k];
	      b_k = solution[k] - b_i*tmpcol[k];
	      if(GtZero(a_ik) && GtZero(b_k/a_ik -ratio)) {
		// gout << "\nj not row to exit in prior tableau: ";
		// gout << "higher ratio at row= " << k;
		BestSet.Remove(i);
		flag = 1;
	      }
	      else if(GtZero(a_ik) && EqZero(b_k/a_ik-ratio) && Label(k)<j) {
		// gout << "\nj not row to exit in prior tableau: ";
		// gout << "same ratio,lower lex at k= " << k;
		BestSet.Remove(i);
		flag = 1;
	      }
	    }
	}
      }
    }
    // gout << "\nafter checking rows, BestSet = ";
    // BestSet.Dump(gout);

    // check that i would be the column to enter in prior tableau

    for(i=BestSet.Length();i>=1;i--) {
      enter = Label(BestSet[i]);
      // gout << "\nenter = " << enter;
      
      tmpcol = (T)0;
      tmpcol[BestSet[i]]=(T)1;
      B.solveT(tmpcol,tmpdual);
      
      if( j<0 )
	{ tmpcol=(T)0; tmpcol[-j]=(T)1; }
      else
	A->GetColumn(j,tmpcol);
      
      // gout << "\ncol j = " << tmpcol;
      a_ij = tmpdual*tmpcol;
      c_j = RelativeCost(j);
      if(EqZero(a_ij)) {
	// gout << "\ni not col to enter in prior tableau: ";
	// gout << "a_ij=0";
	BestSet.Remove(i);
      }
      else {
	ratio = c_j/a_ij;
	if(enter<0) 
	  a_ik = tmpdual[-enter];
	else {
	  A->GetColumn(enter,tmpcol);
	  a_ik = tmpdual*tmpcol;
	}
	c_k = RelativeCost(enter);
	c_jo = c_k - a_ik * ratio; 
	// gout << "\ntmpdual = " << tmpdual << "\n";
	// gout << " c_j:" << c_j; 
	// gout << " c_k:" << c_k; 
	// gout << " c_jo:" << c_jo; 
	// gout << " a_ij:" << a_ij; 
	// gout << " a_ik:" << a_ik; 
	if(GeZero(c_jo)) {
	  // gout << "\ni not col to enter in prior tableau: ";
	  // gout << "c_jo<0";
	  BestSet.Remove(i);
	}
	else {
	  flag=0;
	  for(k=-b->Last();k<enter && !flag;k++) if(k!=0) {
	    if(k<0) 
	      a_ik=tmpdual[-k];
	    else {
	      A->GetColumn(k,tmpcol);
	      a_ik = tmpdual*tmpcol;
	    }
	    c_k = RelativeCost(k);
	    c_jo = c_k - a_ik * ratio; 
	    
	    if(LtZero(c_jo)) { 
	      // gout << "\ni not col to enter in prior tableau: ";
	      // gout << "c_jo < 0 for k = " << k;
	      BestSet.Remove(i);
	      flag=1;
	    }
	  }
	}
      }
    }
    // gout << "\nafter checking cols, BestSet = ";
    // BestSet.Dump(gout);

    if(BestSet.Length()>0) 
      for(i=1;i<=BestSet.Length();i++) {
	pivot[1] = BestSet[i];
	pivot[2] = j;
	PivotList.Append(pivot);
      }
  }
}

template <class T>
bool LPTableau<T>::IsReversePivot(int i, int j)
{
  // first check that pivot preserves primal feasibility
  
  // gout << "\nin IsReversePivot, i= " << i << " j = "<< j;
  SolveColumn(j,tmpcol);
  // gout << "\ncurrentPivCol = " << tmpcol;
  // gout << "\ncurrentSolCol = " << solution;
  if(LeZero(tmpcol[i])) { 
    // gout << "\nPrior tableau not primal feasible: currentPivCol[i] <= 0";
    return 0;
  }
  int k;
  T ratio = solution[i]/tmpcol[i];
  // gout << "\nratio = " << ratio;
  
  for(k=tmpcol.First();k<=tmpcol.Last();k++)
    if(GtZero(tmpcol[k]) && GtZero(solution[k]/tmpcol[k]-ratio)) {
      // gout << "\nPrior tableau not primal feasible: i not min ratio";
      return 0;
    }
  // check that j would be the row to exit in prior tableau
  
  T a_ij,a_ik,b_i,b_k,c_j,c_k,c_jo;

  a_ij = (T)1/tmpcol[i];
  if(LeZero(a_ij)) {
    // gout << "\nj not row to exit in prior tableau: a_ij <= 0";
    return 0;
  }
  b_i = solution[i]/tmpcol[i];
  ratio = b_i/a_ij;
  
  for(k=tmpcol.First();k<=tmpcol.Last();k++) 
    if(k!=i) {
      a_ik = - a_ij * tmpcol[k];
      b_k = solution[k] - b_i*tmpcol[k];
      if(GtZero(a_ik) && GtZero(b_k/a_ik -ratio)) {
	// gout << "\nj not row to exit in prior tableau: ";
	// gout << "higher ratio at row= " << k;
	return 0;
      }
      if(GtZero(a_ik) && EqZero(b_k/a_ik-ratio) && Label(k)<j) {
	// gout << "\nj not row to exit in prior tableau: ";
	// gout << "same ratio,lower lex at k= " << k;
	return 0;
      }
    }

  // check that i would be the column to enter in prior tableau
  
  int enter = Label(i);
  // gout << "\nenter = " << enter;
  
  gVector<T> tmpdual(MinRow(),MaxRow());
  tmpcol = (T)0;
  tmpcol[i]=(T)1;
  B.solveT(tmpcol,tmpdual);

  if( j<0 )
    { tmpcol=(T)0; tmpcol[-j]=(T)1; }
  else
    A->GetColumn(j,tmpcol);
  
  // gout << "\ncol j = " << tmpcol;
  a_ij = tmpdual*tmpcol;
  c_j = RelativeCost(j);
  if(EqZero(a_ij)) {
    // gout << "\ni not col to enter in prior tableau: ";
    // gout << "a_ij=0";
    return 0;
  }
  ratio = c_j/a_ij;
  
  if(enter<0) 
    a_ik = tmpdual[-enter];
  else {
    A->GetColumn(enter,tmpcol);
    a_ik = tmpdual*tmpcol;
  }
  c_k = RelativeCost(enter);
  c_jo = c_k - a_ik * ratio; 
  if(GeZero(c_jo)) {
    // gout << "\ni not col to enter in prior tableau: ";
    // gout << "c_jo<0";
    return 0;
  }

  for(k=-b->Last();k<enter;k++) if(k!=0) {
    if(k<0) 
      a_ik=tmpdual[-k];
    else {
      A->GetColumn(k,tmpcol);
      a_ik = tmpdual*tmpcol;
    }
    c_k = RelativeCost(k);
    c_jo = c_k - a_ik * ratio; 
    
    if(LtZero(c_jo)) { 
      // gout << "\ni not col to enter in prior tableau: ";
      // gout << "c_jo < 0 for k = " << k;
      return 0;
    }
  }
  // gout << "\nValid Reverse pivot at i = " << i << " j =  " << j;
  return 1;
}

template <class T>
void LPTableau<T>::DualReversePivots(gList<gArray<int> > &/*list*/)
{
}

template <class T>
bool LPTableau<T>::IsDualReversePivot(int i, int j)
{
  // first check that pivot preserves dual feasibility
  
  // gout << "\nin IsDualReversePivot, i= " << i << " j = "<< j;

  int k;
  gVector<T> tmpdual(MinRow(),MaxRow());
  tmpcol = (T)0;
  tmpcol[i]=(T)1;
  B.solveT(tmpcol,tmpdual);

  T a_ij,a_ik,c_j,c_k,ratio;

  if( j<0 )
    { tmpcol=(T)0; tmpcol[-j]=(T)1; }
  else
    A->GetColumn(j,tmpcol);
  
  a_ij = tmpdual*tmpcol;
  c_j = RelativeCost(j);
  if(GeZero(a_ij)) {
    // gout << "\nPrior tableau not dual feasible: ";
    // gout << "a_ij>=0";
    return 0;
  }
  ratio = c_j/a_ij;
  
  for(k=-b->Last();k<=cost.Last();k++) if(k!=0) {
    if(k<0) 
      a_ik=tmpdual[-k];
    else {
      A->GetColumn(k,tmpcol);
      a_ik = tmpdual*tmpcol;
    }
    c_k = RelativeCost(k);
    
    if(LtZero(a_ik) && GtZero(c_k/a_ik-ratio)) { 
      // gout << "\nPrior tableau not dual feasible: ";
      // gout << "\nhigher ratio for k = " << k;
      return 0;
    }
  }

  // check that i would be the column to enter in prior tableau

  int enter = Label(i);
  // gout << "\nenter = " << enter;

  if(enter<0) 
    a_ik = tmpdual[-enter];
  else {
    A->GetColumn(enter,tmpcol);
    a_ik = tmpdual*tmpcol;
  }
  a_ik = a_ik/a_ij;
  c_k = RelativeCost(enter);
  c_k -= a_ik * c_j; 

  if(GeZero(a_ik)) {
    // gout << "\ni not col to enter in prior tableau: ";
    // gout << "a_ik>=0";
    return 0;
  }
  ratio = c_k/a_ik;

  for(k=-b->Last();k<=cost.Last();k++) if(k!=0) {
    if(k<0) 
      a_ik=tmpdual[-k];
    else {
    A->GetColumn(k,tmpcol);
    a_ik = tmpdual*tmpcol;
    }
    a_ik = a_ik/a_ij;
    c_k = RelativeCost(k);
    c_k -= a_ik * c_j; 
    
    if(LtZero(a_ik) && GtZero(c_k/a_ik- ratio)) { 
      // gout << "\ni not col to enter in prior tableau: ";
      // gout << "\nhigher ratio for k = " << k;
      return 0;
    }
    if(k<enter && LtZero(a_ik) && EqZero(c_k/a_ik - ratio)) { 
      // gout << "\ni not col to enter in prior tableau: ";
      // gout << "\nsame ratio and lower lex for k = " << k;
      return 0;
    }
  }

  // check that j would be the row to exit in prior tableau

  SolveColumn(j,tmpcol);
  // gout << "\ncurrentPivCol = " << tmpcol;
  // gout << "\ncurrentSolCol = " << solution;

  T b_k,b_i;
  b_i= solution[i]/tmpcol[i];
  if(LeZero(b_i)) {
    // gout << "\nj not row to exit in prior tableau: ";
    // gout << "b_i<=0";
    return 0;
    }

  
  for(k=b->First();k<=b->Last();k++) 
    if(k!=i) {
      b_k = solution[k] -  b_i * tmpcol[k];
      if(GtZero(b_k) && Label(k)<j) {
	// gout << "\nj not row to exit in prior tableau: ";
	// gout << "same ratio,lower lex at k= " << k;
	return 0;
      }
    }
  // gout << "\nValid Reverse pivot at i = " << i << " j =  " << j;
  return 1;
}

template <class T>
BFS<T> LPTableau<T>::DualBFS() const
{
  BFS<T> cbfs((T) 0);
  for(int i=MinRow();i<=MaxRow();i++) {
    if(!Member(-i)) 
      cbfs.Define(-i,dual[i]);
  }
  return cbfs;
}


  
