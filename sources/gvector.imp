//#
//# FILE: gvector.imp -- Implementation of vector class
//#
//# $Id$
//#

#include "gvector.h"
#include <assert.h>

//------------------------------------------------------------------------
//     gVector<T>: Constructors, destructor, constructive operators
//------------------------------------------------------------------------

template <class T> gVector<T>::gVector(int len) : gArray<T>(len) 
{ }

template <class T> gVector<T>::gVector(int low, int high) 
  : gArray<T>(low, high)
{ }

template <class T> gVector<T>::gVector(const gVector<T> &V) 
  : gArray<T>(V) 
{ }

template <class T> gVector<T>::~gVector()   { }

template <class T> gVector<T>& gVector<T>::operator=(const gVector<T>& V)
{
  assert(Check(V));
  gArray<T>::operator=(V);
  return *this;
}


//------------------------------------------------------------------------
// inline arithmetic operators
//------------------------------------------------------------------------

template <class T> int gVector<T>::operator!=(const gVector<T> &V) const
{ return !(*this == V); }

template <class T> int gVector<T>::operator!=(T c) const
{ return !(*this == c); }


//------------------------------------------------------------------------
// inline internal functions
//------------------------------------------------------------------------
/*
template <class T> int gVector<T>::Check(int index) const
{ return( min<=index && index<=max ); }
*/

template <class T> bool gVector<T>::Check(const gVector<T> &v) const
{ return( v.min == min && v.max == max ); }


//------------------------------------------------------------------------
//	gVector: arithmetic operators
//------------------------------------------------------------------------

template<class T> gVector<T>&
gVector<T>::operator=(T c)
{
  for(int i=min; i<=max; i++)
    (*this)[i]= c;
  return (*this);
}

// arithmetic operators
template <class T> gVector<T>
gVector<T>::operator+(const gVector<T>& V) const
{
  assert( Check(V) );
  gVector<T> tmp(min,max);
  for(int i=min; i<=max; i++)
    tmp[i]= (*this)[i] + V[i];
  return tmp;
}

template <class T> gVector<T>
gVector<T>::operator-(const gVector<T>& V) const
{
  assert( Check(V) );
  gVector<T> tmp(min,max);
  for(int i=min; i<=max; i++)
    tmp[i]= (*this)[i] - V[i];
  return tmp;
}

template <class T> gVector<T>&
gVector<T>::operator+=(const gVector<T>& V)
{
  assert( Check(V) );
  for(int i=min; i<=max; i++)
    (*this)[i] += V[i];
  return (*this);
}

template <class T> gVector<T>&
gVector<T>::operator-=(const gVector<T>& V)
{
  assert( Check(V) );
  for(int i=min; i<=max; i++)
    (*this)[i] -= V[i];
  return (*this);
}

template <class T> gVector<T>
gVector<T>::operator-(void)
{
  gVector<T> tmp(min,max);
  for(int i=min; i<=max; i++)
    tmp[i]= -(*this)[i];
  return tmp;
}

template <class T> gVector<T>
gVector<T>::operator*(T c) const
{
  gVector<T> tmp(min,max);
  for(int i=min; i<=max; i++)
    tmp[i]= (*this)[i]*c;
  return tmp;
}

template <class T> gVector<T>&
gVector<T>::operator*=(T c)
{
  for(int i=min; i<=max; i++)
    (*this)[i] *= c;
  return (*this);
}

template <class T> T
gVector<T>::operator*(const gVector<T>& V) const
{
  assert( Check(V) );
  T sum= (T)0;
  for(int i=min; i<=max; i++)
    sum += (*this)[i] * V[i];
  return sum;
}


template <class T> gVector<T>
gVector<T>::operator/(T c) const
{
  gVector<T> tmp(min,max);
  for(int i=min; i<=max; i++)
    tmp[i]= (*this)[i]/c;
  return tmp;
}


template <class T> int
gVector<T>::operator==(const gVector<T>& V) const
{
  assert( Check(V) );
  for(int i=min; i<=max; i++)
    if( (*this)[i] != V[i] )
      return 0;
  return 1;
}

template <class T> int
gVector<T>::operator==(T c) const
{
  for(int i=min; i<=max; i++)
    if( (*this)[i] != c )
      return 0;
  return 1;
}



template <class T> gOutput &operator<<(gOutput &f, const gVector<T> &V)
{ V.Dump(f);  return f; }
