//#
//# FILE: nfg.imp -- Implementation of type normal form
//#
//# $Id$
//#

#include "nfg.h"
#include "nfplayer.h"
#include "nfstrat.h"


//---------------------------------------------------------------
// NFG: Constructors, Destructor, Operators
//---------------------------------------------------------------

template <class T> Nfg<T>::Nfg(const gArray<int> &dim)
  : BaseNfg(dim), payoffs(dim.Length())
{
  int accum = 1,i;
  for (i = 1; i <= dim.Length(); i++)
    accum *= dim[i];
  for (i = 1; i <= dim.Length(); i++)
    payoffs[i] = new T[accum];
  NumPayPerPlayer = accum;
}

template <class T> Nfg<T>::Nfg(const Nfg &n)
  : BaseNfg(n), payoffs(n.payoffs.Length())
{
  NumPayPerPlayer = n.NumPayPerPlayer;
  for (int i = 1; i <= payoffs.Length(); i++){
    payoffs[i] = new T[NumPayPerPlayer];
    for (int j = 0; j < NumPayPerPlayer; j++)
      payoffs[i][j] = n.payoffs[i][j];
  }
}

template <class T> Nfg<T>::~Nfg()
{
  for (int i = 1; i <= payoffs.Length(); i++)
    delete [] payoffs[i];
}

//------------------------
// Nfg: Member Functions
//------------------------

template <class T> bool Nfg<T>::IsConstSum(void) const
{
  int pl, index;
  T cvalue = (T) 0;

  for (pl = 1; pl <= players.Length(); pl++)
    cvalue += payoffs[pl][0];
  
  for (index = 1; index < NumPayPerPlayer; index++)  {
    T thisvalue = (T) 0;

    for (pl = 1; pl <= players.Length(); pl++)
      thisvalue += payoffs[pl][index];

    if (thisvalue != cvalue)
      return false;
  }
  
  return true;
}

template <class T> T Nfg<T>::MinPayoff(int pl) const
{
  int index, p, p1, p2;
  T minpay;
  
  if(pl) { p1=p2=pl;}
  else {p1=1;p2=players.Length();}

  minpay = payoffs[p1][1];
  for (index = 1; index < NumPayPerPlayer; index++)  {
    for (p = p1; p <= p2; p++)
      if (payoffs[p][index] < minpay)
	minpay = payoffs[p][index];
  }
  return minpay;
}

template <class T> T Nfg<T>::MaxPayoff(int pl) const
{
  int index, p, p1, p2;
  T maxpay;

  if(pl) { p1=p2=pl;}
  else {p1=1;p2=players.Length();}

  maxpay = payoffs[p1][1];
  for (index = 1; index < NumPayPerPlayer; index++)  {
    for (p = p1; p <= p2; p++)
      if (payoffs[p][index] > maxpay)
	maxpay = payoffs[pl][index];
  }
  return maxpay;
}

template <class T> void Nfg<T>::SetPayoff(int pl, const gArray<int> &profile,
					  const T &value)
{
  int index = 0;
  for (int i = 1; i <= profile.Length(); i++)
    index += players[i]->strategies[profile[i]]->index;
  payoffs[pl][index] = value;
}


template <class T> void Nfg<T>::SetPayoff(int pl, const StrategyProfile *p, 
					   const T &value)
{
  payoffs[pl][p->index] = value;
}

template <class T> 
const T &Nfg<T>::Payoff(int pl, const gArray<int> &profile) const 
{
  int index = 0;
  for (int i = 1; i <= profile.Length(); i++)
    index += players[i]->strategies[profile[i]]->index;
  return (payoffs[pl][index]);
}

template <class T>
const T &Nfg<T>::Payoff(int pl, const StrategyProfile *p) const
{
  return (payoffs[pl][p->index]);
}

#include "nfgiter.h"

template <class T>
void Nfg<T>::WriteNfgFile(gOutput &f) const
{
  int i;

  f << "NFG 1 " << ((Type() == DOUBLE) ? 'D' : 'R');
  f << " \"" << title << "\" { ";

  for (i = 1; i <= players.Length(); i++)
    f << '"' << players[i]->name << "\" ";
  
  f << "}\n\n{ ";
  
  for (i = 1; i <= players.Length(); i++)   {
    f << "{ ";
    for (int j = 1; j <= players[i]->strategies.Length(); j++)
      f << '"' << players[i]->strategies[j]->name << "\" ";
    f << "}\n";
  }
  
  f << "}\n\n";


  int ncont = 1;
  for (i = 1; i <= players.Length(); i++)
    ncont *= players[i]->strategies.Length();

  for (i = 0; i < ncont; i++)
    for (int j = 1; j <= players.Length(); j++)
      f << payoffs[j][i] << ' ';

  f << '\n';
}

#include "gpvector.h"
#include "mixed.h"

//---------------------------------------------------------------------------
//                    MixedProfile<T> member functions
//---------------------------------------------------------------------------

template <class T> MixedProfile<T>::MixedProfile(const Nfg<T> &NF,
						 bool truncated)
: BaseMixedProfile(NF, truncated), Nf(&NF), gPVector<T>(NF.dimensions)
{
  Centroid();
}

template <class T> MixedProfile<T>::MixedProfile(const Nfg<T> &NF,
						 const NFSupport &s)
: BaseMixedProfile(s.BelongsTo(), false, s), Nf(&NF), 
	gPVector<T>(s.SupportDimensions())
{
  Centroid();
}

template <class T> MixedProfile<T>::MixedProfile(const Nfg<T> &NF,
						 const gPVector<T> &profile)
  : BaseMixedProfile(NF, false), gPVector<T>(profile), Nf(&NF)
{ }

template <class T> MixedProfile<T>::MixedProfile(const MixedProfile<T> &p)
  : BaseMixedProfile(p), gPVector<T>(p), Nf(p.Nf)
{ }

template <class T> MixedProfile<T>::~MixedProfile()   { }

template <class T>
MixedProfile<T> &MixedProfile<T>::operator=(const MixedProfile<T> &p)
{
  BaseMixedProfile::operator=(p);
  gPVector<T>::operator=(p);
  Nf = (p.Nf);
  return *this;
}

template <class T> void MixedProfile<T>::Centroid(void) 
{
  T center;
  
  for (int i = 1; i <= N->NumPlayers(); i++)  {
    center = ((T) 1) / ((T) stratset.GetStrategy(i).Length());
    for (int j = 1; j <= stratset.GetStrategy(i).Length(); j++)
      svptr[i][j] = center;
  }
}

template <class T> T MixedProfile<T>::LiapValue(void) const
{
  static const T BIG1 = (T) 100;
  static const T BIG2 = (T) 100;

  MixedProfile<T> p(*this);
  ((gVector<T> &) p).operator=(*this);
  MixedProfile<T> tmp(p);
  gPVector<T> payoff(p);
  T x, result((T) 0), avg, sum;
  payoff = (T) 0;

  result = (T) 0;
  for(int i = 1; i <= N->NumPlayers(); i++) {
    tmp.CopyRow(i, payoff);
    avg = sum = (T) 0;
    // then for each strategy for that player set it to 1 and evaluate
    int j;
    for (j = 1; j <= p.GetNFSupport().NumStrats(i); j++) {
      tmp(i, j) = (T) 1;
      x = p(i, j);
      payoff(i, j) = tmp.Payoff(i);
      avg += x * payoff(i, j);
      sum += x;
      if (x>(T)0) x=0;
      result += BIG1*x*x;         // add penalty for neg probabilities
      tmp(i,j) = (T) 0;
    }
    tmp.CopyRow(i, p);
    for(j=1;j<=p.GetNFSupport().NumStrats(i);j++) {
      x=payoff(i,j)-avg;
      if (x<=(T)0) x=(T)0;
      result += x*x;          // add penalty if not best response
    }
    x=sum - ((T) 1);
    result += BIG2*x*x ;          // add penalty for sum not equal to 1
  }
  return result;
}

template <class T> bool MixedProfile<T>::IsNash(void) const
{
  if(LiapValue()==(T)0) return 1;
  return 0;
}

template <class T> bool MixedProfile<T>::IsPure(void) const
{
  for (int i = 1; i <= svlen.Length(); i++)
    if (!IsPure(i))  return false;
  return true;
}

template <class T> bool MixedProfile<T>::IsPure(int pl) const
{
  T sum = (T) 0;

  T *val = svptr[pl];

  for (int i = 1; i <= svlen[pl]; sum += *(val++))
    if (*val != (T) 0 && *val != (T) 1)   return false;
  if (sum != (T) 1)  return false;  else return true;
}

template <class T> T MixedProfile<T>::Payoff(int pl) const
{
  return PPayoff(pl, 0, 1);
}

template <class T> T 
MixedProfile<T>::Payoff( int pl, int player1, int strat1 ) const
{
  T value = (T) 0;
  PPayoff(pl, player1, strat1, 1,
	 stratset.GetStrategy(player1,strat1)->index, (T) 1.0, value);
  return value;
}

template <class T> T
MixedProfile<T>::Payoff( int pl, int player1, int strat1, int player2,
			int strat2 ) const
{
  if (player1 == player2) return (T) 0;
  T value = (T) 0;
  PPayoff(pl, player1, strat1, player2, strat2, 1,
	 stratset.GetStrategy(player1,strat1)->index +
	 stratset.GetStrategy(player2,strat2)->index,
	 (T) 1.0, value);
  return value;
}

template <class T> 
void MixedProfile<T>::Payoff( int pl, int player1, gVector<T> &value) const
{
  value = (T) 0;
  PPayoff(pl, player1, 1, 0, (T) 1.0, value);
}

template <class T>
bool MixedProfile<T>::operator==(const MixedProfile<T> &mp) const
{
  return (N == mp.N && (const gPVector<T> &) *this == (const gPVector<T> &) mp);
}

template <class T> gOutput &operator<<(gOutput &f, const MixedProfile<T> &p)
{ p.Dump(f);  return f; }


//-------------------------------------- 
// Private Mixed Profile Members
//--------------------------------------

template <class T> 
T MixedProfile<T>::PPayoff(int pl, int index,
			  int i) const
{
  Strategy *s;
  int pindex = 0;

  if (i > N->NumPlayers()) return Nf->payoffs[pl][index];
  T sum = (T) 0;
  for ( int j = 1; j <= stratset.GetStrategy(i).Length(); j++ ) {
    s = stratset.GetStrategy(i, j);
    if ((*this)(i, j) != (T) 0) {
      index += s->index - pindex; 
      pindex = s->index;
      sum += (*this)(i, j) * PPayoff(pl, index, i + 1);
    }
    
  }
  return sum;
}

template <class T>
void MixedProfile<T>::PPayoff(int pl, int const_pl, int const_st,
			   int cur_pl, long index, T prob, T &value) const
{
  Strategy *s;

  if (cur_pl == const_pl)
    PPayoff(pl, const_pl, const_st, cur_pl + 1, index,
	   prob, value);
  else if (cur_pl > N->NumPlayers())
    value += prob * (Nf->payoffs[pl][index]);
  else   {
    for ( int j = 1; j <= stratset.GetStrategy(cur_pl).Length(); j++ ){
      s = stratset.GetStrategy(cur_pl, j);
      if ((*this)(cur_pl, j) > (T) 0)
	PPayoff(pl, const_pl, const_st, cur_pl + 1,
	       index + s->index, prob * (*this)(cur_pl, j), value);
    }
  }
} 


template <class T>
void MixedProfile<T>::PPayoff(int pl, int const_pl1, int const_st1,
			   int const_pl2, int const_st2,
			   int cur_pl, long index, T prob, T &value) const
{
  Strategy *s;

  if (cur_pl == const_pl1 || cur_pl == const_pl2)
    PPayoff(pl, const_pl1, const_st1, const_pl2, const_st2,
	   cur_pl + 1, index,prob, value);
  else if (cur_pl > N->NumPlayers())
    value += prob * (Nf->payoffs[pl][index]);
  else   {
    for (int j = 1; j <= stratset.GetStrategy(cur_pl).Length(); j++ ) {
      s = stratset.GetStrategy(cur_pl, j);
      if ((*this)(cur_pl, j) > (T) 0)
	PPayoff(pl, const_pl1, const_st1, const_pl2, const_st2,
	       cur_pl + 1, index + s->index, prob * (*this)(cur_pl, j), 
	       value);
    }
  }
}

template <class T>
void MixedProfile<T>::PPayoff(int pl, int const_pl, int cur_pl, long index, 
			   T prob, gVector<T> &value) const
{
  Strategy *s;

  if (cur_pl == const_pl)
    PPayoff(pl, const_pl, cur_pl + 1, index,
	   prob, value);
  else if (cur_pl > N->NumPlayers())  {
    for (int j = 1; j <= stratset.GetStrategy(const_pl).Length(); j++ ){ 
      s = stratset.GetStrategy(const_pl,j);
      value[j] += prob * (Nf->payoffs[pl][index + s->index]);
    }
  }
  else   {
    for (int j = 1; j <= stratset.GetStrategy(cur_pl).Length(); j++) {
      s = stratset.GetStrategy(cur_pl,j);
      if ((*this)(cur_pl, j) > (T) 0)
	PPayoff(pl, const_pl, cur_pl + 1,
	       index + s->index, prob * (*this)(cur_pl, j), value);
    }
  }
}








