//
// FILE: basis.imp -- implementation of the Basis class
//
// 

#include"basis.h"
#include "gtext.h"

// ---------------------------------------------------------------------------
// Class Basis
// ---------------------------------------------------------------------------

// -----------------------
// C-tor, D-tor, Operators
// -----------------------

template <class T> 
Basis<T>::Basis(const gMatrix<T> &A)
  : A(&A), label(A.MinRow(),A.MaxRow()), cols(A.MinCol(),A.MaxCol()), 
    slacks(A.MinRow(),A.MaxRow()), artUnitEntry(A.MaxCol()+1,A.MaxCol()),
    colBlocked(A.MinCol(),A.MaxCol()),rowBlocked(A.MinRow(),A.MaxRow())
{
  int i;
  for(i = cols.First(); i <= cols.Last(); i++) {
    cols[i] = 0;
    colBlocked[i] = false;
  }

  for(i = label.First(); i <= label.Last(); i++) {
    label[i]= - i;
    slacks[i] = i;
    rowBlocked[i] = false;
  }
  IsBasisIdent = true;
}

template <class T>
Basis<T>::Basis(const Basis<T> &bas)
: A(bas.A), label(bas.label), cols( bas.cols ), slacks( bas.slacks ),
  artUnitEntry(bas.artUnitEntry), colBlocked(bas.colBlocked), 
  rowBlocked(bas.rowBlocked), IsBasisIdent(bas.IsBasisIdent)
{ }

template <class T>
Basis<T>::~Basis()
{ }

template <class T>
Basis<T>& Basis<T>::operator=(const Basis<T> &orig)
{
  if(this != &orig) {
    A = orig.A;
    label = orig.label; 
    cols = orig.cols;
    slacks = orig.slacks;
    artUnitEntry = orig.artUnitEntry;
    rowBlocked = orig.rowBlocked;
    colBlocked = orig.colBlocked;
    IsBasisIdent = orig.IsBasisIdent;

  }
  return *this;
}


// -------------------------
// Public Members
// -------------------------

template <class T>
int Basis<T>::First()
{
  return label.First();
}

template <class T>
int Basis<T>::Last()
{
  return label.Last();
}

template <class T>
int Basis<T>::FirstLabel()
{
  return cols.First();
}

template <class T>
int Basis<T>::LastLabel()
{
  return cols.Last();
}

template <class T>
int Basis<T>::Pivot(int outindex, int col)
{
  int outlabel = label[outindex];
 
  if (IsSlackColumn(col)) slacks[-col] = outindex;
  else if (IsRegColumn(col)) cols[col] = outindex;
  else throw BadIndex(); // not a valid column to pivot in.
  
  if (IsSlackColumn(outlabel)) slacks[-outlabel] = 0;
  else if (IsRegColumn(outlabel)) cols[outlabel] = 0;
  else {
    // Note: here, should back out outindex.    
    throw BadIndex(); // not a valid column to pivot out. 
  }
  
  label[outindex] = col;
  CheckBasis();
  
  return outlabel;
}

template <class T>
bool Basis<T>::Member( int col ) const
{
  int ret;

  if (IsSlackColumn(col)) ret = slacks[-col];
  else if (IsRegColumn(col)) ret = cols[col];
  else ret = 0;

  return (ret != 0);
}


template <class T>
int Basis<T>::Find( int col ) const
{
  int ret;

  if ( IsSlackColumn(col)) ret = slacks[-col];
  else if (IsRegColumn(col)) ret = cols[col];
  else ret = 0;
  
  assert (ret != 0);
  return ret;
}

template <class T>
int Basis<T>::Label(int index) const
{
  return  label[index];
}

template <class T>
void Basis<T>::Mark(int col )
{
  if (IsSlackColumn(col)) rowBlocked[-col] = true;
  else if (IsRegColumn(col)) colBlocked[col] = true;
}

template <class T>
void Basis<T>::UnMark(int col )
{
  if (IsSlackColumn(col)) rowBlocked[-col] = false;
  else if (IsRegColumn(col)) colBlocked[col] = false;
}

template <class T>
bool Basis<T>::IsBlocked(int col) const
{
  if (IsSlackColumn(col)) return rowBlocked[-col];
  else if (IsRegColumn(col)) return colBlocked[col];
  return false;
}

template <class T>
void Basis<T>::BasisSelect(const gBlock<T> &rowv, gVector<T> &colv) const
{
  assert(A->CheckColumn(colv) && A->CheckRow(rowv));

  for(int i=label.First(); i<=label.Last(); i++) {
    if(label[i]<0)
      colv[i]= 0;
    else
      colv[i]= rowv[label[i]];
  }
}

template <class T>
void Basis<T>::BasisSelect(const gBlock<T> &unitv,
			   const gBlock<T> &rowv,
			   gVector<T> &colv ) const
{
  // assert(A->CheckColumn(colv) && A->CheckColumn(unitv)
  //	 && A->CheckRow(rowv) );
  
  for(int i=label.First(); i<=label.Last(); i++) {
    if(label[i]<0)
      colv[i]= unitv[-label[i]];
    else
      colv[i]= rowv[label[i]];
  }
}

template <class T>
void Basis<T>::GetColumn( int col, gVector<T> &ret ) const
{
  if(IsRegColumn(col))
    A->GetColumn(col, ret);
  else if (IsSlackColumn(col)) {
    ret = (T) 0;
    ret[-col] = (T) 1;
  }
  else if (IsArtifColumn(col)) {
    ret = (T) 0;
    ret[artUnitEntry[col]] = (T) 1;
  }
}

template <class T>
int Basis<T>::AppendArtificial( int art )
{
  cols.Append(0);
  return artUnitEntry.Append(art);
}

template <class T>
void Basis<T>::RemoveArtificial( int col )
{
  assert(IsArtifColumn(col));
  assert(cols[col]==0); // can only remove non basic columns
  cols.Remove(col);
  artUnitEntry.Remove( col);
}

template <class T> 
gOutput &operator<<(gOutput &to, const Basis<T> &v)
{
  v.Dump(to); return to;
}

template <class T>
void Basis<T>::Dump(gOutput &to) const
{ 
  to << "{";
  for(int i=label.First();i<=label.Last();i++) {
    to << "  " << label[i];  
  }
  to << " }";
}

template<class T>
void Basis<T>::CheckBasis() 
{
  bool check = true;

  for (int i =label.First(); i <= label.Last() && check; i++)
    if(label[i] != -i) check = false;
  
  IsBasisIdent = check;
}

template<class T>
bool Basis<T>::IsIdent()
{
  return IsBasisIdent;
}

template <class T> Basis<T>::BadIndex::~BadIndex()
{ }

template <class T> gText Basis<T>::BadIndex::Description(void) const
{
  return "Bad index in gArray";
}
